
Lab5-Proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  000023ce  00002462  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  00800142  00800142  000024a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000024a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00002514  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000316d  00000000  00000000  0000276c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010c6  00000000  00000000  000058d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001736  00000000  00000000  0000699f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c68  00000000  00000000  000080d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a14  00000000  00000000  00008d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002af8  00000000  00000000  00009754  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  0000c24c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__vector_1>
       8:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <__vector_2>
       c:	0c 94 75 07 	jmp	0xeea	; 0xeea <__vector_3>
      10:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <__vector_4>
      14:	0c 94 53 08 	jmp	0x10a6	; 0x10a6 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__vector_9>
      28:	0c 94 c2 08 	jmp	0x1184	; 0x1184 <__vector_10>
      2c:	0c 94 31 09 	jmp	0x1262	; 0x1262 <__vector_11>
      30:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <__vector_12>
      34:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__vector_13>
      38:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <__vector_14>
      3c:	0c 94 ed 0a 	jmp	0x15da	; 0x15da <__vector_15>
      40:	0c 94 5c 0b 	jmp	0x16b8	; 0x16b8 <__vector_16>
      44:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__vector_17>
      48:	0c 94 3a 0c 	jmp	0x1874	; 0x1874 <__vector_18>
      4c:	0c 94 a9 0c 	jmp	0x1952	; 0x1952 <__vector_19>
      50:	0c 94 18 0d 	jmp	0x1a30	; 0x1a30 <__vector_20>
      54:	0c 94 87 0d 	jmp	0x1b0e	; 0x1b0e <__vector_21>
      58:	0c 94 f6 0d 	jmp	0x1bec	; 0x1bec <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	ee ec       	ldi	r30, 0xCE	; 206
      70:	f3 e2       	ldi	r31, 0x23	; 35
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a2 34       	cpi	r26, 0x42	; 66
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	a2 e4       	ldi	r26, 0x42	; 66
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a5 39       	cpi	r26, 0x95	; 149
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 c8 04 	call	0x990	; 0x990 <main>
      92:	0c 94 e5 11 	jmp	0x23ca	; 0x23ca <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <enQueue>:
#define MAX_CARS_BEFORE_SWITCH 5
int normalSWITCH(Bridge *self, int side);
int convertBack(Bridge *self, int side);
int removeCarBridge(Bridge*, int);

int enQueue(Bridge *self, int side){
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	ec 01       	movw	r28, r24
	if(side == NORTH){
      ac:	61 30       	cpi	r22, 0x01	; 1
      ae:	71 05       	cpc	r23, r1
      b0:	11 f5       	brne	.+68     	; 0xf6 <enQueue+0x5c>
		self->NorthQueueSize++;
      b2:	88 85       	ldd	r24, Y+8	; 0x08
      b4:	99 85       	ldd	r25, Y+9	; 0x09
      b6:	01 96       	adiw	r24, 0x01	; 1
      b8:	99 87       	std	Y+9, r25	; 0x09
      ba:	88 87       	std	Y+8, r24	; 0x08
		PRINT(self->NorthQueueSize, self->lcd->NorthScreenPos);
      bc:	0e 81       	ldd	r16, Y+6	; 0x06
      be:	1f 81       	ldd	r17, Y+7	; 0x07
      c0:	f8 01       	movw	r30, r16
      c2:	d4 80       	ldd	r13, Z+4	; 0x04
      c4:	cd 2c       	mov	r12, r13
      c6:	c7 94       	ror	r12
      c8:	cc 24       	eor	r12, r12
      ca:	c7 94       	ror	r12
      cc:	8f 77       	andi	r24, 0x7F	; 127
      ce:	c8 2a       	or	r12, r24
      d0:	8d 2d       	mov	r24, r13
      d2:	86 95       	lsr	r24
      d4:	83 70       	andi	r24, 0x03	; 3
      d6:	d8 2e       	mov	r13, r24
      d8:	0f 2e       	mov	r0, r31
      da:	f2 e9       	ldi	r31, 0x92	; 146
      dc:	ef 2e       	mov	r14, r31
      de:	f4 e0       	ldi	r31, 0x04	; 4
      e0:	ff 2e       	mov	r15, r31
      e2:	f0 2d       	mov	r31, r0
      e4:	20 e0       	ldi	r18, 0x00	; 0
      e6:	30 e0       	ldi	r19, 0x00	; 0
      e8:	a9 01       	movw	r20, r18
      ea:	60 e0       	ldi	r22, 0x00	; 0
      ec:	70 e0       	ldi	r23, 0x00	; 0
      ee:	cb 01       	movw	r24, r22
      f0:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <async>
      f4:	23 c0       	rjmp	.+70     	; 0x13c <enQueue+0xa2>
	}else if(side == SOUTH){
      f6:	67 2b       	or	r22, r23
      f8:	09 f5       	brne	.+66     	; 0x13c <enQueue+0xa2>
		self->SouthQueueSize++;
      fa:	8a 85       	ldd	r24, Y+10	; 0x0a
      fc:	9b 85       	ldd	r25, Y+11	; 0x0b
      fe:	01 96       	adiw	r24, 0x01	; 1
     100:	9b 87       	std	Y+11, r25	; 0x0b
     102:	8a 87       	std	Y+10, r24	; 0x0a
		PRINT(self->SouthQueueSize, self->lcd->SouthScreenPos);
     104:	0e 81       	ldd	r16, Y+6	; 0x06
     106:	1f 81       	ldd	r17, Y+7	; 0x07
     108:	f8 01       	movw	r30, r16
     10a:	d6 80       	ldd	r13, Z+6	; 0x06
     10c:	cd 2c       	mov	r12, r13
     10e:	c7 94       	ror	r12
     110:	cc 24       	eor	r12, r12
     112:	c7 94       	ror	r12
     114:	8f 77       	andi	r24, 0x7F	; 127
     116:	c8 2a       	or	r12, r24
     118:	8d 2d       	mov	r24, r13
     11a:	86 95       	lsr	r24
     11c:	83 70       	andi	r24, 0x03	; 3
     11e:	d8 2e       	mov	r13, r24
     120:	0f 2e       	mov	r0, r31
     122:	f2 e9       	ldi	r31, 0x92	; 146
     124:	ef 2e       	mov	r14, r31
     126:	f4 e0       	ldi	r31, 0x04	; 4
     128:	ff 2e       	mov	r15, r31
     12a:	f0 2d       	mov	r31, r0
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	a9 01       	movw	r20, r18
     132:	60 e0       	ldi	r22, 0x00	; 0
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	cb 01       	movw	r24, r22
     138:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <async>
	}
	if(self->CarsOnBridge == 0 && self->NorthQueueSize == 1 && self->SouthQueueSize == 0){
     13c:	8c 85       	ldd	r24, Y+12	; 0x0c
     13e:	9d 85       	ldd	r25, Y+13	; 0x0d
     140:	00 97       	sbiw	r24, 0x00	; 0
     142:	d9 f4       	brne	.+54     	; 0x17a <enQueue+0xe0>
     144:	28 85       	ldd	r18, Y+8	; 0x08
     146:	39 85       	ldd	r19, Y+9	; 0x09
     148:	21 30       	cpi	r18, 0x01	; 1
     14a:	31 05       	cpc	r19, r1
     14c:	b1 f4       	brne	.+44     	; 0x17a <enQueue+0xe0>
     14e:	2a 85       	ldd	r18, Y+10	; 0x0a
     150:	3b 85       	ldd	r19, Y+11	; 0x0b
     152:	23 2b       	or	r18, r19
     154:	91 f4       	brne	.+36     	; 0x17a <enQueue+0xe0>
		ASYNC(self, normalSWITCH, 0);
     156:	c1 2c       	mov	r12, r1
     158:	d1 2c       	mov	r13, r1
     15a:	0f 2e       	mov	r0, r31
     15c:	ff ef       	ldi	r31, 0xFF	; 255
     15e:	ef 2e       	mov	r14, r31
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	ff 2e       	mov	r15, r31
     164:	f0 2d       	mov	r31, r0
     166:	8e 01       	movw	r16, r28
     168:	20 e0       	ldi	r18, 0x00	; 0
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	a9 01       	movw	r20, r18
     16e:	60 e0       	ldi	r22, 0x00	; 0
     170:	70 e0       	ldi	r23, 0x00	; 0
     172:	cb 01       	movw	r24, r22
     174:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <async>
     178:	37 c0       	rjmp	.+110    	; 0x1e8 <enQueue+0x14e>
	}else if(self->CarsOnBridge == 0 && self->SouthQueueSize == 1 && self->NorthQueueSize == 0){
     17a:	89 2b       	or	r24, r25
     17c:	d1 f4       	brne	.+52     	; 0x1b2 <enQueue+0x118>
     17e:	8a 85       	ldd	r24, Y+10	; 0x0a
     180:	9b 85       	ldd	r25, Y+11	; 0x0b
     182:	01 97       	sbiw	r24, 0x01	; 1
     184:	b1 f4       	brne	.+44     	; 0x1b2 <enQueue+0x118>
     186:	88 85       	ldd	r24, Y+8	; 0x08
     188:	99 85       	ldd	r25, Y+9	; 0x09
     18a:	89 2b       	or	r24, r25
     18c:	91 f4       	brne	.+36     	; 0x1b2 <enQueue+0x118>
		ASYNC(self, normalSWITCH, 0);
     18e:	c1 2c       	mov	r12, r1
     190:	d1 2c       	mov	r13, r1
     192:	0f 2e       	mov	r0, r31
     194:	ff ef       	ldi	r31, 0xFF	; 255
     196:	ef 2e       	mov	r14, r31
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	ff 2e       	mov	r15, r31
     19c:	f0 2d       	mov	r31, r0
     19e:	8e 01       	movw	r16, r28
     1a0:	20 e0       	ldi	r18, 0x00	; 0
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	a9 01       	movw	r20, r18
     1a6:	60 e0       	ldi	r22, 0x00	; 0
     1a8:	70 e0       	ldi	r23, 0x00	; 0
     1aa:	cb 01       	movw	r24, r22
     1ac:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <async>
     1b0:	1b c0       	rjmp	.+54     	; 0x1e8 <enQueue+0x14e>
	}else if(!self->NorthGreen && !self->SouthGreen && !self->forceRED){
     1b2:	89 89       	ldd	r24, Y+17	; 0x11
     1b4:	81 11       	cpse	r24, r1
     1b6:	18 c0       	rjmp	.+48     	; 0x1e8 <enQueue+0x14e>
     1b8:	8b 89       	ldd	r24, Y+19	; 0x13
     1ba:	81 11       	cpse	r24, r1
     1bc:	15 c0       	rjmp	.+42     	; 0x1e8 <enQueue+0x14e>
     1be:	88 89       	ldd	r24, Y+16	; 0x10
     1c0:	81 11       	cpse	r24, r1
     1c2:	12 c0       	rjmp	.+36     	; 0x1e8 <enQueue+0x14e>
		AFTER(MSEC(1000), self, normalSWITCH, 0);
     1c4:	c1 2c       	mov	r12, r1
     1c6:	d1 2c       	mov	r13, r1
     1c8:	0f 2e       	mov	r0, r31
     1ca:	ff ef       	ldi	r31, 0xFF	; 255
     1cc:	ef 2e       	mov	r14, r31
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	ff 2e       	mov	r15, r31
     1d2:	f0 2d       	mov	r31, r0
     1d4:	8e 01       	movw	r16, r28
     1d6:	20 e0       	ldi	r18, 0x00	; 0
     1d8:	30 e0       	ldi	r19, 0x00	; 0
     1da:	a9 01       	movw	r20, r18
     1dc:	62 e1       	ldi	r22, 0x12	; 18
     1de:	7a e7       	ldi	r23, 0x7A	; 122
     1e0:	80 e0       	ldi	r24, 0x00	; 0
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <async>
	}
	return 0;
}
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	df 91       	pop	r29
     1ee:	cf 91       	pop	r28
     1f0:	1f 91       	pop	r17
     1f2:	0f 91       	pop	r16
     1f4:	ff 90       	pop	r15
     1f6:	ef 90       	pop	r14
     1f8:	df 90       	pop	r13
     1fa:	cf 90       	pop	r12
     1fc:	08 95       	ret

000001fe <normalSWITCH>:

int normalSWITCH(Bridge *self, int side){
     1fe:	cf 92       	push	r12
     200:	df 92       	push	r13
     202:	ef 92       	push	r14
     204:	ff 92       	push	r15
     206:	0f 93       	push	r16
     208:	1f 93       	push	r17
	if(self->forceRED){
     20a:	fc 01       	movw	r30, r24
     20c:	20 89       	ldd	r18, Z+16	; 0x10
     20e:	21 11       	cpse	r18, r1
     210:	0e c1       	rjmp	.+540    	; 0x42e <__DATA_REGION_LENGTH__+0x2e>
		return 0;
	}
	if(side == NORTH){
     212:	61 30       	cpi	r22, 0x01	; 1
     214:	71 05       	cpc	r23, r1
     216:	09 f0       	breq	.+2      	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
     218:	85 c0       	rjmp	.+266    	; 0x324 <__EEPROM_REGION_LENGTH__+0x124>
		if(self->NorthQueueSize){
     21a:	80 85       	ldd	r24, Z+8	; 0x08
     21c:	91 85       	ldd	r25, Z+9	; 0x09
     21e:	89 2b       	or	r24, r25
     220:	89 f1       	breq	.+98     	; 0x284 <__EEPROM_REGION_LENGTH__+0x84>
			if(self->CarDirection == NORTH){
     222:	82 89       	ldd	r24, Z+18	; 0x12
     224:	88 23       	and	r24, r24
     226:	d1 f0       	breq	.+52     	; 0x25c <__EEPROM_REGION_LENGTH__+0x5c>
				self->NorthGreen = true;
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	81 8b       	std	Z+17, r24	; 0x11
				self->SouthGreen = false;
     22c:	13 8a       	std	Z+19, r1	; 0x13
				self->CarDirection = NORTH;
     22e:	82 8b       	std	Z+18, r24	; 0x12
				SENDSIGNAL;
     230:	04 81       	ldd	r16, Z+4	; 0x04
     232:	15 81       	ldd	r17, Z+5	; 0x05
     234:	0f 2e       	mov	r0, r31
     236:	f9 e0       	ldi	r31, 0x09	; 9
     238:	cf 2e       	mov	r12, r31
     23a:	d1 2c       	mov	r13, r1
     23c:	f0 2d       	mov	r31, r0
     23e:	0f 2e       	mov	r0, r31
     240:	f3 e7       	ldi	r31, 0x73	; 115
     242:	ef 2e       	mov	r14, r31
     244:	f1 e1       	ldi	r31, 0x11	; 17
     246:	ff 2e       	mov	r15, r31
     248:	f0 2d       	mov	r31, r0
     24a:	20 e0       	ldi	r18, 0x00	; 0
     24c:	30 e0       	ldi	r19, 0x00	; 0
     24e:	a9 01       	movw	r20, r18
     250:	60 e0       	ldi	r22, 0x00	; 0
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	cb 01       	movw	r24, r22
     256:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <async>
     25a:	e9 c0       	rjmp	.+466    	; 0x42e <__DATA_REGION_LENGTH__+0x2e>
			}else{
				AFTER(MSEC(1250), self, normalSWITCH, NORTH);
     25c:	cc 24       	eor	r12, r12
     25e:	c3 94       	inc	r12
     260:	d1 2c       	mov	r13, r1
     262:	0f 2e       	mov	r0, r31
     264:	ff ef       	ldi	r31, 0xFF	; 255
     266:	ef 2e       	mov	r14, r31
     268:	f0 e0       	ldi	r31, 0x00	; 0
     26a:	ff 2e       	mov	r15, r31
     26c:	f0 2d       	mov	r31, r0
     26e:	8f 01       	movw	r16, r30
     270:	20 e0       	ldi	r18, 0x00	; 0
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	a9 01       	movw	r20, r18
     276:	66 e9       	ldi	r22, 0x96	; 150
     278:	78 e9       	ldi	r23, 0x98	; 152
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <async>
     282:	d5 c0       	rjmp	.+426    	; 0x42e <__DATA_REGION_LENGTH__+0x2e>
			}
			
		}else if(self->SouthQueueSize){
     284:	82 85       	ldd	r24, Z+10	; 0x0a
     286:	93 85       	ldd	r25, Z+11	; 0x0b
     288:	89 2b       	or	r24, r25
     28a:	a1 f1       	breq	.+104    	; 0x2f4 <__EEPROM_REGION_LENGTH__+0xf4>
			if(self->CarsOnBridge){
     28c:	84 85       	ldd	r24, Z+12	; 0x0c
     28e:	95 85       	ldd	r25, Z+13	; 0x0d
     290:	89 2b       	or	r24, r25
     292:	a1 f0       	breq	.+40     	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
				AFTER(MSEC(1250), self, normalSWITCH, NORTH);
     294:	cc 24       	eor	r12, r12
     296:	c3 94       	inc	r12
     298:	d1 2c       	mov	r13, r1
     29a:	0f 2e       	mov	r0, r31
     29c:	ff ef       	ldi	r31, 0xFF	; 255
     29e:	ef 2e       	mov	r14, r31
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	ff 2e       	mov	r15, r31
     2a4:	f0 2d       	mov	r31, r0
     2a6:	8f 01       	movw	r16, r30
     2a8:	20 e0       	ldi	r18, 0x00	; 0
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	a9 01       	movw	r20, r18
     2ae:	66 e9       	ldi	r22, 0x96	; 150
     2b0:	78 e9       	ldi	r23, 0x98	; 152
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <async>
     2ba:	b9 c0       	rjmp	.+370    	; 0x42e <__DATA_REGION_LENGTH__+0x2e>
			}else{
				self->SouthGreen = true;
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	83 8b       	std	Z+19, r24	; 0x13
				self->NorthGreen = false;
     2c0:	11 8a       	std	Z+17, r1	; 0x11
				self->CarDirection = SOUTH;
     2c2:	12 8a       	std	Z+18, r1	; 0x12
				self->CarsSentCurrent = 0;
     2c4:	17 86       	std	Z+15, r1	; 0x0f
     2c6:	16 86       	std	Z+14, r1	; 0x0e
				SENDSIGNAL;
     2c8:	04 81       	ldd	r16, Z+4	; 0x04
     2ca:	15 81       	ldd	r17, Z+5	; 0x05
     2cc:	0f 2e       	mov	r0, r31
     2ce:	f6 e0       	ldi	r31, 0x06	; 6
     2d0:	cf 2e       	mov	r12, r31
     2d2:	d1 2c       	mov	r13, r1
     2d4:	f0 2d       	mov	r31, r0
     2d6:	0f 2e       	mov	r0, r31
     2d8:	f3 e7       	ldi	r31, 0x73	; 115
     2da:	ef 2e       	mov	r14, r31
     2dc:	f1 e1       	ldi	r31, 0x11	; 17
     2de:	ff 2e       	mov	r15, r31
     2e0:	f0 2d       	mov	r31, r0
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	a9 01       	movw	r20, r18
     2e8:	60 e0       	ldi	r22, 0x00	; 0
     2ea:	70 e0       	ldi	r23, 0x00	; 0
     2ec:	cb 01       	movw	r24, r22
     2ee:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <async>
     2f2:	9d c0       	rjmp	.+314    	; 0x42e <__DATA_REGION_LENGTH__+0x2e>
			}
		}else{
			self->NorthGreen = false;
     2f4:	11 8a       	std	Z+17, r1	; 0x11
			self->SouthGreen = false;
     2f6:	13 8a       	std	Z+19, r1	; 0x13
			SENDSIGNAL;
     2f8:	04 81       	ldd	r16, Z+4	; 0x04
     2fa:	15 81       	ldd	r17, Z+5	; 0x05
     2fc:	0f 2e       	mov	r0, r31
     2fe:	fa e0       	ldi	r31, 0x0A	; 10
     300:	cf 2e       	mov	r12, r31
     302:	d1 2c       	mov	r13, r1
     304:	f0 2d       	mov	r31, r0
     306:	0f 2e       	mov	r0, r31
     308:	f3 e7       	ldi	r31, 0x73	; 115
     30a:	ef 2e       	mov	r14, r31
     30c:	f1 e1       	ldi	r31, 0x11	; 17
     30e:	ff 2e       	mov	r15, r31
     310:	f0 2d       	mov	r31, r0
     312:	20 e0       	ldi	r18, 0x00	; 0
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	a9 01       	movw	r20, r18
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	70 e0       	ldi	r23, 0x00	; 0
     31c:	cb 01       	movw	r24, r22
     31e:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <async>
     322:	85 c0       	rjmp	.+266    	; 0x42e <__DATA_REGION_LENGTH__+0x2e>
		}
	}else if (side == SOUTH){
     324:	67 2b       	or	r22, r23
     326:	09 f0       	breq	.+2      	; 0x32a <__EEPROM_REGION_LENGTH__+0x12a>
     328:	82 c0       	rjmp	.+260    	; 0x42e <__DATA_REGION_LENGTH__+0x2e>
		if(self->SouthQueueSize){
     32a:	82 85       	ldd	r24, Z+10	; 0x0a
     32c:	93 85       	ldd	r25, Z+11	; 0x0b
     32e:	89 2b       	or	r24, r25
     330:	81 f1       	breq	.+96     	; 0x392 <__EEPROM_REGION_LENGTH__+0x192>
			if(self->CarDirection == SOUTH){
     332:	82 89       	ldd	r24, Z+18	; 0x12
     334:	81 11       	cpse	r24, r1
     336:	1a c0       	rjmp	.+52     	; 0x36c <__EEPROM_REGION_LENGTH__+0x16c>
				self->SouthGreen = true;
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	83 8b       	std	Z+19, r24	; 0x13
				self->NorthGreen = false;
     33c:	11 8a       	std	Z+17, r1	; 0x11
				self->CarDirection = SOUTH;
     33e:	12 8a       	std	Z+18, r1	; 0x12
				SENDSIGNAL;
     340:	04 81       	ldd	r16, Z+4	; 0x04
     342:	15 81       	ldd	r17, Z+5	; 0x05
     344:	0f 2e       	mov	r0, r31
     346:	f6 e0       	ldi	r31, 0x06	; 6
     348:	cf 2e       	mov	r12, r31
     34a:	d1 2c       	mov	r13, r1
     34c:	f0 2d       	mov	r31, r0
     34e:	0f 2e       	mov	r0, r31
     350:	f3 e7       	ldi	r31, 0x73	; 115
     352:	ef 2e       	mov	r14, r31
     354:	f1 e1       	ldi	r31, 0x11	; 17
     356:	ff 2e       	mov	r15, r31
     358:	f0 2d       	mov	r31, r0
     35a:	20 e0       	ldi	r18, 0x00	; 0
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	a9 01       	movw	r20, r18
     360:	60 e0       	ldi	r22, 0x00	; 0
     362:	70 e0       	ldi	r23, 0x00	; 0
     364:	cb 01       	movw	r24, r22
     366:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <async>
     36a:	61 c0       	rjmp	.+194    	; 0x42e <__DATA_REGION_LENGTH__+0x2e>
			}else{
				AFTER(MSEC(1250), self, normalSWITCH, SOUTH);
     36c:	c1 2c       	mov	r12, r1
     36e:	d1 2c       	mov	r13, r1
     370:	0f 2e       	mov	r0, r31
     372:	ff ef       	ldi	r31, 0xFF	; 255
     374:	ef 2e       	mov	r14, r31
     376:	f0 e0       	ldi	r31, 0x00	; 0
     378:	ff 2e       	mov	r15, r31
     37a:	f0 2d       	mov	r31, r0
     37c:	8f 01       	movw	r16, r30
     37e:	20 e0       	ldi	r18, 0x00	; 0
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	a9 01       	movw	r20, r18
     384:	66 e9       	ldi	r22, 0x96	; 150
     386:	78 e9       	ldi	r23, 0x98	; 152
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <async>
     390:	4e c0       	rjmp	.+156    	; 0x42e <__DATA_REGION_LENGTH__+0x2e>
			}
		}else if(self->NorthQueueSize){
     392:	80 85       	ldd	r24, Z+8	; 0x08
     394:	91 85       	ldd	r25, Z+9	; 0x09
     396:	89 2b       	or	r24, r25
     398:	99 f1       	breq	.+102    	; 0x400 <__DATA_REGION_LENGTH__>
			if(self->CarsOnBridge){
     39a:	84 85       	ldd	r24, Z+12	; 0x0c
     39c:	95 85       	ldd	r25, Z+13	; 0x0d
     39e:	89 2b       	or	r24, r25
     3a0:	99 f0       	breq	.+38     	; 0x3c8 <__EEPROM_REGION_LENGTH__+0x1c8>
				AFTER(MSEC(1250), self, normalSWITCH, SOUTH);
     3a2:	c1 2c       	mov	r12, r1
     3a4:	d1 2c       	mov	r13, r1
     3a6:	0f 2e       	mov	r0, r31
     3a8:	ff ef       	ldi	r31, 0xFF	; 255
     3aa:	ef 2e       	mov	r14, r31
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
     3ae:	ff 2e       	mov	r15, r31
     3b0:	f0 2d       	mov	r31, r0
     3b2:	8f 01       	movw	r16, r30
     3b4:	20 e0       	ldi	r18, 0x00	; 0
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	a9 01       	movw	r20, r18
     3ba:	66 e9       	ldi	r22, 0x96	; 150
     3bc:	78 e9       	ldi	r23, 0x98	; 152
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <async>
     3c6:	33 c0       	rjmp	.+102    	; 0x42e <__DATA_REGION_LENGTH__+0x2e>
			}else{
				self->NorthGreen = true;
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	81 8b       	std	Z+17, r24	; 0x11
				self->SouthGreen = false;
     3cc:	13 8a       	std	Z+19, r1	; 0x13
				self->CarDirection = NORTH;
     3ce:	82 8b       	std	Z+18, r24	; 0x12
				self->CarsSentCurrent = 0;
     3d0:	17 86       	std	Z+15, r1	; 0x0f
     3d2:	16 86       	std	Z+14, r1	; 0x0e
				SENDSIGNAL;
     3d4:	04 81       	ldd	r16, Z+4	; 0x04
     3d6:	15 81       	ldd	r17, Z+5	; 0x05
     3d8:	0f 2e       	mov	r0, r31
     3da:	f9 e0       	ldi	r31, 0x09	; 9
     3dc:	cf 2e       	mov	r12, r31
     3de:	d1 2c       	mov	r13, r1
     3e0:	f0 2d       	mov	r31, r0
     3e2:	0f 2e       	mov	r0, r31
     3e4:	f3 e7       	ldi	r31, 0x73	; 115
     3e6:	ef 2e       	mov	r14, r31
     3e8:	f1 e1       	ldi	r31, 0x11	; 17
     3ea:	ff 2e       	mov	r15, r31
     3ec:	f0 2d       	mov	r31, r0
     3ee:	20 e0       	ldi	r18, 0x00	; 0
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	a9 01       	movw	r20, r18
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	70 e0       	ldi	r23, 0x00	; 0
     3f8:	cb 01       	movw	r24, r22
     3fa:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <async>
     3fe:	17 c0       	rjmp	.+46     	; 0x42e <__DATA_REGION_LENGTH__+0x2e>
			}
		}else{
			self->NorthGreen = false;
     400:	11 8a       	std	Z+17, r1	; 0x11
			self->SouthGreen = false;
     402:	13 8a       	std	Z+19, r1	; 0x13
			SENDSIGNAL;
     404:	04 81       	ldd	r16, Z+4	; 0x04
     406:	15 81       	ldd	r17, Z+5	; 0x05
     408:	0f 2e       	mov	r0, r31
     40a:	fa e0       	ldi	r31, 0x0A	; 10
     40c:	cf 2e       	mov	r12, r31
     40e:	d1 2c       	mov	r13, r1
     410:	f0 2d       	mov	r31, r0
     412:	0f 2e       	mov	r0, r31
     414:	f3 e7       	ldi	r31, 0x73	; 115
     416:	ef 2e       	mov	r14, r31
     418:	f1 e1       	ldi	r31, 0x11	; 17
     41a:	ff 2e       	mov	r15, r31
     41c:	f0 2d       	mov	r31, r0
     41e:	20 e0       	ldi	r18, 0x00	; 0
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	a9 01       	movw	r20, r18
     424:	60 e0       	ldi	r22, 0x00	; 0
     426:	70 e0       	ldi	r23, 0x00	; 0
     428:	cb 01       	movw	r24, r22
     42a:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <async>
		}
	}
	return 0;
}
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	1f 91       	pop	r17
     434:	0f 91       	pop	r16
     436:	ff 90       	pop	r15
     438:	ef 90       	pop	r14
     43a:	df 90       	pop	r13
     43c:	cf 90       	pop	r12
     43e:	08 95       	ret

00000440 <convertBack>:

int convertBack(Bridge *self, int side){
     440:	cf 92       	push	r12
     442:	df 92       	push	r13
     444:	ef 92       	push	r14
     446:	ff 92       	push	r15
     448:	0f 93       	push	r16
     44a:	1f 93       	push	r17
     44c:	fc 01       	movw	r30, r24
	int oppositeQueu;
	if(side == NORTH){
     44e:	61 30       	cpi	r22, 0x01	; 1
     450:	71 05       	cpc	r23, r1
     452:	19 f4       	brne	.+6      	; 0x45a <convertBack+0x1a>
		oppositeQueu = self->SouthQueueSize;
     454:	22 85       	ldd	r18, Z+10	; 0x0a
     456:	33 85       	ldd	r19, Z+11	; 0x0b
     458:	02 c0       	rjmp	.+4      	; 0x45e <convertBack+0x1e>
	}else{
		oppositeQueu = self->NorthQueueSize;
     45a:	20 85       	ldd	r18, Z+8	; 0x08
     45c:	31 85       	ldd	r19, Z+9	; 0x09
	}
	if(self->CarsSentCurrent > MAX_CARS_BEFORE_SWITCH && oppositeQueu){
     45e:	86 85       	ldd	r24, Z+14	; 0x0e
     460:	97 85       	ldd	r25, Z+15	; 0x0f
     462:	06 97       	sbiw	r24, 0x06	; 6
     464:	bc f1       	brlt	.+110    	; 0x4d4 <convertBack+0x94>
     466:	23 2b       	or	r18, r19
     468:	a9 f1       	breq	.+106    	; 0x4d4 <convertBack+0x94>
		if(self->CarsOnBridge != 0){
     46a:	84 85       	ldd	r24, Z+12	; 0x0c
     46c:	95 85       	ldd	r25, Z+13	; 0x0d
     46e:	89 2b       	or	r24, r25
     470:	a1 f0       	breq	.+40     	; 0x49a <convertBack+0x5a>
			self->forceRED = true;
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	80 8b       	std	Z+16, r24	; 0x10
			AFTER(MSEC(1250), self, convertBack, side);
     476:	6b 01       	movw	r12, r22
     478:	0f 2e       	mov	r0, r31
     47a:	f0 e2       	ldi	r31, 0x20	; 32
     47c:	ef 2e       	mov	r14, r31
     47e:	f2 e0       	ldi	r31, 0x02	; 2
     480:	ff 2e       	mov	r15, r31
     482:	f0 2d       	mov	r31, r0
     484:	8f 01       	movw	r16, r30
     486:	20 e0       	ldi	r18, 0x00	; 0
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	a9 01       	movw	r20, r18
     48c:	66 e9       	ldi	r22, 0x96	; 150
     48e:	78 e9       	ldi	r23, 0x98	; 152
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <async>
     498:	2d c0       	rjmp	.+90     	; 0x4f4 <convertBack+0xb4>
		}else{
			self->forceRED = false;
     49a:	10 8a       	std	Z+16, r1	; 0x10
			self->CarsSentCurrent = 0;
     49c:	17 86       	std	Z+15, r1	; 0x0f
     49e:	16 86       	std	Z+14, r1	; 0x0e
			bool sideNew = !side;
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	67 2b       	or	r22, r23
     4a4:	09 f0       	breq	.+2      	; 0x4a8 <convertBack+0x68>
     4a6:	80 e0       	ldi	r24, 0x00	; 0
			self->CarDirection = !self->CarDirection;
     4a8:	22 89       	ldd	r18, Z+18	; 0x12
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	92 27       	eor	r25, r18
     4ae:	92 8b       	std	Z+18, r25	; 0x12
			if(1){
				ASYNC(self, normalSWITCH, sideNew);
     4b0:	c8 2e       	mov	r12, r24
     4b2:	d1 2c       	mov	r13, r1
     4b4:	0f 2e       	mov	r0, r31
     4b6:	ff ef       	ldi	r31, 0xFF	; 255
     4b8:	ef 2e       	mov	r14, r31
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
     4bc:	ff 2e       	mov	r15, r31
     4be:	f0 2d       	mov	r31, r0
     4c0:	8f 01       	movw	r16, r30
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	a9 01       	movw	r20, r18
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	cb 01       	movw	r24, r22
     4ce:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <async>
     4d2:	10 c0       	rjmp	.+32     	; 0x4f4 <convertBack+0xb4>
			}
		}
	}else{
		ASYNC(self, normalSWITCH, side);
     4d4:	6b 01       	movw	r12, r22
     4d6:	0f 2e       	mov	r0, r31
     4d8:	ff ef       	ldi	r31, 0xFF	; 255
     4da:	ef 2e       	mov	r14, r31
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	ff 2e       	mov	r15, r31
     4e0:	f0 2d       	mov	r31, r0
     4e2:	8f 01       	movw	r16, r30
     4e4:	20 e0       	ldi	r18, 0x00	; 0
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	a9 01       	movw	r20, r18
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	cb 01       	movw	r24, r22
     4f0:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <async>
	}
	
	return 0;
}
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	1f 91       	pop	r17
     4fa:	0f 91       	pop	r16
     4fc:	ff 90       	pop	r15
     4fe:	ef 90       	pop	r14
     500:	df 90       	pop	r13
     502:	cf 90       	pop	r12
     504:	08 95       	ret

00000506 <deQueue>:

int deQueue(Bridge *self, int side){
     506:	cf 92       	push	r12
     508:	df 92       	push	r13
     50a:	ef 92       	push	r14
     50c:	ff 92       	push	r15
     50e:	0f 93       	push	r16
     510:	1f 93       	push	r17
     512:	cf 93       	push	r28
     514:	df 93       	push	r29
     516:	ec 01       	movw	r28, r24
	if(side == NORTH){
     518:	61 30       	cpi	r22, 0x01	; 1
     51a:	71 05       	cpc	r23, r1
     51c:	09 f0       	breq	.+2      	; 0x520 <deQueue+0x1a>
     51e:	3f c0       	rjmp	.+126    	; 0x59e <deQueue+0x98>
		self->NorthQueueSize--;
     520:	88 85       	ldd	r24, Y+8	; 0x08
     522:	99 85       	ldd	r25, Y+9	; 0x09
     524:	01 97       	sbiw	r24, 0x01	; 1
     526:	99 87       	std	Y+9, r25	; 0x09
     528:	88 87       	std	Y+8, r24	; 0x08
		self->CarsSentCurrent++;
     52a:	8e 85       	ldd	r24, Y+14	; 0x0e
     52c:	9f 85       	ldd	r25, Y+15	; 0x0f
     52e:	01 96       	adiw	r24, 0x01	; 1
     530:	9f 87       	std	Y+15, r25	; 0x0f
     532:	8e 87       	std	Y+14, r24	; 0x0e
		self->CarsOnBridge++;
     534:	8c 85       	ldd	r24, Y+12	; 0x0c
     536:	9d 85       	ldd	r25, Y+13	; 0x0d
     538:	01 96       	adiw	r24, 0x01	; 1
     53a:	9d 87       	std	Y+13, r25	; 0x0d
     53c:	8c 87       	std	Y+12, r24	; 0x0c
		AFTER(MSEC(1000), self, convertBack, side);
     53e:	6b 01       	movw	r12, r22
     540:	0f 2e       	mov	r0, r31
     542:	f0 e2       	ldi	r31, 0x20	; 32
     544:	ef 2e       	mov	r14, r31
     546:	f2 e0       	ldi	r31, 0x02	; 2
     548:	ff 2e       	mov	r15, r31
     54a:	f0 2d       	mov	r31, r0
     54c:	8e 01       	movw	r16, r28
     54e:	20 e0       	ldi	r18, 0x00	; 0
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	a9 01       	movw	r20, r18
     554:	62 e1       	ldi	r22, 0x12	; 18
     556:	7a e7       	ldi	r23, 0x7A	; 122
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <async>
		PRINT(self->NorthQueueSize, self->lcd->NorthScreenPos);
     560:	98 85       	ldd	r25, Y+8	; 0x08
     562:	0e 81       	ldd	r16, Y+6	; 0x06
     564:	1f 81       	ldd	r17, Y+7	; 0x07
     566:	f8 01       	movw	r30, r16
     568:	d4 80       	ldd	r13, Z+4	; 0x04
     56a:	8d 2d       	mov	r24, r13
     56c:	87 95       	ror	r24
     56e:	88 27       	eor	r24, r24
     570:	87 95       	ror	r24
     572:	9f 77       	andi	r25, 0x7F	; 127
     574:	c9 2e       	mov	r12, r25
     576:	c8 2a       	or	r12, r24
     578:	8d 2d       	mov	r24, r13
     57a:	86 95       	lsr	r24
     57c:	83 70       	andi	r24, 0x03	; 3
     57e:	d8 2e       	mov	r13, r24
     580:	0f 2e       	mov	r0, r31
     582:	f2 e9       	ldi	r31, 0x92	; 146
     584:	ef 2e       	mov	r14, r31
     586:	f4 e0       	ldi	r31, 0x04	; 4
     588:	ff 2e       	mov	r15, r31
     58a:	f0 2d       	mov	r31, r0
     58c:	20 e0       	ldi	r18, 0x00	; 0
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	a9 01       	movw	r20, r18
     592:	60 e0       	ldi	r22, 0x00	; 0
     594:	70 e0       	ldi	r23, 0x00	; 0
     596:	cb 01       	movw	r24, r22
     598:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <async>
     59c:	41 c0       	rjmp	.+130    	; 0x620 <deQueue+0x11a>
	}else if(side == SOUTH){
     59e:	61 15       	cp	r22, r1
     5a0:	71 05       	cpc	r23, r1
     5a2:	f1 f5       	brne	.+124    	; 0x620 <deQueue+0x11a>
		self->SouthQueueSize--;
     5a4:	8a 85       	ldd	r24, Y+10	; 0x0a
     5a6:	9b 85       	ldd	r25, Y+11	; 0x0b
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	9b 87       	std	Y+11, r25	; 0x0b
     5ac:	8a 87       	std	Y+10, r24	; 0x0a
		self->CarsSentCurrent++;
     5ae:	8e 85       	ldd	r24, Y+14	; 0x0e
     5b0:	9f 85       	ldd	r25, Y+15	; 0x0f
     5b2:	01 96       	adiw	r24, 0x01	; 1
     5b4:	9f 87       	std	Y+15, r25	; 0x0f
     5b6:	8e 87       	std	Y+14, r24	; 0x0e
		self->CarsOnBridge++;
     5b8:	8c 85       	ldd	r24, Y+12	; 0x0c
     5ba:	9d 85       	ldd	r25, Y+13	; 0x0d
     5bc:	01 96       	adiw	r24, 0x01	; 1
     5be:	9d 87       	std	Y+13, r25	; 0x0d
     5c0:	8c 87       	std	Y+12, r24	; 0x0c
		AFTER(MSEC(1000), self, convertBack, side);
     5c2:	6b 01       	movw	r12, r22
     5c4:	0f 2e       	mov	r0, r31
     5c6:	f0 e2       	ldi	r31, 0x20	; 32
     5c8:	ef 2e       	mov	r14, r31
     5ca:	f2 e0       	ldi	r31, 0x02	; 2
     5cc:	ff 2e       	mov	r15, r31
     5ce:	f0 2d       	mov	r31, r0
     5d0:	8e 01       	movw	r16, r28
     5d2:	20 e0       	ldi	r18, 0x00	; 0
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	a9 01       	movw	r20, r18
     5d8:	62 e1       	ldi	r22, 0x12	; 18
     5da:	7a e7       	ldi	r23, 0x7A	; 122
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <async>
		PRINT(self->SouthQueueSize, self->lcd->SouthScreenPos);
     5e4:	9a 85       	ldd	r25, Y+10	; 0x0a
     5e6:	0e 81       	ldd	r16, Y+6	; 0x06
     5e8:	1f 81       	ldd	r17, Y+7	; 0x07
     5ea:	f8 01       	movw	r30, r16
     5ec:	d6 80       	ldd	r13, Z+6	; 0x06
     5ee:	8d 2d       	mov	r24, r13
     5f0:	87 95       	ror	r24
     5f2:	88 27       	eor	r24, r24
     5f4:	87 95       	ror	r24
     5f6:	9f 77       	andi	r25, 0x7F	; 127
     5f8:	c9 2e       	mov	r12, r25
     5fa:	c8 2a       	or	r12, r24
     5fc:	8d 2d       	mov	r24, r13
     5fe:	86 95       	lsr	r24
     600:	83 70       	andi	r24, 0x03	; 3
     602:	d8 2e       	mov	r13, r24
     604:	0f 2e       	mov	r0, r31
     606:	f2 e9       	ldi	r31, 0x92	; 146
     608:	ef 2e       	mov	r14, r31
     60a:	f4 e0       	ldi	r31, 0x04	; 4
     60c:	ff 2e       	mov	r15, r31
     60e:	f0 2d       	mov	r31, r0
     610:	20 e0       	ldi	r18, 0x00	; 0
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	a9 01       	movw	r20, r18
     616:	60 e0       	ldi	r22, 0x00	; 0
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	cb 01       	movw	r24, r22
     61c:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <async>
	}
	PRINT(self->CarsOnBridge, self->lcd->CarsOnBridgePos);
     620:	9c 85       	ldd	r25, Y+12	; 0x0c
     622:	0e 81       	ldd	r16, Y+6	; 0x06
     624:	1f 81       	ldd	r17, Y+7	; 0x07
     626:	f8 01       	movw	r30, r16
     628:	d0 84       	ldd	r13, Z+8	; 0x08
     62a:	8d 2d       	mov	r24, r13
     62c:	87 95       	ror	r24
     62e:	88 27       	eor	r24, r24
     630:	87 95       	ror	r24
     632:	9f 77       	andi	r25, 0x7F	; 127
     634:	c9 2e       	mov	r12, r25
     636:	c8 2a       	or	r12, r24
     638:	8d 2d       	mov	r24, r13
     63a:	86 95       	lsr	r24
     63c:	83 70       	andi	r24, 0x03	; 3
     63e:	d8 2e       	mov	r13, r24
     640:	0f 2e       	mov	r0, r31
     642:	f2 e9       	ldi	r31, 0x92	; 146
     644:	ef 2e       	mov	r14, r31
     646:	f4 e0       	ldi	r31, 0x04	; 4
     648:	ff 2e       	mov	r15, r31
     64a:	f0 2d       	mov	r31, r0
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	a9 01       	movw	r20, r18
     652:	60 e0       	ldi	r22, 0x00	; 0
     654:	70 e0       	ldi	r23, 0x00	; 0
     656:	cb 01       	movw	r24, r22
     658:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <async>
	AFTER(MSEC(5000), self, removeCarBridge, 0);
     65c:	c1 2c       	mov	r12, r1
     65e:	d1 2c       	mov	r13, r1
     660:	0f 2e       	mov	r0, r31
     662:	fb e4       	ldi	r31, 0x4B	; 75
     664:	ef 2e       	mov	r14, r31
     666:	f3 e0       	ldi	r31, 0x03	; 3
     668:	ff 2e       	mov	r15, r31
     66a:	f0 2d       	mov	r31, r0
     66c:	8e 01       	movw	r16, r28
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	a9 01       	movw	r20, r18
     674:	6a e5       	ldi	r22, 0x5A	; 90
     676:	72 e6       	ldi	r23, 0x62	; 98
     678:	82 e0       	ldi	r24, 0x02	; 2
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <async>
	return 0;
}
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	1f 91       	pop	r17
     68a:	0f 91       	pop	r16
     68c:	ff 90       	pop	r15
     68e:	ef 90       	pop	r14
     690:	df 90       	pop	r13
     692:	cf 90       	pop	r12
     694:	08 95       	ret

00000696 <removeCarBridge>:

int removeCarBridge(Bridge *self, __attribute__((unused)) int unUsed){
     696:	cf 92       	push	r12
     698:	df 92       	push	r13
     69a:	ef 92       	push	r14
     69c:	ff 92       	push	r15
     69e:	0f 93       	push	r16
     6a0:	1f 93       	push	r17
     6a2:	fc 01       	movw	r30, r24
	self->CarsOnBridge--;
     6a4:	24 85       	ldd	r18, Z+12	; 0x0c
     6a6:	35 85       	ldd	r19, Z+13	; 0x0d
     6a8:	21 50       	subi	r18, 0x01	; 1
     6aa:	31 09       	sbc	r19, r1
     6ac:	35 87       	std	Z+13, r19	; 0x0d
     6ae:	24 87       	std	Z+12, r18	; 0x0c
	PRINT(self->CarsOnBridge, self->lcd->CarsOnBridgePos);
     6b0:	06 81       	ldd	r16, Z+6	; 0x06
     6b2:	17 81       	ldd	r17, Z+7	; 0x07
     6b4:	f8 01       	movw	r30, r16
     6b6:	d0 84       	ldd	r13, Z+8	; 0x08
     6b8:	cd 2c       	mov	r12, r13
     6ba:	c7 94       	ror	r12
     6bc:	cc 24       	eor	r12, r12
     6be:	c7 94       	ror	r12
     6c0:	2f 77       	andi	r18, 0x7F	; 127
     6c2:	c2 2a       	or	r12, r18
     6c4:	8d 2d       	mov	r24, r13
     6c6:	86 95       	lsr	r24
     6c8:	83 70       	andi	r24, 0x03	; 3
     6ca:	d8 2e       	mov	r13, r24
     6cc:	0f 2e       	mov	r0, r31
     6ce:	f2 e9       	ldi	r31, 0x92	; 146
     6d0:	ef 2e       	mov	r14, r31
     6d2:	f4 e0       	ldi	r31, 0x04	; 4
     6d4:	ff 2e       	mov	r15, r31
     6d6:	f0 2d       	mov	r31, r0
     6d8:	20 e0       	ldi	r18, 0x00	; 0
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	a9 01       	movw	r20, r18
     6de:	60 e0       	ldi	r22, 0x00	; 0
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	cb 01       	movw	r24, r22
     6e4:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <async>
	return 0;
}
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	1f 91       	pop	r17
     6ee:	0f 91       	pop	r16
     6f0:	ff 90       	pop	r15
     6f2:	ef 90       	pop	r14
     6f4:	df 90       	pop	r13
     6f6:	cf 90       	pop	r12
     6f8:	08 95       	ret

000006fa <handleInput>:

int handleInput(Bridge *self, int data){
     6fa:	cf 92       	push	r12
     6fc:	df 92       	push	r13
     6fe:	ef 92       	push	r14
     700:	ff 92       	push	r15
     702:	0f 93       	push	r16
     704:	1f 93       	push	r17
	switch(data){
     706:	62 30       	cpi	r22, 0x02	; 2
     708:	71 05       	cpc	r23, r1
     70a:	f9 f0       	breq	.+62     	; 0x74a <handleInput+0x50>
     70c:	24 f4       	brge	.+8      	; 0x716 <handleInput+0x1c>
     70e:	61 30       	cpi	r22, 0x01	; 1
     710:	71 05       	cpc	r23, r1
     712:	41 f0       	breq	.+16     	; 0x724 <handleInput+0x2a>
     714:	50 c0       	rjmp	.+160    	; 0x7b6 <handleInput+0xbc>
     716:	64 30       	cpi	r22, 0x04	; 4
     718:	71 05       	cpc	r23, r1
     71a:	51 f1       	breq	.+84     	; 0x770 <handleInput+0x76>
     71c:	68 30       	cpi	r22, 0x08	; 8
     71e:	71 05       	cpc	r23, r1
     720:	c9 f1       	breq	.+114    	; 0x794 <handleInput+0x9a>
     722:	49 c0       	rjmp	.+146    	; 0x7b6 <handleInput+0xbc>
		case NorthEnQueue:
			ASYNC(self, enQueue, NORTH);
     724:	cc 24       	eor	r12, r12
     726:	c3 94       	inc	r12
     728:	d1 2c       	mov	r13, r1
     72a:	0f 2e       	mov	r0, r31
     72c:	fd e4       	ldi	r31, 0x4D	; 77
     72e:	ef 2e       	mov	r14, r31
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	ff 2e       	mov	r15, r31
     734:	f0 2d       	mov	r31, r0
     736:	8c 01       	movw	r16, r24
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	a9 01       	movw	r20, r18
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	70 e0       	ldi	r23, 0x00	; 0
     742:	cb 01       	movw	r24, r22
     744:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <async>
			break;
     748:	36 c0       	rjmp	.+108    	; 0x7b6 <handleInput+0xbc>
		case NorthDeQueue:
			ASYNC(self, deQueue, NORTH);
     74a:	cc 24       	eor	r12, r12
     74c:	c3 94       	inc	r12
     74e:	d1 2c       	mov	r13, r1
     750:	0f 2e       	mov	r0, r31
     752:	f3 e8       	ldi	r31, 0x83	; 131
     754:	ef 2e       	mov	r14, r31
     756:	f2 e0       	ldi	r31, 0x02	; 2
     758:	ff 2e       	mov	r15, r31
     75a:	f0 2d       	mov	r31, r0
     75c:	8c 01       	movw	r16, r24
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	a9 01       	movw	r20, r18
     764:	60 e0       	ldi	r22, 0x00	; 0
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	cb 01       	movw	r24, r22
     76a:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <async>
			break;
     76e:	23 c0       	rjmp	.+70     	; 0x7b6 <handleInput+0xbc>
		case SouthEnQueue:
			ASYNC(self, enQueue, SOUTH);
     770:	c1 2c       	mov	r12, r1
     772:	d1 2c       	mov	r13, r1
     774:	0f 2e       	mov	r0, r31
     776:	fd e4       	ldi	r31, 0x4D	; 77
     778:	ef 2e       	mov	r14, r31
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	ff 2e       	mov	r15, r31
     77e:	f0 2d       	mov	r31, r0
     780:	8c 01       	movw	r16, r24
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	a9 01       	movw	r20, r18
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	cb 01       	movw	r24, r22
     78e:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <async>
			break;
     792:	11 c0       	rjmp	.+34     	; 0x7b6 <handleInput+0xbc>
		case SouthDeQueue:
			ASYNC(self, deQueue, SOUTH);
     794:	c1 2c       	mov	r12, r1
     796:	d1 2c       	mov	r13, r1
     798:	0f 2e       	mov	r0, r31
     79a:	f3 e8       	ldi	r31, 0x83	; 131
     79c:	ef 2e       	mov	r14, r31
     79e:	f2 e0       	ldi	r31, 0x02	; 2
     7a0:	ff 2e       	mov	r15, r31
     7a2:	f0 2d       	mov	r31, r0
     7a4:	8c 01       	movw	r16, r24
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	a9 01       	movw	r20, r18
     7ac:	60 e0       	ldi	r22, 0x00	; 0
     7ae:	70 e0       	ldi	r23, 0x00	; 0
     7b0:	cb 01       	movw	r24, r22
     7b2:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <async>
			break;
		default: //Help a man has fallen into the river in LEGO City
			break;
	}
	return 0;
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	1f 91       	pop	r17
     7bc:	0f 91       	pop	r16
     7be:	ff 90       	pop	r15
     7c0:	ef 90       	pop	r14
     7c2:	df 90       	pop	r13
     7c4:	cf 90       	pop	r12
     7c6:	08 95       	ret

000007c8 <init>:
#define BAUD 9600
#define MYUBRR (FOSC / (16UL * BAUD) - 1)

void init(){
	//LCD
	LCDCRA = (0x1 << LCDEN)   | (0x1 << LCDAB);
     7c8:	80 ec       	ldi	r24, 0xC0	; 192
     7ca:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
	LCDCRB = (0x1 << LCDCS)   |
     7ce:	87 eb       	ldi	r24, 0xB7	; 183
     7d0:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	(0x1 << LCDMUX1) | (0x1 << LCDMUX0) |
	(0x1 << LCDPM2)  | (0x1 << LCDPM1)  | (0x1 << LCDPM0);
	LCDFRR = (0x1 << LCDCD2)  | (0x1 << LCDCD1)  | (0x1 << LCDCD0);
     7d4:	87 e0       	ldi	r24, 0x07	; 7
     7d6:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
	LCDCCR = (0x1 << LCDCC3)  | (0x1 << LCDCC2)  | (0x1 << LCDCC1)  | (0x1 << LCDCC0);
     7da:	8f e0       	ldi	r24, 0x0F	; 15
     7dc:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	
	//USART
	UBRR0H = (uint8_t)(MYUBRR<<8);
     7e0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fc0c5>
	UBRR0L = (uint8_t)(MYUBRR);
     7e4:	83 e3       	ldi	r24, 0x33	; 51
     7e6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fc0c4>

	
	UCSR0B = (1<<RXEN0)  | (1<<TXEN0)  | (1<<RXCIE0);
     7ea:	88 e9       	ldi	r24, 0x98	; 152
     7ec:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fc0c1>

	UCSR0C = (0<<UCSZ01) | (3<<UCSZ00);
     7f0:	86 e0       	ldi	r24, 0x06	; 6
     7f2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7fc0c2>
     7f6:	08 95       	ret

000007f8 <input>:
#include "InteruptHandler.h"

int input(InterruptHandler *self, int __attribute__((unused)) unUsed) {
     7f8:	cf 92       	push	r12
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
	ASYNC(self->bridge, handleInput, UDR0);
     804:	c0 90 c6 00 	lds	r12, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
     808:	fc 01       	movw	r30, r24
     80a:	04 81       	ldd	r16, Z+4	; 0x04
     80c:	15 81       	ldd	r17, Z+5	; 0x05
     80e:	d1 2c       	mov	r13, r1
     810:	0f 2e       	mov	r0, r31
     812:	fd e7       	ldi	r31, 0x7D	; 125
     814:	ef 2e       	mov	r14, r31
     816:	f3 e0       	ldi	r31, 0x03	; 3
     818:	ff 2e       	mov	r15, r31
     81a:	f0 2d       	mov	r31, r0
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	a9 01       	movw	r20, r18
     822:	60 e0       	ldi	r22, 0x00	; 0
     824:	70 e0       	ldi	r23, 0x00	; 0
     826:	cb 01       	movw	r24, r22
     828:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <async>
	return 0;
}
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	1f 91       	pop	r17
     832:	0f 91       	pop	r16
     834:	ff 90       	pop	r15
     836:	ef 90       	pop	r14
     838:	df 90       	pop	r13
     83a:	cf 90       	pop	r12
     83c:	08 95       	ret

0000083e <writeChar>:
	LCDDR6 = data2;
}

void writeChar(char ch, int pos){
	/* Returns if given input is not possible to print */
	if(pos < 0 || pos > 5 || ch < 48 || ch > 57){
     83e:	66 30       	cpi	r22, 0x06	; 6
     840:	71 05       	cpc	r23, r1
     842:	08 f0       	brcs	.+2      	; 0x846 <writeChar+0x8>
     844:	6e c0       	rjmp	.+220    	; 0x922 <writeChar+0xe4>
     846:	80 33       	cpi	r24, 0x30	; 48
     848:	08 f4       	brcc	.+2      	; 0x84c <writeChar+0xe>
     84a:	6b c0       	rjmp	.+214    	; 0x922 <writeChar+0xe4>
     84c:	8a 33       	cpi	r24, 0x3A	; 58
     84e:	08 f0       	brcs	.+2      	; 0x852 <writeChar+0x14>
     850:	68 c0       	rjmp	.+208    	; 0x922 <writeChar+0xe4>
		return;
	}
	volatile uint8_t *lcd_base = &LCDDR0 + offsetPos[pos];
     852:	fb 01       	movw	r30, r22
     854:	ee 5e       	subi	r30, 0xEE	; 238
     856:	fe 4f       	sbci	r31, 0xFE	; 254
     858:	e0 81       	ld	r30, Z
     85a:	f0 e0       	ldi	r31, 0x00	; 0
     85c:	e4 51       	subi	r30, 0x14	; 20
     85e:	ff 4f       	sbci	r31, 0xFF	; 255
	
	int number = (int)ch - 48;
     860:	a8 2f       	mov	r26, r24
     862:	b0 e0       	ldi	r27, 0x00	; 0
     864:	d0 97       	sbiw	r26, 0x30	; 48
	int shift = 0;
	/*Clears the part of the display we want to write onto */
	if (pos % 2 == 1){
     866:	61 70       	andi	r22, 0x01	; 1
     868:	70 78       	andi	r23, 0x80	; 128
     86a:	77 23       	and	r23, r23
     86c:	34 f4       	brge	.+12     	; 0x87a <writeChar+0x3c>
     86e:	61 50       	subi	r22, 0x01	; 1
     870:	71 09       	sbc	r23, r1
     872:	6e 6f       	ori	r22, 0xFE	; 254
     874:	7f 6f       	ori	r23, 0xFF	; 255
     876:	6f 5f       	subi	r22, 0xFF	; 255
     878:	7f 4f       	sbci	r23, 0xFF	; 255
     87a:	61 30       	cpi	r22, 0x01	; 1
     87c:	71 05       	cpc	r23, r1
     87e:	71 f4       	brne	.+28     	; 0x89c <writeChar+0x5e>
		shift = 4;
		lcd_base[0]  = lcd_base[0]  & 0x0F;
     880:	80 81       	ld	r24, Z
     882:	8f 70       	andi	r24, 0x0F	; 15
     884:	80 83       	st	Z, r24
		lcd_base[5]  = lcd_base[5]  & 0x0F;
     886:	85 81       	ldd	r24, Z+5	; 0x05
     888:	8f 70       	andi	r24, 0x0F	; 15
     88a:	85 83       	std	Z+5, r24	; 0x05
		lcd_base[10] = lcd_base[10] & 0x0F;
     88c:	82 85       	ldd	r24, Z+10	; 0x0a
     88e:	8f 70       	andi	r24, 0x0F	; 15
     890:	82 87       	std	Z+10, r24	; 0x0a
		lcd_base[15] = lcd_base[15] & 0x0F;
     892:	87 85       	ldd	r24, Z+15	; 0x0f
     894:	8f 70       	andi	r24, 0x0F	; 15
     896:	87 87       	std	Z+15, r24	; 0x0f
	
	int number = (int)ch - 48;
	int shift = 0;
	/*Clears the part of the display we want to write onto */
	if (pos % 2 == 1){
		shift = 4;
     898:	24 e0       	ldi	r18, 0x04	; 4
     89a:	0d c0       	rjmp	.+26     	; 0x8b6 <writeChar+0x78>
		lcd_base[0]  = lcd_base[0]  & 0x0F;
		lcd_base[5]  = lcd_base[5]  & 0x0F;
		lcd_base[10] = lcd_base[10] & 0x0F;
		lcd_base[15] = lcd_base[15] & 0x0F;
		}else{
		lcd_base[0]  = lcd_base[0]  & 0xF0;
     89c:	80 81       	ld	r24, Z
     89e:	80 7f       	andi	r24, 0xF0	; 240
     8a0:	80 83       	st	Z, r24
		lcd_base[5]  = lcd_base[5]  & 0xF0;
     8a2:	85 81       	ldd	r24, Z+5	; 0x05
     8a4:	80 7f       	andi	r24, 0xF0	; 240
     8a6:	85 83       	std	Z+5, r24	; 0x05
		lcd_base[10] = lcd_base[10] & 0xF0;
     8a8:	82 85       	ldd	r24, Z+10	; 0x0a
     8aa:	80 7f       	andi	r24, 0xF0	; 240
     8ac:	82 87       	std	Z+10, r24	; 0x0a
		lcd_base[15] = lcd_base[15] & 0xF0;
     8ae:	87 85       	ldd	r24, Z+15	; 0x0f
     8b0:	80 7f       	andi	r24, 0xF0	; 240
     8b2:	87 87       	std	Z+15, r24	; 0x0f
		return;
	}
	volatile uint8_t *lcd_base = &LCDDR0 + offsetPos[pos];
	
	int number = (int)ch - 48;
	int shift = 0;
     8b4:	20 e0       	ldi	r18, 0x00	; 0
		lcd_base[5]  = lcd_base[5]  & 0xF0;
		lcd_base[10] = lcd_base[10] & 0xF0;
		lcd_base[15] = lcd_base[15] & 0xF0;
	}
	/*Writes to the display*/
	lcd_base[0]  = charCodes[number][0]<<shift | lcd_base[0] ;
     8b6:	aa 0f       	add	r26, r26
     8b8:	bb 1f       	adc	r27, r27
     8ba:	aa 0f       	add	r26, r26
     8bc:	bb 1f       	adc	r27, r27
     8be:	a6 5e       	subi	r26, 0xE6	; 230
     8c0:	be 4f       	sbci	r27, 0xFE	; 254
     8c2:	8c 91       	ld	r24, X
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	02 2e       	mov	r0, r18
     8c8:	02 c0       	rjmp	.+4      	; 0x8ce <writeChar+0x90>
     8ca:	88 0f       	add	r24, r24
     8cc:	99 1f       	adc	r25, r25
     8ce:	0a 94       	dec	r0
     8d0:	e2 f7       	brpl	.-8      	; 0x8ca <writeChar+0x8c>
     8d2:	90 81       	ld	r25, Z
     8d4:	89 2b       	or	r24, r25
     8d6:	80 83       	st	Z, r24
	lcd_base[5]  = charCodes[number][1]<<shift | lcd_base[5] ;
     8d8:	11 96       	adiw	r26, 0x01	; 1
     8da:	8c 91       	ld	r24, X
     8dc:	11 97       	sbiw	r26, 0x01	; 1
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	02 2e       	mov	r0, r18
     8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <writeChar+0xaa>
     8e4:	88 0f       	add	r24, r24
     8e6:	99 1f       	adc	r25, r25
     8e8:	0a 94       	dec	r0
     8ea:	e2 f7       	brpl	.-8      	; 0x8e4 <writeChar+0xa6>
     8ec:	95 81       	ldd	r25, Z+5	; 0x05
     8ee:	89 2b       	or	r24, r25
     8f0:	85 83       	std	Z+5, r24	; 0x05
	lcd_base[10] = charCodes[number][2]<<shift | lcd_base[10];
     8f2:	12 96       	adiw	r26, 0x02	; 2
     8f4:	8c 91       	ld	r24, X
     8f6:	12 97       	sbiw	r26, 0x02	; 2
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	02 2e       	mov	r0, r18
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <writeChar+0xc4>
     8fe:	88 0f       	add	r24, r24
     900:	99 1f       	adc	r25, r25
     902:	0a 94       	dec	r0
     904:	e2 f7       	brpl	.-8      	; 0x8fe <writeChar+0xc0>
     906:	92 85       	ldd	r25, Z+10	; 0x0a
     908:	89 2b       	or	r24, r25
     90a:	82 87       	std	Z+10, r24	; 0x0a
	lcd_base[15] = charCodes[number][3]<<shift | lcd_base[15];
     90c:	13 96       	adiw	r26, 0x03	; 3
     90e:	8c 91       	ld	r24, X
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	02 c0       	rjmp	.+4      	; 0x918 <writeChar+0xda>
     914:	88 0f       	add	r24, r24
     916:	99 1f       	adc	r25, r25
     918:	2a 95       	dec	r18
     91a:	e2 f7       	brpl	.-8      	; 0x914 <writeChar+0xd6>
     91c:	97 85       	ldd	r25, Z+15	; 0x0f
     91e:	89 2b       	or	r24, r25
     920:	87 87       	std	Z+15, r24	; 0x0f
     922:	08 95       	ret

00000924 <printAt>:
}
	
int printAt(LCD_Driver __attribute__((unused)) *self, const int map) {
     924:	ef 92       	push	r14
     926:	ff 92       	push	r15
     928:	0f 93       	push	r16
     92a:	1f 93       	push	r17
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
	union PrintPun p = {.map = map};
	int pp;
	pp = p.args.pos;
     930:	c6 2f       	mov	r28, r22
     932:	cc 1f       	adc	r28, r28
     934:	cc 27       	eor	r28, r28
     936:	cc 1f       	adc	r28, r28
     938:	73 70       	andi	r23, 0x03	; 3
     93a:	77 0f       	add	r23, r23
     93c:	7c 2b       	or	r23, r28
     93e:	c7 2f       	mov	r28, r23
     940:	d0 e0       	ldi	r29, 0x00	; 0
	int num = p.args.num;
     942:	6f 77       	andi	r22, 0x7F	; 127
     944:	06 2f       	mov	r16, r22
     946:	10 e0       	ldi	r17, 0x00	; 0
	writeChar( (num % 100) / 10 + '0', pp);
     948:	c8 01       	movw	r24, r16
     94a:	64 e6       	ldi	r22, 0x64	; 100
     94c:	70 e0       	ldi	r23, 0x00	; 0
     94e:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__divmodhi4>
     952:	0f 2e       	mov	r0, r31
     954:	fa e0       	ldi	r31, 0x0A	; 10
     956:	ef 2e       	mov	r14, r31
     958:	f1 2c       	mov	r15, r1
     95a:	f0 2d       	mov	r31, r0
     95c:	b7 01       	movw	r22, r14
     95e:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__divmodhi4>
     962:	86 2f       	mov	r24, r22
     964:	be 01       	movw	r22, r28
     966:	80 5d       	subi	r24, 0xD0	; 208
     968:	0e 94 1f 04 	call	0x83e	; 0x83e <writeChar>
	pp++;
     96c:	21 96       	adiw	r28, 0x01	; 1
	writeChar( num % 10 + '0', pp);
     96e:	c8 01       	movw	r24, r16
     970:	b7 01       	movw	r22, r14
     972:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__divmodhi4>
     976:	be 01       	movw	r22, r28
     978:	80 5d       	subi	r24, 0xD0	; 208
     97a:	0e 94 1f 04 	call	0x83e	; 0x83e <writeChar>
	
	return 0;
}
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	1f 91       	pop	r17
     988:	0f 91       	pop	r16
     98a:	ff 90       	pop	r15
     98c:	ef 90       	pop	r14
     98e:	08 95       	ret

00000990 <main>:
#include "LCD_Driver.h"
#include "Bridge.h"
#include "Init.h"

int main(void)
{
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	cd b7       	in	r28, 0x3d	; 61
     996:	de b7       	in	r29, 0x3e	; 62
     998:	a8 97       	sbiw	r28, 0x28	; 40
     99a:	0f b6       	in	r0, 0x3f	; 63
     99c:	f8 94       	cli
     99e:	de bf       	out	0x3e, r29	; 62
     9a0:	0f be       	out	0x3f, r0	; 63
     9a2:	cd bf       	out	0x3d, r28	; 61
	init();
     9a4:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <init>
	LCD_Driver lcd = initLCD_Driver();
     9a8:	2a e0       	ldi	r18, 0x0A	; 10
     9aa:	e8 e0       	ldi	r30, 0x08	; 8
     9ac:	f1 e0       	ldi	r31, 0x01	; 1
     9ae:	ce 01       	movw	r24, r28
     9b0:	01 96       	adiw	r24, 0x01	; 1
     9b2:	dc 01       	movw	r26, r24
     9b4:	01 90       	ld	r0, Z+
     9b6:	0d 92       	st	X+, r0
     9b8:	2a 95       	dec	r18
     9ba:	e1 f7       	brne	.-8      	; 0x9b4 <main+0x24>
	USARTSender usart = initUSARTSender();
     9bc:	1c 86       	std	Y+12, r1	; 0x0c
     9be:	1b 86       	std	Y+11, r1	; 0x0b
     9c0:	1e 86       	std	Y+14, r1	; 0x0e
     9c2:	1d 86       	std	Y+13, r1	; 0x0d
	Bridge bridge = initBridge(&usart, &lcd);
     9c4:	fe 01       	movw	r30, r28
     9c6:	3f 96       	adiw	r30, 0x0f	; 15
     9c8:	24 e1       	ldi	r18, 0x14	; 20
     9ca:	df 01       	movw	r26, r30
     9cc:	1d 92       	st	X+, r1
     9ce:	2a 95       	dec	r18
     9d0:	e9 f7       	brne	.-6      	; 0x9cc <main+0x3c>
     9d2:	9e 01       	movw	r18, r28
     9d4:	25 5f       	subi	r18, 0xF5	; 245
     9d6:	3f 4f       	sbci	r19, 0xFF	; 255
     9d8:	3c 8b       	std	Y+20, r19	; 0x14
     9da:	2b 8b       	std	Y+19, r18	; 0x13
     9dc:	9e 8b       	std	Y+22, r25	; 0x16
     9de:	8d 8b       	std	Y+21, r24	; 0x15
	InterruptHandler inter = initInterruptHandler(&bridge);
     9e0:	1c a2       	std	Y+36, r1	; 0x24
     9e2:	1b a2       	std	Y+35, r1	; 0x23
     9e4:	1e a2       	std	Y+38, r1	; 0x26
     9e6:	1d a2       	std	Y+37, r1	; 0x25
     9e8:	f8 a7       	std	Y+40, r31	; 0x28
     9ea:	ef a3       	std	Y+39, r30	; 0x27
	
	INSTALL(&inter, input, IRQ_USART0_RX);
     9ec:	48 e0       	ldi	r20, 0x08	; 8
     9ee:	6c ef       	ldi	r22, 0xFC	; 252
     9f0:	73 e0       	ldi	r23, 0x03	; 3
     9f2:	82 96       	adiw	r24, 0x22	; 34
     9f4:	0e 94 41 11 	call	0x2282	; 0x2282 <install>
	
	return TINYTIMBER(NULL, NULL, NULL);
     9f8:	40 e0       	ldi	r20, 0x00	; 0
     9fa:	50 e0       	ldi	r21, 0x00	; 0
     9fc:	60 e0       	ldi	r22, 0x00	; 0
     9fe:	70 e0       	ldi	r23, 0x00	; 0
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <tinytimber>
     a08:	a8 96       	adiw	r28, 0x28	; 40
     a0a:	0f b6       	in	r0, 0x3f	; 63
     a0c:	f8 94       	cli
     a0e:	de bf       	out	0x3e, r29	; 62
     a10:	0f be       	out	0x3f, r0	; 63
     a12:	cd bf       	out	0x3d, r28	; 61
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	08 95       	ret

00000a1a <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	00 d0       	rcall	.+0      	; 0xa20 <initialize+0x6>
     a20:	00 d0       	rcall	.+0      	; 0xa22 <initialize+0x8>
     a22:	cd b7       	in	r28, 0x3d	; 61
     a24:	de b7       	in	r29, 0x3e	; 62
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	18 c0       	rjmp	.+48     	; 0xa5c <initialize+0x42>
     a2c:	ac 01       	movw	r20, r24
     a2e:	4f 5f       	subi	r20, 0xFF	; 255
     a30:	5f 4f       	sbci	r21, 0xFF	; 255
     a32:	9a 01       	movw	r18, r20
     a34:	22 95       	swap	r18
     a36:	32 95       	swap	r19
     a38:	30 7f       	andi	r19, 0xF0	; 240
     a3a:	32 27       	eor	r19, r18
     a3c:	20 7f       	andi	r18, 0xF0	; 240
     a3e:	32 27       	eor	r19, r18
     a40:	2b 5d       	subi	r18, 0xDB	; 219
     a42:	3d 4f       	sbci	r19, 0xFD	; 253
     a44:	82 95       	swap	r24
     a46:	92 95       	swap	r25
     a48:	90 7f       	andi	r25, 0xF0	; 240
     a4a:	98 27       	eor	r25, r24
     a4c:	80 7f       	andi	r24, 0xF0	; 240
     a4e:	98 27       	eor	r25, r24
     a50:	fc 01       	movw	r30, r24
     a52:	eb 5d       	subi	r30, 0xDB	; 219
     a54:	fd 4f       	sbci	r31, 0xFD	; 253
     a56:	31 83       	std	Z+1, r19	; 0x01
     a58:	20 83       	st	Z, r18
     a5a:	ca 01       	movw	r24, r20
     a5c:	8e 30       	cpi	r24, 0x0E	; 14
     a5e:	91 05       	cpc	r25, r1
     a60:	2c f3       	brlt	.-54     	; 0xa2c <initialize+0x12>
     a62:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <messages+0xe1>
     a66:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <messages+0xe0>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	15 c0       	rjmp	.+42     	; 0xa9a <initialize+0x80>
     a70:	ac 01       	movw	r20, r24
     a72:	4f 5f       	subi	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	6d e1       	ldi	r22, 0x1D	; 29
     a78:	64 9f       	mul	r22, r20
     a7a:	90 01       	movw	r18, r0
     a7c:	65 9f       	mul	r22, r21
     a7e:	30 0d       	add	r19, r0
     a80:	11 24       	eor	r1, r1
     a82:	20 59       	subi	r18, 0x90	; 144
     a84:	3e 4f       	sbci	r19, 0xFE	; 254
     a86:	68 9f       	mul	r22, r24
     a88:	f0 01       	movw	r30, r0
     a8a:	69 9f       	mul	r22, r25
     a8c:	f0 0d       	add	r31, r0
     a8e:	11 24       	eor	r1, r1
     a90:	e0 59       	subi	r30, 0x90	; 144
     a92:	fe 4f       	sbci	r31, 0xFE	; 254
     a94:	31 83       	std	Z+1, r19	; 0x01
     a96:	20 83       	st	Z, r18
     a98:	ca 01       	movw	r24, r20
     a9a:	83 30       	cpi	r24, 0x03	; 3
     a9c:	91 05       	cpc	r25, r1
     a9e:	44 f3       	brlt	.-48     	; 0xa70 <initialize+0x56>
     aa0:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <threads+0x58>
     aa4:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <threads+0x57>
     aa8:	1a 82       	std	Y+2, r1	; 0x02
     aaa:	19 82       	std	Y+1, r1	; 0x01
     aac:	32 c0       	rjmp	.+100    	; 0xb12 <initialize+0xf8>
     aae:	2d e1       	ldi	r18, 0x1D	; 29
     ab0:	49 81       	ldd	r20, Y+1	; 0x01
     ab2:	5a 81       	ldd	r21, Y+2	; 0x02
     ab4:	24 9f       	mul	r18, r20
     ab6:	c0 01       	movw	r24, r0
     ab8:	25 9f       	mul	r18, r21
     aba:	90 0d       	add	r25, r0
     abc:	11 24       	eor	r1, r1
     abe:	fc 01       	movw	r30, r24
     ac0:	ea 58       	subi	r30, 0x8A	; 138
     ac2:	fe 4f       	sbci	r31, 0xFE	; 254
     ac4:	fc 83       	std	Y+4, r31	; 0x04
     ac6:	eb 83       	std	Y+3, r30	; 0x03
     ac8:	cf 01       	movw	r24, r30
     aca:	0e 94 a4 11 	call	0x2348	; 0x2348 <setjmp>
     ace:	20 e6       	ldi	r18, 0x60	; 96
     ad0:	49 81       	ldd	r20, Y+1	; 0x01
     ad2:	5a 81       	ldd	r21, Y+2	; 0x02
     ad4:	24 9f       	mul	r18, r20
     ad6:	c0 01       	movw	r24, r0
     ad8:	25 9f       	mul	r18, r21
     ada:	90 0d       	add	r25, r0
     adc:	11 24       	eor	r1, r1
     ade:	8f 58       	subi	r24, 0x8F	; 143
     ae0:	9c 4f       	sbci	r25, 0xFC	; 252
     ae2:	eb 81       	ldd	r30, Y+3	; 0x03
     ae4:	fc 81       	ldd	r31, Y+4	; 0x04
     ae6:	91 8b       	std	Z+17, r25	; 0x11
     ae8:	80 8b       	std	Z+16, r24	; 0x10
     aea:	93 8b       	std	Z+19, r25	; 0x13
     aec:	82 8b       	std	Z+18, r24	; 0x12
     aee:	89 ee       	ldi	r24, 0xE9	; 233
     af0:	90 e1       	ldi	r25, 0x10	; 16
     af2:	96 8b       	std	Z+22, r25	; 0x16
     af4:	85 8b       	std	Z+21, r24	; 0x15
     af6:	8d e1       	ldi	r24, 0x1D	; 29
     af8:	84 9f       	mul	r24, r20
     afa:	f0 01       	movw	r30, r0
     afc:	85 9f       	mul	r24, r21
     afe:	f0 0d       	add	r31, r0
     b00:	11 24       	eor	r1, r1
     b02:	e0 59       	subi	r30, 0x90	; 144
     b04:	fe 4f       	sbci	r31, 0xFE	; 254
     b06:	15 82       	std	Z+5, r1	; 0x05
     b08:	14 82       	std	Z+4, r1	; 0x04
     b0a:	4f 5f       	subi	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	5a 83       	std	Y+2, r21	; 0x02
     b10:	49 83       	std	Y+1, r20	; 0x01
     b12:	29 81       	ldd	r18, Y+1	; 0x01
     b14:	3a 81       	ldd	r19, Y+2	; 0x02
     b16:	24 30       	cpi	r18, 0x04	; 4
     b18:	31 05       	cpc	r19, r1
     b1a:	4c f2       	brlt	.-110    	; 0xaae <initialize+0x94>
     b1c:	e8 e0       	ldi	r30, 0x08	; 8
     b1e:	f2 e0       	ldi	r31, 0x02	; 2
     b20:	11 82       	std	Z+1, r1	; 0x01
     b22:	10 82       	st	Z, r1
     b24:	15 82       	std	Z+5, r1	; 0x05
     b26:	14 82       	std	Z+4, r1	; 0x04
     b28:	13 82       	std	Z+3, r1	; 0x03
     b2a:	12 82       	std	Z+2, r1	; 0x02
     b2c:	e1 e6       	ldi	r30, 0x61	; 97
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	80 e8       	ldi	r24, 0x80	; 128
     b32:	80 83       	st	Z, r24
     b34:	10 82       	st	Z, r1
     b36:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b3a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b3e:	84 e0       	ldi	r24, 0x04	; 4
     b40:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     b4a:	0f 90       	pop	r0
     b4c:	0f 90       	pop	r0
     b4e:	0f 90       	pop	r0
     b50:	0f 90       	pop	r0
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	08 95       	ret

00000b58 <dispatch>:
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	00 d0       	rcall	.+0      	; 0xb5e <dispatch+0x6>
     b5e:	cd b7       	in	r28, 0x3d	; 61
     b60:	de b7       	in	r29, 0x3e	; 62
     b62:	9a 83       	std	Y+2, r25	; 0x02
     b64:	89 83       	std	Y+1, r24	; 0x01
     b66:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     b6a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     b6e:	06 96       	adiw	r24, 0x06	; 6
     b70:	0e 94 a4 11 	call	0x2348	; 0x2348 <setjmp>
     b74:	89 2b       	or	r24, r25
     b76:	59 f4       	brne	.+22     	; 0xb8e <dispatch+0x36>
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	9a 81       	ldd	r25, Y+2	; 0x02
     b7c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     b80:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     b84:	61 e0       	ldi	r22, 0x01	; 1
     b86:	70 e0       	ldi	r23, 0x00	; 0
     b88:	06 96       	adiw	r24, 0x06	; 6
     b8a:	0e 94 c4 11 	call	0x2388	; 0x2388 <longjmp>
     b8e:	0f 90       	pop	r0
     b90:	0f 90       	pop	r0
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	08 95       	ret

00000b98 <enqueueByDeadline>:
     b98:	0f 93       	push	r16
     b9a:	1f 93       	push	r17
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	dc 01       	movw	r26, r24
     ba2:	cb 01       	movw	r24, r22
     ba4:	eb 01       	movw	r28, r22
     ba6:	e8 81       	ld	r30, Y
     ba8:	f9 81       	ldd	r31, Y+1	; 0x01
     baa:	c0 e0       	ldi	r28, 0x00	; 0
     bac:	d0 e0       	ldi	r29, 0x00	; 0
     bae:	04 c0       	rjmp	.+8      	; 0xbb8 <enqueueByDeadline+0x20>
     bb0:	ef 01       	movw	r28, r30
     bb2:	01 90       	ld	r0, Z+
     bb4:	f0 81       	ld	r31, Z
     bb6:	e0 2d       	mov	r30, r0
     bb8:	30 97       	sbiw	r30, 0x00	; 0
     bba:	79 f0       	breq	.+30     	; 0xbda <enqueueByDeadline+0x42>
     bbc:	06 81       	ldd	r16, Z+6	; 0x06
     bbe:	17 81       	ldd	r17, Z+7	; 0x07
     bc0:	20 85       	ldd	r18, Z+8	; 0x08
     bc2:	31 85       	ldd	r19, Z+9	; 0x09
     bc4:	16 96       	adiw	r26, 0x06	; 6
     bc6:	4d 91       	ld	r20, X+
     bc8:	5d 91       	ld	r21, X+
     bca:	6d 91       	ld	r22, X+
     bcc:	7c 91       	ld	r23, X
     bce:	19 97       	sbiw	r26, 0x09	; 9
     bd0:	40 17       	cp	r20, r16
     bd2:	51 07       	cpc	r21, r17
     bd4:	62 07       	cpc	r22, r18
     bd6:	73 07       	cpc	r23, r19
     bd8:	5c f7       	brge	.-42     	; 0xbb0 <enqueueByDeadline+0x18>
     bda:	11 96       	adiw	r26, 0x01	; 1
     bdc:	fc 93       	st	X, r31
     bde:	ee 93       	st	-X, r30
     be0:	20 97       	sbiw	r28, 0x00	; 0
     be2:	21 f4       	brne	.+8      	; 0xbec <enqueueByDeadline+0x54>
     be4:	fc 01       	movw	r30, r24
     be6:	b1 83       	std	Z+1, r27	; 0x01
     be8:	a0 83       	st	Z, r26
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <enqueueByDeadline+0x58>
     bec:	b9 83       	std	Y+1, r27	; 0x01
     bee:	a8 83       	st	Y, r26
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	08 95       	ret

00000bfa <enqueueByBaseline>:
     bfa:	0f 93       	push	r16
     bfc:	1f 93       	push	r17
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
     c02:	dc 01       	movw	r26, r24
     c04:	cb 01       	movw	r24, r22
     c06:	eb 01       	movw	r28, r22
     c08:	e8 81       	ld	r30, Y
     c0a:	f9 81       	ldd	r31, Y+1	; 0x01
     c0c:	c0 e0       	ldi	r28, 0x00	; 0
     c0e:	d0 e0       	ldi	r29, 0x00	; 0
     c10:	04 c0       	rjmp	.+8      	; 0xc1a <enqueueByBaseline+0x20>
     c12:	ef 01       	movw	r28, r30
     c14:	01 90       	ld	r0, Z+
     c16:	f0 81       	ld	r31, Z
     c18:	e0 2d       	mov	r30, r0
     c1a:	30 97       	sbiw	r30, 0x00	; 0
     c1c:	79 f0       	breq	.+30     	; 0xc3c <enqueueByBaseline+0x42>
     c1e:	02 81       	ldd	r16, Z+2	; 0x02
     c20:	13 81       	ldd	r17, Z+3	; 0x03
     c22:	24 81       	ldd	r18, Z+4	; 0x04
     c24:	35 81       	ldd	r19, Z+5	; 0x05
     c26:	12 96       	adiw	r26, 0x02	; 2
     c28:	4d 91       	ld	r20, X+
     c2a:	5d 91       	ld	r21, X+
     c2c:	6d 91       	ld	r22, X+
     c2e:	7c 91       	ld	r23, X
     c30:	15 97       	sbiw	r26, 0x05	; 5
     c32:	40 17       	cp	r20, r16
     c34:	51 07       	cpc	r21, r17
     c36:	62 07       	cpc	r22, r18
     c38:	73 07       	cpc	r23, r19
     c3a:	5c f7       	brge	.-42     	; 0xc12 <enqueueByBaseline+0x18>
     c3c:	11 96       	adiw	r26, 0x01	; 1
     c3e:	fc 93       	st	X, r31
     c40:	ee 93       	st	-X, r30
     c42:	20 97       	sbiw	r28, 0x00	; 0
     c44:	21 f4       	brne	.+8      	; 0xc4e <enqueueByBaseline+0x54>
     c46:	fc 01       	movw	r30, r24
     c48:	b1 83       	std	Z+1, r27	; 0x01
     c4a:	a0 83       	st	Z, r26
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <enqueueByBaseline+0x58>
     c4e:	b9 83       	std	Y+1, r27	; 0x01
     c50:	a8 83       	st	Y, r26
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	1f 91       	pop	r17
     c58:	0f 91       	pop	r16
     c5a:	08 95       	ret

00000c5c <dequeue>:
     c5c:	dc 01       	movw	r26, r24
     c5e:	ed 91       	ld	r30, X+
     c60:	fc 91       	ld	r31, X
     c62:	11 97       	sbiw	r26, 0x01	; 1
     c64:	30 97       	sbiw	r30, 0x00	; 0
     c66:	59 f4       	brne	.+22     	; 0xc7e <dequeue+0x22>
     c68:	8f ef       	ldi	r24, 0xFF	; 255
     c6a:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     c6e:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     c72:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	83 bf       	out	0x33, r24	; 51
     c7a:	88 95       	sleep
     c7c:	fc cf       	rjmp	.-8      	; 0xc76 <dequeue+0x1a>
     c7e:	20 81       	ld	r18, Z
     c80:	31 81       	ldd	r19, Z+1	; 0x01
     c82:	2d 93       	st	X+, r18
     c84:	3c 93       	st	X, r19
     c86:	cf 01       	movw	r24, r30
     c88:	08 95       	ret

00000c8a <insert>:
     c8a:	fb 01       	movw	r30, r22
     c8c:	20 81       	ld	r18, Z
     c8e:	31 81       	ldd	r19, Z+1	; 0x01
     c90:	fc 01       	movw	r30, r24
     c92:	31 83       	std	Z+1, r19	; 0x01
     c94:	20 83       	st	Z, r18
     c96:	fb 01       	movw	r30, r22
     c98:	91 83       	std	Z+1, r25	; 0x01
     c9a:	80 83       	st	Z, r24
     c9c:	08 95       	ret

00000c9e <push>:
     c9e:	fb 01       	movw	r30, r22
     ca0:	20 81       	ld	r18, Z
     ca2:	31 81       	ldd	r19, Z+1	; 0x01
     ca4:	fc 01       	movw	r30, r24
     ca6:	31 83       	std	Z+1, r19	; 0x01
     ca8:	20 83       	st	Z, r18
     caa:	fb 01       	movw	r30, r22
     cac:	91 83       	std	Z+1, r25	; 0x01
     cae:	80 83       	st	Z, r24
     cb0:	08 95       	ret

00000cb2 <pop>:
     cb2:	dc 01       	movw	r26, r24
     cb4:	ed 91       	ld	r30, X+
     cb6:	fc 91       	ld	r31, X
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	20 81       	ld	r18, Z
     cbc:	31 81       	ldd	r19, Z+1	; 0x01
     cbe:	2d 93       	st	X+, r18
     cc0:	3c 93       	st	X, r19
     cc2:	cf 01       	movw	r24, r30
     cc4:	08 95       	ret

00000cc6 <schedule>:
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
     cce:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
     cd2:	c2 81       	ldd	r28, Z+2	; 0x02
     cd4:	d3 81       	ldd	r29, Z+3	; 0x03
     cd6:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <msgQ>
     cda:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <msgQ+0x1>
     cde:	30 97       	sbiw	r30, 0x00	; 0
     ce0:	19 f1       	breq	.+70     	; 0xd28 <schedule+0x62>
     ce2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
     ce6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
     cea:	89 2b       	or	r24, r25
     cec:	e9 f0       	breq	.+58     	; 0xd28 <schedule+0x62>
     cee:	20 97       	sbiw	r28, 0x00	; 0
     cf0:	69 f0       	breq	.+26     	; 0xd0c <schedule+0x46>
     cf2:	86 81       	ldd	r24, Z+6	; 0x06
     cf4:	97 81       	ldd	r25, Z+7	; 0x07
     cf6:	a0 85       	ldd	r26, Z+8	; 0x08
     cf8:	b1 85       	ldd	r27, Z+9	; 0x09
     cfa:	4e 81       	ldd	r20, Y+6	; 0x06
     cfc:	5f 81       	ldd	r21, Y+7	; 0x07
     cfe:	68 85       	ldd	r22, Y+8	; 0x08
     d00:	79 85       	ldd	r23, Y+9	; 0x09
     d02:	84 1b       	sub	r24, r20
     d04:	95 0b       	sbc	r25, r21
     d06:	a6 0b       	sbc	r26, r22
     d08:	b7 0b       	sbc	r27, r23
     d0a:	72 f4       	brpl	.+28     	; 0xd28 <schedule+0x62>
     d0c:	84 e0       	ldi	r24, 0x04	; 4
     d0e:	91 e0       	ldi	r25, 0x01	; 1
     d10:	0e 94 59 06 	call	0xcb2	; 0xcb2 <pop>
     d14:	62 e0       	ldi	r22, 0x02	; 2
     d16:	71 e0       	ldi	r23, 0x01	; 1
     d18:	0e 94 4f 06 	call	0xc9e	; 0xc9e <push>
     d1c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <activeStack>
     d20:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <activeStack+0x1>
     d24:	0e 94 ac 05 	call	0xb58	; 0xb58 <dispatch>
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	08 95       	ret

00000d2e <__vector_1>:
     d2e:	1f 92       	push	r1
     d30:	0f 92       	push	r0
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	0f 92       	push	r0
     d36:	11 24       	eor	r1, r1
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
     d3c:	2f 93       	push	r18
     d3e:	3f 93       	push	r19
     d40:	4f 93       	push	r20
     d42:	5f 93       	push	r21
     d44:	6f 93       	push	r22
     d46:	7f 93       	push	r23
     d48:	8f 93       	push	r24
     d4a:	9f 93       	push	r25
     d4c:	af 93       	push	r26
     d4e:	bf 93       	push	r27
     d50:	ef 93       	push	r30
     d52:	ff 93       	push	r31
     d54:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     d58:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     d5c:	ac 01       	movw	r20, r24
     d5e:	09 2e       	mov	r0, r25
     d60:	00 0c       	add	r0, r0
     d62:	66 0b       	sbc	r22, r22
     d64:	77 0b       	sbc	r23, r23
     d66:	9a 01       	movw	r18, r20
     d68:	11 27       	eor	r17, r17
     d6a:	00 27       	eor	r16, r16
     d6c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d70:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	70 e0       	ldi	r23, 0x00	; 0
     d78:	40 2b       	or	r20, r16
     d7a:	51 2b       	or	r21, r17
     d7c:	62 2b       	or	r22, r18
     d7e:	73 2b       	or	r23, r19
     d80:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <timestamp>
     d84:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <timestamp+0x1>
     d88:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <timestamp+0x2>
     d8c:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <timestamp+0x3>
     d90:	b0 9b       	sbis	0x16, 0	; 22
     d92:	1a c0       	rjmp	.+52     	; 0xdc8 <__vector_1+0x9a>
     d94:	01 96       	adiw	r24, 0x01	; 1
     d96:	09 2e       	mov	r0, r25
     d98:	00 0c       	add	r0, r0
     d9a:	aa 0b       	sbc	r26, r26
     d9c:	bb 0b       	sbc	r27, r27
     d9e:	bc 01       	movw	r22, r24
     da0:	55 27       	eor	r21, r21
     da2:	44 27       	eor	r20, r20
     da4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     da8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     dac:	a0 e0       	ldi	r26, 0x00	; 0
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	84 2b       	or	r24, r20
     db2:	95 2b       	or	r25, r21
     db4:	a6 2b       	or	r26, r22
     db6:	b7 2b       	or	r27, r23
     db8:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <timestamp>
     dbc:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <timestamp+0x1>
     dc0:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <timestamp+0x2>
     dc4:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <timestamp+0x3>
     dc8:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <mtable>
     dcc:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <mtable+0x1>
     dd0:	30 97       	sbiw	r30, 0x00	; 0
     dd2:	39 f0       	breq	.+14     	; 0xde2 <__vector_1+0xb4>
     dd4:	60 e0       	ldi	r22, 0x00	; 0
     dd6:	70 e0       	ldi	r23, 0x00	; 0
     dd8:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <otable>
     ddc:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <otable+0x1>
     de0:	09 95       	icall
     de2:	0e 94 63 06 	call	0xcc6	; 0xcc6 <schedule>
     de6:	ff 91       	pop	r31
     de8:	ef 91       	pop	r30
     dea:	bf 91       	pop	r27
     dec:	af 91       	pop	r26
     dee:	9f 91       	pop	r25
     df0:	8f 91       	pop	r24
     df2:	7f 91       	pop	r23
     df4:	6f 91       	pop	r22
     df6:	5f 91       	pop	r21
     df8:	4f 91       	pop	r20
     dfa:	3f 91       	pop	r19
     dfc:	2f 91       	pop	r18
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	0f 90       	pop	r0
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	0f 90       	pop	r0
     e08:	1f 90       	pop	r1
     e0a:	18 95       	reti

00000e0c <__vector_2>:
     e0c:	1f 92       	push	r1
     e0e:	0f 92       	push	r0
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	0f 92       	push	r0
     e14:	11 24       	eor	r1, r1
     e16:	0f 93       	push	r16
     e18:	1f 93       	push	r17
     e1a:	2f 93       	push	r18
     e1c:	3f 93       	push	r19
     e1e:	4f 93       	push	r20
     e20:	5f 93       	push	r21
     e22:	6f 93       	push	r22
     e24:	7f 93       	push	r23
     e26:	8f 93       	push	r24
     e28:	9f 93       	push	r25
     e2a:	af 93       	push	r26
     e2c:	bf 93       	push	r27
     e2e:	ef 93       	push	r30
     e30:	ff 93       	push	r31
     e32:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     e36:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     e3a:	ac 01       	movw	r20, r24
     e3c:	09 2e       	mov	r0, r25
     e3e:	00 0c       	add	r0, r0
     e40:	66 0b       	sbc	r22, r22
     e42:	77 0b       	sbc	r23, r23
     e44:	9a 01       	movw	r18, r20
     e46:	11 27       	eor	r17, r17
     e48:	00 27       	eor	r16, r16
     e4a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e4e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	40 2b       	or	r20, r16
     e58:	51 2b       	or	r21, r17
     e5a:	62 2b       	or	r22, r18
     e5c:	73 2b       	or	r23, r19
     e5e:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <timestamp>
     e62:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <timestamp+0x1>
     e66:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <timestamp+0x2>
     e6a:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <timestamp+0x3>
     e6e:	b0 9b       	sbis	0x16, 0	; 22
     e70:	1a c0       	rjmp	.+52     	; 0xea6 <__vector_2+0x9a>
     e72:	01 96       	adiw	r24, 0x01	; 1
     e74:	09 2e       	mov	r0, r25
     e76:	00 0c       	add	r0, r0
     e78:	aa 0b       	sbc	r26, r26
     e7a:	bb 0b       	sbc	r27, r27
     e7c:	bc 01       	movw	r22, r24
     e7e:	55 27       	eor	r21, r21
     e80:	44 27       	eor	r20, r20
     e82:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e86:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e8a:	a0 e0       	ldi	r26, 0x00	; 0
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	84 2b       	or	r24, r20
     e90:	95 2b       	or	r25, r21
     e92:	a6 2b       	or	r26, r22
     e94:	b7 2b       	or	r27, r23
     e96:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <timestamp>
     e9a:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <timestamp+0x1>
     e9e:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <timestamp+0x2>
     ea2:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <timestamp+0x3>
     ea6:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <mtable+0x2>
     eaa:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <mtable+0x3>
     eae:	30 97       	sbiw	r30, 0x00	; 0
     eb0:	39 f0       	breq	.+14     	; 0xec0 <__vector_2+0xb4>
     eb2:	61 e0       	ldi	r22, 0x01	; 1
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <otable+0x2>
     eba:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <otable+0x3>
     ebe:	09 95       	icall
     ec0:	0e 94 63 06 	call	0xcc6	; 0xcc6 <schedule>
     ec4:	ff 91       	pop	r31
     ec6:	ef 91       	pop	r30
     ec8:	bf 91       	pop	r27
     eca:	af 91       	pop	r26
     ecc:	9f 91       	pop	r25
     ece:	8f 91       	pop	r24
     ed0:	7f 91       	pop	r23
     ed2:	6f 91       	pop	r22
     ed4:	5f 91       	pop	r21
     ed6:	4f 91       	pop	r20
     ed8:	3f 91       	pop	r19
     eda:	2f 91       	pop	r18
     edc:	1f 91       	pop	r17
     ede:	0f 91       	pop	r16
     ee0:	0f 90       	pop	r0
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	0f 90       	pop	r0
     ee6:	1f 90       	pop	r1
     ee8:	18 95       	reti

00000eea <__vector_3>:
     eea:	1f 92       	push	r1
     eec:	0f 92       	push	r0
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	0f 92       	push	r0
     ef2:	11 24       	eor	r1, r1
     ef4:	0f 93       	push	r16
     ef6:	1f 93       	push	r17
     ef8:	2f 93       	push	r18
     efa:	3f 93       	push	r19
     efc:	4f 93       	push	r20
     efe:	5f 93       	push	r21
     f00:	6f 93       	push	r22
     f02:	7f 93       	push	r23
     f04:	8f 93       	push	r24
     f06:	9f 93       	push	r25
     f08:	af 93       	push	r26
     f0a:	bf 93       	push	r27
     f0c:	ef 93       	push	r30
     f0e:	ff 93       	push	r31
     f10:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     f14:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     f18:	ac 01       	movw	r20, r24
     f1a:	09 2e       	mov	r0, r25
     f1c:	00 0c       	add	r0, r0
     f1e:	66 0b       	sbc	r22, r22
     f20:	77 0b       	sbc	r23, r23
     f22:	9a 01       	movw	r18, r20
     f24:	11 27       	eor	r17, r17
     f26:	00 27       	eor	r16, r16
     f28:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f2c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f30:	60 e0       	ldi	r22, 0x00	; 0
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	40 2b       	or	r20, r16
     f36:	51 2b       	or	r21, r17
     f38:	62 2b       	or	r22, r18
     f3a:	73 2b       	or	r23, r19
     f3c:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <timestamp>
     f40:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <timestamp+0x1>
     f44:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <timestamp+0x2>
     f48:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <timestamp+0x3>
     f4c:	b0 9b       	sbis	0x16, 0	; 22
     f4e:	1a c0       	rjmp	.+52     	; 0xf84 <__vector_3+0x9a>
     f50:	01 96       	adiw	r24, 0x01	; 1
     f52:	09 2e       	mov	r0, r25
     f54:	00 0c       	add	r0, r0
     f56:	aa 0b       	sbc	r26, r26
     f58:	bb 0b       	sbc	r27, r27
     f5a:	bc 01       	movw	r22, r24
     f5c:	55 27       	eor	r21, r21
     f5e:	44 27       	eor	r20, r20
     f60:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f64:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f68:	a0 e0       	ldi	r26, 0x00	; 0
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	84 2b       	or	r24, r20
     f6e:	95 2b       	or	r25, r21
     f70:	a6 2b       	or	r26, r22
     f72:	b7 2b       	or	r27, r23
     f74:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <timestamp>
     f78:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <timestamp+0x1>
     f7c:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <timestamp+0x2>
     f80:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <timestamp+0x3>
     f84:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <mtable+0x4>
     f88:	f0 91 e9 01 	lds	r31, 0x01E9	; 0x8001e9 <mtable+0x5>
     f8c:	30 97       	sbiw	r30, 0x00	; 0
     f8e:	39 f0       	breq	.+14     	; 0xf9e <__vector_3+0xb4>
     f90:	62 e0       	ldi	r22, 0x02	; 2
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <otable+0x4>
     f98:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <otable+0x5>
     f9c:	09 95       	icall
     f9e:	0e 94 63 06 	call	0xcc6	; 0xcc6 <schedule>
     fa2:	ff 91       	pop	r31
     fa4:	ef 91       	pop	r30
     fa6:	bf 91       	pop	r27
     fa8:	af 91       	pop	r26
     faa:	9f 91       	pop	r25
     fac:	8f 91       	pop	r24
     fae:	7f 91       	pop	r23
     fb0:	6f 91       	pop	r22
     fb2:	5f 91       	pop	r21
     fb4:	4f 91       	pop	r20
     fb6:	3f 91       	pop	r19
     fb8:	2f 91       	pop	r18
     fba:	1f 91       	pop	r17
     fbc:	0f 91       	pop	r16
     fbe:	0f 90       	pop	r0
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	0f 90       	pop	r0
     fc4:	1f 90       	pop	r1
     fc6:	18 95       	reti

00000fc8 <__vector_4>:
     fc8:	1f 92       	push	r1
     fca:	0f 92       	push	r0
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	0f 92       	push	r0
     fd0:	11 24       	eor	r1, r1
     fd2:	0f 93       	push	r16
     fd4:	1f 93       	push	r17
     fd6:	2f 93       	push	r18
     fd8:	3f 93       	push	r19
     fda:	4f 93       	push	r20
     fdc:	5f 93       	push	r21
     fde:	6f 93       	push	r22
     fe0:	7f 93       	push	r23
     fe2:	8f 93       	push	r24
     fe4:	9f 93       	push	r25
     fe6:	af 93       	push	r26
     fe8:	bf 93       	push	r27
     fea:	ef 93       	push	r30
     fec:	ff 93       	push	r31
     fee:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     ff2:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     ff6:	ac 01       	movw	r20, r24
     ff8:	09 2e       	mov	r0, r25
     ffa:	00 0c       	add	r0, r0
     ffc:	66 0b       	sbc	r22, r22
     ffe:	77 0b       	sbc	r23, r23
    1000:	9a 01       	movw	r18, r20
    1002:	11 27       	eor	r17, r17
    1004:	00 27       	eor	r16, r16
    1006:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    100a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    100e:	60 e0       	ldi	r22, 0x00	; 0
    1010:	70 e0       	ldi	r23, 0x00	; 0
    1012:	40 2b       	or	r20, r16
    1014:	51 2b       	or	r21, r17
    1016:	62 2b       	or	r22, r18
    1018:	73 2b       	or	r23, r19
    101a:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <timestamp>
    101e:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <timestamp+0x1>
    1022:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <timestamp+0x2>
    1026:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <timestamp+0x3>
    102a:	b0 9b       	sbis	0x16, 0	; 22
    102c:	1a c0       	rjmp	.+52     	; 0x1062 <__vector_4+0x9a>
    102e:	01 96       	adiw	r24, 0x01	; 1
    1030:	09 2e       	mov	r0, r25
    1032:	00 0c       	add	r0, r0
    1034:	aa 0b       	sbc	r26, r26
    1036:	bb 0b       	sbc	r27, r27
    1038:	bc 01       	movw	r22, r24
    103a:	55 27       	eor	r21, r21
    103c:	44 27       	eor	r20, r20
    103e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1042:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1046:	a0 e0       	ldi	r26, 0x00	; 0
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	84 2b       	or	r24, r20
    104c:	95 2b       	or	r25, r21
    104e:	a6 2b       	or	r26, r22
    1050:	b7 2b       	or	r27, r23
    1052:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <timestamp>
    1056:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <timestamp+0x1>
    105a:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <timestamp+0x2>
    105e:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <timestamp+0x3>
    1062:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <mtable+0x6>
    1066:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <mtable+0x7>
    106a:	30 97       	sbiw	r30, 0x00	; 0
    106c:	39 f0       	breq	.+14     	; 0x107c <__vector_4+0xb4>
    106e:	63 e0       	ldi	r22, 0x03	; 3
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <otable+0x6>
    1076:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <otable+0x7>
    107a:	09 95       	icall
    107c:	0e 94 63 06 	call	0xcc6	; 0xcc6 <schedule>
    1080:	ff 91       	pop	r31
    1082:	ef 91       	pop	r30
    1084:	bf 91       	pop	r27
    1086:	af 91       	pop	r26
    1088:	9f 91       	pop	r25
    108a:	8f 91       	pop	r24
    108c:	7f 91       	pop	r23
    108e:	6f 91       	pop	r22
    1090:	5f 91       	pop	r21
    1092:	4f 91       	pop	r20
    1094:	3f 91       	pop	r19
    1096:	2f 91       	pop	r18
    1098:	1f 91       	pop	r17
    109a:	0f 91       	pop	r16
    109c:	0f 90       	pop	r0
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	0f 90       	pop	r0
    10a2:	1f 90       	pop	r1
    10a4:	18 95       	reti

000010a6 <__vector_5>:
    10a6:	1f 92       	push	r1
    10a8:	0f 92       	push	r0
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	0f 92       	push	r0
    10ae:	11 24       	eor	r1, r1
    10b0:	0f 93       	push	r16
    10b2:	1f 93       	push	r17
    10b4:	2f 93       	push	r18
    10b6:	3f 93       	push	r19
    10b8:	4f 93       	push	r20
    10ba:	5f 93       	push	r21
    10bc:	6f 93       	push	r22
    10be:	7f 93       	push	r23
    10c0:	8f 93       	push	r24
    10c2:	9f 93       	push	r25
    10c4:	af 93       	push	r26
    10c6:	bf 93       	push	r27
    10c8:	ef 93       	push	r30
    10ca:	ff 93       	push	r31
    10cc:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
    10d0:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
    10d4:	ac 01       	movw	r20, r24
    10d6:	09 2e       	mov	r0, r25
    10d8:	00 0c       	add	r0, r0
    10da:	66 0b       	sbc	r22, r22
    10dc:	77 0b       	sbc	r23, r23
    10de:	9a 01       	movw	r18, r20
    10e0:	11 27       	eor	r17, r17
    10e2:	00 27       	eor	r16, r16
    10e4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10e8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10ec:	60 e0       	ldi	r22, 0x00	; 0
    10ee:	70 e0       	ldi	r23, 0x00	; 0
    10f0:	40 2b       	or	r20, r16
    10f2:	51 2b       	or	r21, r17
    10f4:	62 2b       	or	r22, r18
    10f6:	73 2b       	or	r23, r19
    10f8:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <timestamp>
    10fc:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <timestamp+0x1>
    1100:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <timestamp+0x2>
    1104:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <timestamp+0x3>
    1108:	b0 9b       	sbis	0x16, 0	; 22
    110a:	1a c0       	rjmp	.+52     	; 0x1140 <__vector_5+0x9a>
    110c:	01 96       	adiw	r24, 0x01	; 1
    110e:	09 2e       	mov	r0, r25
    1110:	00 0c       	add	r0, r0
    1112:	aa 0b       	sbc	r26, r26
    1114:	bb 0b       	sbc	r27, r27
    1116:	bc 01       	movw	r22, r24
    1118:	55 27       	eor	r21, r21
    111a:	44 27       	eor	r20, r20
    111c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1120:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1124:	a0 e0       	ldi	r26, 0x00	; 0
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	84 2b       	or	r24, r20
    112a:	95 2b       	or	r25, r21
    112c:	a6 2b       	or	r26, r22
    112e:	b7 2b       	or	r27, r23
    1130:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <timestamp>
    1134:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <timestamp+0x1>
    1138:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <timestamp+0x2>
    113c:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <timestamp+0x3>
    1140:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <mtable+0x8>
    1144:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <mtable+0x9>
    1148:	30 97       	sbiw	r30, 0x00	; 0
    114a:	39 f0       	breq	.+14     	; 0x115a <__vector_5+0xb4>
    114c:	64 e0       	ldi	r22, 0x04	; 4
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <otable+0x8>
    1154:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <otable+0x9>
    1158:	09 95       	icall
    115a:	0e 94 63 06 	call	0xcc6	; 0xcc6 <schedule>
    115e:	ff 91       	pop	r31
    1160:	ef 91       	pop	r30
    1162:	bf 91       	pop	r27
    1164:	af 91       	pop	r26
    1166:	9f 91       	pop	r25
    1168:	8f 91       	pop	r24
    116a:	7f 91       	pop	r23
    116c:	6f 91       	pop	r22
    116e:	5f 91       	pop	r21
    1170:	4f 91       	pop	r20
    1172:	3f 91       	pop	r19
    1174:	2f 91       	pop	r18
    1176:	1f 91       	pop	r17
    1178:	0f 91       	pop	r16
    117a:	0f 90       	pop	r0
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	0f 90       	pop	r0
    1180:	1f 90       	pop	r1
    1182:	18 95       	reti

00001184 <__vector_10>:
    1184:	1f 92       	push	r1
    1186:	0f 92       	push	r0
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	0f 92       	push	r0
    118c:	11 24       	eor	r1, r1
    118e:	0f 93       	push	r16
    1190:	1f 93       	push	r17
    1192:	2f 93       	push	r18
    1194:	3f 93       	push	r19
    1196:	4f 93       	push	r20
    1198:	5f 93       	push	r21
    119a:	6f 93       	push	r22
    119c:	7f 93       	push	r23
    119e:	8f 93       	push	r24
    11a0:	9f 93       	push	r25
    11a2:	af 93       	push	r26
    11a4:	bf 93       	push	r27
    11a6:	ef 93       	push	r30
    11a8:	ff 93       	push	r31
    11aa:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
    11ae:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
    11b2:	ac 01       	movw	r20, r24
    11b4:	09 2e       	mov	r0, r25
    11b6:	00 0c       	add	r0, r0
    11b8:	66 0b       	sbc	r22, r22
    11ba:	77 0b       	sbc	r23, r23
    11bc:	9a 01       	movw	r18, r20
    11be:	11 27       	eor	r17, r17
    11c0:	00 27       	eor	r16, r16
    11c2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11c6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11ca:	60 e0       	ldi	r22, 0x00	; 0
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	40 2b       	or	r20, r16
    11d0:	51 2b       	or	r21, r17
    11d2:	62 2b       	or	r22, r18
    11d4:	73 2b       	or	r23, r19
    11d6:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <timestamp>
    11da:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <timestamp+0x1>
    11de:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <timestamp+0x2>
    11e2:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <timestamp+0x3>
    11e6:	b0 9b       	sbis	0x16, 0	; 22
    11e8:	1a c0       	rjmp	.+52     	; 0x121e <__vector_10+0x9a>
    11ea:	01 96       	adiw	r24, 0x01	; 1
    11ec:	09 2e       	mov	r0, r25
    11ee:	00 0c       	add	r0, r0
    11f0:	aa 0b       	sbc	r26, r26
    11f2:	bb 0b       	sbc	r27, r27
    11f4:	bc 01       	movw	r22, r24
    11f6:	55 27       	eor	r21, r21
    11f8:	44 27       	eor	r20, r20
    11fa:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11fe:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1202:	a0 e0       	ldi	r26, 0x00	; 0
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	84 2b       	or	r24, r20
    1208:	95 2b       	or	r25, r21
    120a:	a6 2b       	or	r26, r22
    120c:	b7 2b       	or	r27, r23
    120e:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <timestamp>
    1212:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <timestamp+0x1>
    1216:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <timestamp+0x2>
    121a:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <timestamp+0x3>
    121e:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <mtable+0xa>
    1222:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <mtable+0xb>
    1226:	30 97       	sbiw	r30, 0x00	; 0
    1228:	39 f0       	breq	.+14     	; 0x1238 <__vector_10+0xb4>
    122a:	65 e0       	ldi	r22, 0x05	; 5
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <otable+0xa>
    1232:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <otable+0xb>
    1236:	09 95       	icall
    1238:	0e 94 63 06 	call	0xcc6	; 0xcc6 <schedule>
    123c:	ff 91       	pop	r31
    123e:	ef 91       	pop	r30
    1240:	bf 91       	pop	r27
    1242:	af 91       	pop	r26
    1244:	9f 91       	pop	r25
    1246:	8f 91       	pop	r24
    1248:	7f 91       	pop	r23
    124a:	6f 91       	pop	r22
    124c:	5f 91       	pop	r21
    124e:	4f 91       	pop	r20
    1250:	3f 91       	pop	r19
    1252:	2f 91       	pop	r18
    1254:	1f 91       	pop	r17
    1256:	0f 91       	pop	r16
    1258:	0f 90       	pop	r0
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	0f 90       	pop	r0
    125e:	1f 90       	pop	r1
    1260:	18 95       	reti

00001262 <__vector_11>:
    1262:	1f 92       	push	r1
    1264:	0f 92       	push	r0
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	0f 92       	push	r0
    126a:	11 24       	eor	r1, r1
    126c:	0f 93       	push	r16
    126e:	1f 93       	push	r17
    1270:	2f 93       	push	r18
    1272:	3f 93       	push	r19
    1274:	4f 93       	push	r20
    1276:	5f 93       	push	r21
    1278:	6f 93       	push	r22
    127a:	7f 93       	push	r23
    127c:	8f 93       	push	r24
    127e:	9f 93       	push	r25
    1280:	af 93       	push	r26
    1282:	bf 93       	push	r27
    1284:	ef 93       	push	r30
    1286:	ff 93       	push	r31
    1288:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
    128c:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
    1290:	ac 01       	movw	r20, r24
    1292:	09 2e       	mov	r0, r25
    1294:	00 0c       	add	r0, r0
    1296:	66 0b       	sbc	r22, r22
    1298:	77 0b       	sbc	r23, r23
    129a:	9a 01       	movw	r18, r20
    129c:	11 27       	eor	r17, r17
    129e:	00 27       	eor	r16, r16
    12a0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12a4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12a8:	60 e0       	ldi	r22, 0x00	; 0
    12aa:	70 e0       	ldi	r23, 0x00	; 0
    12ac:	40 2b       	or	r20, r16
    12ae:	51 2b       	or	r21, r17
    12b0:	62 2b       	or	r22, r18
    12b2:	73 2b       	or	r23, r19
    12b4:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <timestamp>
    12b8:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <timestamp+0x1>
    12bc:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <timestamp+0x2>
    12c0:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <timestamp+0x3>
    12c4:	b0 9b       	sbis	0x16, 0	; 22
    12c6:	1a c0       	rjmp	.+52     	; 0x12fc <__vector_11+0x9a>
    12c8:	01 96       	adiw	r24, 0x01	; 1
    12ca:	09 2e       	mov	r0, r25
    12cc:	00 0c       	add	r0, r0
    12ce:	aa 0b       	sbc	r26, r26
    12d0:	bb 0b       	sbc	r27, r27
    12d2:	bc 01       	movw	r22, r24
    12d4:	55 27       	eor	r21, r21
    12d6:	44 27       	eor	r20, r20
    12d8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12dc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12e0:	a0 e0       	ldi	r26, 0x00	; 0
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	84 2b       	or	r24, r20
    12e6:	95 2b       	or	r25, r21
    12e8:	a6 2b       	or	r26, r22
    12ea:	b7 2b       	or	r27, r23
    12ec:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <timestamp>
    12f0:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <timestamp+0x1>
    12f4:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <timestamp+0x2>
    12f8:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <timestamp+0x3>
    12fc:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <mtable+0xc>
    1300:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <mtable+0xd>
    1304:	30 97       	sbiw	r30, 0x00	; 0
    1306:	39 f0       	breq	.+14     	; 0x1316 <__vector_11+0xb4>
    1308:	66 e0       	ldi	r22, 0x06	; 6
    130a:	70 e0       	ldi	r23, 0x00	; 0
    130c:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <otable+0xc>
    1310:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <otable+0xd>
    1314:	09 95       	icall
    1316:	0e 94 63 06 	call	0xcc6	; 0xcc6 <schedule>
    131a:	ff 91       	pop	r31
    131c:	ef 91       	pop	r30
    131e:	bf 91       	pop	r27
    1320:	af 91       	pop	r26
    1322:	9f 91       	pop	r25
    1324:	8f 91       	pop	r24
    1326:	7f 91       	pop	r23
    1328:	6f 91       	pop	r22
    132a:	5f 91       	pop	r21
    132c:	4f 91       	pop	r20
    132e:	3f 91       	pop	r19
    1330:	2f 91       	pop	r18
    1332:	1f 91       	pop	r17
    1334:	0f 91       	pop	r16
    1336:	0f 90       	pop	r0
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	0f 90       	pop	r0
    133c:	1f 90       	pop	r1
    133e:	18 95       	reti

00001340 <__vector_12>:
    1340:	1f 92       	push	r1
    1342:	0f 92       	push	r0
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	0f 92       	push	r0
    1348:	11 24       	eor	r1, r1
    134a:	0f 93       	push	r16
    134c:	1f 93       	push	r17
    134e:	2f 93       	push	r18
    1350:	3f 93       	push	r19
    1352:	4f 93       	push	r20
    1354:	5f 93       	push	r21
    1356:	6f 93       	push	r22
    1358:	7f 93       	push	r23
    135a:	8f 93       	push	r24
    135c:	9f 93       	push	r25
    135e:	af 93       	push	r26
    1360:	bf 93       	push	r27
    1362:	ef 93       	push	r30
    1364:	ff 93       	push	r31
    1366:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
    136a:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
    136e:	ac 01       	movw	r20, r24
    1370:	09 2e       	mov	r0, r25
    1372:	00 0c       	add	r0, r0
    1374:	66 0b       	sbc	r22, r22
    1376:	77 0b       	sbc	r23, r23
    1378:	9a 01       	movw	r18, r20
    137a:	11 27       	eor	r17, r17
    137c:	00 27       	eor	r16, r16
    137e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1382:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1386:	60 e0       	ldi	r22, 0x00	; 0
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	40 2b       	or	r20, r16
    138c:	51 2b       	or	r21, r17
    138e:	62 2b       	or	r22, r18
    1390:	73 2b       	or	r23, r19
    1392:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <timestamp>
    1396:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <timestamp+0x1>
    139a:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <timestamp+0x2>
    139e:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <timestamp+0x3>
    13a2:	b0 9b       	sbis	0x16, 0	; 22
    13a4:	1a c0       	rjmp	.+52     	; 0x13da <__vector_12+0x9a>
    13a6:	01 96       	adiw	r24, 0x01	; 1
    13a8:	09 2e       	mov	r0, r25
    13aa:	00 0c       	add	r0, r0
    13ac:	aa 0b       	sbc	r26, r26
    13ae:	bb 0b       	sbc	r27, r27
    13b0:	bc 01       	movw	r22, r24
    13b2:	55 27       	eor	r21, r21
    13b4:	44 27       	eor	r20, r20
    13b6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13ba:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13be:	a0 e0       	ldi	r26, 0x00	; 0
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	84 2b       	or	r24, r20
    13c4:	95 2b       	or	r25, r21
    13c6:	a6 2b       	or	r26, r22
    13c8:	b7 2b       	or	r27, r23
    13ca:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <timestamp>
    13ce:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <timestamp+0x1>
    13d2:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <timestamp+0x2>
    13d6:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <timestamp+0x3>
    13da:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <mtable+0xe>
    13de:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <mtable+0xf>
    13e2:	30 97       	sbiw	r30, 0x00	; 0
    13e4:	39 f0       	breq	.+14     	; 0x13f4 <__vector_12+0xb4>
    13e6:	67 e0       	ldi	r22, 0x07	; 7
    13e8:	70 e0       	ldi	r23, 0x00	; 0
    13ea:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <otable+0xe>
    13ee:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <otable+0xf>
    13f2:	09 95       	icall
    13f4:	0e 94 63 06 	call	0xcc6	; 0xcc6 <schedule>
    13f8:	ff 91       	pop	r31
    13fa:	ef 91       	pop	r30
    13fc:	bf 91       	pop	r27
    13fe:	af 91       	pop	r26
    1400:	9f 91       	pop	r25
    1402:	8f 91       	pop	r24
    1404:	7f 91       	pop	r23
    1406:	6f 91       	pop	r22
    1408:	5f 91       	pop	r21
    140a:	4f 91       	pop	r20
    140c:	3f 91       	pop	r19
    140e:	2f 91       	pop	r18
    1410:	1f 91       	pop	r17
    1412:	0f 91       	pop	r16
    1414:	0f 90       	pop	r0
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	0f 90       	pop	r0
    141a:	1f 90       	pop	r1
    141c:	18 95       	reti

0000141e <__vector_13>:
    141e:	1f 92       	push	r1
    1420:	0f 92       	push	r0
    1422:	0f b6       	in	r0, 0x3f	; 63
    1424:	0f 92       	push	r0
    1426:	11 24       	eor	r1, r1
    1428:	0f 93       	push	r16
    142a:	1f 93       	push	r17
    142c:	2f 93       	push	r18
    142e:	3f 93       	push	r19
    1430:	4f 93       	push	r20
    1432:	5f 93       	push	r21
    1434:	6f 93       	push	r22
    1436:	7f 93       	push	r23
    1438:	8f 93       	push	r24
    143a:	9f 93       	push	r25
    143c:	af 93       	push	r26
    143e:	bf 93       	push	r27
    1440:	ef 93       	push	r30
    1442:	ff 93       	push	r31
    1444:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
    1448:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
    144c:	ac 01       	movw	r20, r24
    144e:	09 2e       	mov	r0, r25
    1450:	00 0c       	add	r0, r0
    1452:	66 0b       	sbc	r22, r22
    1454:	77 0b       	sbc	r23, r23
    1456:	9a 01       	movw	r18, r20
    1458:	11 27       	eor	r17, r17
    145a:	00 27       	eor	r16, r16
    145c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1460:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1464:	60 e0       	ldi	r22, 0x00	; 0
    1466:	70 e0       	ldi	r23, 0x00	; 0
    1468:	40 2b       	or	r20, r16
    146a:	51 2b       	or	r21, r17
    146c:	62 2b       	or	r22, r18
    146e:	73 2b       	or	r23, r19
    1470:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <timestamp>
    1474:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <timestamp+0x1>
    1478:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <timestamp+0x2>
    147c:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <timestamp+0x3>
    1480:	b0 9b       	sbis	0x16, 0	; 22
    1482:	1a c0       	rjmp	.+52     	; 0x14b8 <__vector_13+0x9a>
    1484:	01 96       	adiw	r24, 0x01	; 1
    1486:	09 2e       	mov	r0, r25
    1488:	00 0c       	add	r0, r0
    148a:	aa 0b       	sbc	r26, r26
    148c:	bb 0b       	sbc	r27, r27
    148e:	bc 01       	movw	r22, r24
    1490:	55 27       	eor	r21, r21
    1492:	44 27       	eor	r20, r20
    1494:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1498:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    149c:	a0 e0       	ldi	r26, 0x00	; 0
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	84 2b       	or	r24, r20
    14a2:	95 2b       	or	r25, r21
    14a4:	a6 2b       	or	r26, r22
    14a6:	b7 2b       	or	r27, r23
    14a8:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <timestamp>
    14ac:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <timestamp+0x1>
    14b0:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <timestamp+0x2>
    14b4:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <timestamp+0x3>
    14b8:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <mtable+0x10>
    14bc:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <mtable+0x11>
    14c0:	30 97       	sbiw	r30, 0x00	; 0
    14c2:	39 f0       	breq	.+14     	; 0x14d2 <__vector_13+0xb4>
    14c4:	68 e0       	ldi	r22, 0x08	; 8
    14c6:	70 e0       	ldi	r23, 0x00	; 0
    14c8:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <otable+0x10>
    14cc:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <otable+0x11>
    14d0:	09 95       	icall
    14d2:	0e 94 63 06 	call	0xcc6	; 0xcc6 <schedule>
    14d6:	ff 91       	pop	r31
    14d8:	ef 91       	pop	r30
    14da:	bf 91       	pop	r27
    14dc:	af 91       	pop	r26
    14de:	9f 91       	pop	r25
    14e0:	8f 91       	pop	r24
    14e2:	7f 91       	pop	r23
    14e4:	6f 91       	pop	r22
    14e6:	5f 91       	pop	r21
    14e8:	4f 91       	pop	r20
    14ea:	3f 91       	pop	r19
    14ec:	2f 91       	pop	r18
    14ee:	1f 91       	pop	r17
    14f0:	0f 91       	pop	r16
    14f2:	0f 90       	pop	r0
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	0f 90       	pop	r0
    14f8:	1f 90       	pop	r1
    14fa:	18 95       	reti

000014fc <__vector_14>:
    14fc:	1f 92       	push	r1
    14fe:	0f 92       	push	r0
    1500:	0f b6       	in	r0, 0x3f	; 63
    1502:	0f 92       	push	r0
    1504:	11 24       	eor	r1, r1
    1506:	0f 93       	push	r16
    1508:	1f 93       	push	r17
    150a:	2f 93       	push	r18
    150c:	3f 93       	push	r19
    150e:	4f 93       	push	r20
    1510:	5f 93       	push	r21
    1512:	6f 93       	push	r22
    1514:	7f 93       	push	r23
    1516:	8f 93       	push	r24
    1518:	9f 93       	push	r25
    151a:	af 93       	push	r26
    151c:	bf 93       	push	r27
    151e:	ef 93       	push	r30
    1520:	ff 93       	push	r31
    1522:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
    1526:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
    152a:	ac 01       	movw	r20, r24
    152c:	09 2e       	mov	r0, r25
    152e:	00 0c       	add	r0, r0
    1530:	66 0b       	sbc	r22, r22
    1532:	77 0b       	sbc	r23, r23
    1534:	9a 01       	movw	r18, r20
    1536:	11 27       	eor	r17, r17
    1538:	00 27       	eor	r16, r16
    153a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    153e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1542:	60 e0       	ldi	r22, 0x00	; 0
    1544:	70 e0       	ldi	r23, 0x00	; 0
    1546:	40 2b       	or	r20, r16
    1548:	51 2b       	or	r21, r17
    154a:	62 2b       	or	r22, r18
    154c:	73 2b       	or	r23, r19
    154e:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <timestamp>
    1552:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <timestamp+0x1>
    1556:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <timestamp+0x2>
    155a:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <timestamp+0x3>
    155e:	b0 9b       	sbis	0x16, 0	; 22
    1560:	1a c0       	rjmp	.+52     	; 0x1596 <__vector_14+0x9a>
    1562:	01 96       	adiw	r24, 0x01	; 1
    1564:	09 2e       	mov	r0, r25
    1566:	00 0c       	add	r0, r0
    1568:	aa 0b       	sbc	r26, r26
    156a:	bb 0b       	sbc	r27, r27
    156c:	bc 01       	movw	r22, r24
    156e:	55 27       	eor	r21, r21
    1570:	44 27       	eor	r20, r20
    1572:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1576:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    157a:	a0 e0       	ldi	r26, 0x00	; 0
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	84 2b       	or	r24, r20
    1580:	95 2b       	or	r25, r21
    1582:	a6 2b       	or	r26, r22
    1584:	b7 2b       	or	r27, r23
    1586:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <timestamp>
    158a:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <timestamp+0x1>
    158e:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <timestamp+0x2>
    1592:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <timestamp+0x3>
    1596:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <mtable+0x12>
    159a:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <mtable+0x13>
    159e:	30 97       	sbiw	r30, 0x00	; 0
    15a0:	39 f0       	breq	.+14     	; 0x15b0 <__vector_14+0xb4>
    15a2:	69 e0       	ldi	r22, 0x09	; 9
    15a4:	70 e0       	ldi	r23, 0x00	; 0
    15a6:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <otable+0x12>
    15aa:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <otable+0x13>
    15ae:	09 95       	icall
    15b0:	0e 94 63 06 	call	0xcc6	; 0xcc6 <schedule>
    15b4:	ff 91       	pop	r31
    15b6:	ef 91       	pop	r30
    15b8:	bf 91       	pop	r27
    15ba:	af 91       	pop	r26
    15bc:	9f 91       	pop	r25
    15be:	8f 91       	pop	r24
    15c0:	7f 91       	pop	r23
    15c2:	6f 91       	pop	r22
    15c4:	5f 91       	pop	r21
    15c6:	4f 91       	pop	r20
    15c8:	3f 91       	pop	r19
    15ca:	2f 91       	pop	r18
    15cc:	1f 91       	pop	r17
    15ce:	0f 91       	pop	r16
    15d0:	0f 90       	pop	r0
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	0f 90       	pop	r0
    15d6:	1f 90       	pop	r1
    15d8:	18 95       	reti

000015da <__vector_15>:
    15da:	1f 92       	push	r1
    15dc:	0f 92       	push	r0
    15de:	0f b6       	in	r0, 0x3f	; 63
    15e0:	0f 92       	push	r0
    15e2:	11 24       	eor	r1, r1
    15e4:	0f 93       	push	r16
    15e6:	1f 93       	push	r17
    15e8:	2f 93       	push	r18
    15ea:	3f 93       	push	r19
    15ec:	4f 93       	push	r20
    15ee:	5f 93       	push	r21
    15f0:	6f 93       	push	r22
    15f2:	7f 93       	push	r23
    15f4:	8f 93       	push	r24
    15f6:	9f 93       	push	r25
    15f8:	af 93       	push	r26
    15fa:	bf 93       	push	r27
    15fc:	ef 93       	push	r30
    15fe:	ff 93       	push	r31
    1600:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
    1604:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
    1608:	ac 01       	movw	r20, r24
    160a:	09 2e       	mov	r0, r25
    160c:	00 0c       	add	r0, r0
    160e:	66 0b       	sbc	r22, r22
    1610:	77 0b       	sbc	r23, r23
    1612:	9a 01       	movw	r18, r20
    1614:	11 27       	eor	r17, r17
    1616:	00 27       	eor	r16, r16
    1618:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    161c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1620:	60 e0       	ldi	r22, 0x00	; 0
    1622:	70 e0       	ldi	r23, 0x00	; 0
    1624:	40 2b       	or	r20, r16
    1626:	51 2b       	or	r21, r17
    1628:	62 2b       	or	r22, r18
    162a:	73 2b       	or	r23, r19
    162c:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <timestamp>
    1630:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <timestamp+0x1>
    1634:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <timestamp+0x2>
    1638:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <timestamp+0x3>
    163c:	b0 9b       	sbis	0x16, 0	; 22
    163e:	1a c0       	rjmp	.+52     	; 0x1674 <__vector_15+0x9a>
    1640:	01 96       	adiw	r24, 0x01	; 1
    1642:	09 2e       	mov	r0, r25
    1644:	00 0c       	add	r0, r0
    1646:	aa 0b       	sbc	r26, r26
    1648:	bb 0b       	sbc	r27, r27
    164a:	bc 01       	movw	r22, r24
    164c:	55 27       	eor	r21, r21
    164e:	44 27       	eor	r20, r20
    1650:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1654:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1658:	a0 e0       	ldi	r26, 0x00	; 0
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	84 2b       	or	r24, r20
    165e:	95 2b       	or	r25, r21
    1660:	a6 2b       	or	r26, r22
    1662:	b7 2b       	or	r27, r23
    1664:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <timestamp>
    1668:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <timestamp+0x1>
    166c:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <timestamp+0x2>
    1670:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <timestamp+0x3>
    1674:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable+0x14>
    1678:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0x15>
    167c:	30 97       	sbiw	r30, 0x00	; 0
    167e:	39 f0       	breq	.+14     	; 0x168e <__vector_15+0xb4>
    1680:	6a e0       	ldi	r22, 0x0A	; 10
    1682:	70 e0       	ldi	r23, 0x00	; 0
    1684:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable+0x14>
    1688:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0x15>
    168c:	09 95       	icall
    168e:	0e 94 63 06 	call	0xcc6	; 0xcc6 <schedule>
    1692:	ff 91       	pop	r31
    1694:	ef 91       	pop	r30
    1696:	bf 91       	pop	r27
    1698:	af 91       	pop	r26
    169a:	9f 91       	pop	r25
    169c:	8f 91       	pop	r24
    169e:	7f 91       	pop	r23
    16a0:	6f 91       	pop	r22
    16a2:	5f 91       	pop	r21
    16a4:	4f 91       	pop	r20
    16a6:	3f 91       	pop	r19
    16a8:	2f 91       	pop	r18
    16aa:	1f 91       	pop	r17
    16ac:	0f 91       	pop	r16
    16ae:	0f 90       	pop	r0
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	0f 90       	pop	r0
    16b4:	1f 90       	pop	r1
    16b6:	18 95       	reti

000016b8 <__vector_16>:
    16b8:	1f 92       	push	r1
    16ba:	0f 92       	push	r0
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	0f 92       	push	r0
    16c0:	11 24       	eor	r1, r1
    16c2:	0f 93       	push	r16
    16c4:	1f 93       	push	r17
    16c6:	2f 93       	push	r18
    16c8:	3f 93       	push	r19
    16ca:	4f 93       	push	r20
    16cc:	5f 93       	push	r21
    16ce:	6f 93       	push	r22
    16d0:	7f 93       	push	r23
    16d2:	8f 93       	push	r24
    16d4:	9f 93       	push	r25
    16d6:	af 93       	push	r26
    16d8:	bf 93       	push	r27
    16da:	ef 93       	push	r30
    16dc:	ff 93       	push	r31
    16de:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
    16e2:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
    16e6:	ac 01       	movw	r20, r24
    16e8:	09 2e       	mov	r0, r25
    16ea:	00 0c       	add	r0, r0
    16ec:	66 0b       	sbc	r22, r22
    16ee:	77 0b       	sbc	r23, r23
    16f0:	9a 01       	movw	r18, r20
    16f2:	11 27       	eor	r17, r17
    16f4:	00 27       	eor	r16, r16
    16f6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16fa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16fe:	60 e0       	ldi	r22, 0x00	; 0
    1700:	70 e0       	ldi	r23, 0x00	; 0
    1702:	40 2b       	or	r20, r16
    1704:	51 2b       	or	r21, r17
    1706:	62 2b       	or	r22, r18
    1708:	73 2b       	or	r23, r19
    170a:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <timestamp>
    170e:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <timestamp+0x1>
    1712:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <timestamp+0x2>
    1716:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <timestamp+0x3>
    171a:	b0 9b       	sbis	0x16, 0	; 22
    171c:	1a c0       	rjmp	.+52     	; 0x1752 <__vector_16+0x9a>
    171e:	01 96       	adiw	r24, 0x01	; 1
    1720:	09 2e       	mov	r0, r25
    1722:	00 0c       	add	r0, r0
    1724:	aa 0b       	sbc	r26, r26
    1726:	bb 0b       	sbc	r27, r27
    1728:	bc 01       	movw	r22, r24
    172a:	55 27       	eor	r21, r21
    172c:	44 27       	eor	r20, r20
    172e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1732:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1736:	a0 e0       	ldi	r26, 0x00	; 0
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	84 2b       	or	r24, r20
    173c:	95 2b       	or	r25, r21
    173e:	a6 2b       	or	r26, r22
    1740:	b7 2b       	or	r27, r23
    1742:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <timestamp>
    1746:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <timestamp+0x1>
    174a:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <timestamp+0x2>
    174e:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <timestamp+0x3>
    1752:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <mtable+0x16>
    1756:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <mtable+0x17>
    175a:	30 97       	sbiw	r30, 0x00	; 0
    175c:	39 f0       	breq	.+14     	; 0x176c <__vector_16+0xb4>
    175e:	6b e0       	ldi	r22, 0x0B	; 11
    1760:	70 e0       	ldi	r23, 0x00	; 0
    1762:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <otable+0x16>
    1766:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <otable+0x17>
    176a:	09 95       	icall
    176c:	0e 94 63 06 	call	0xcc6	; 0xcc6 <schedule>
    1770:	ff 91       	pop	r31
    1772:	ef 91       	pop	r30
    1774:	bf 91       	pop	r27
    1776:	af 91       	pop	r26
    1778:	9f 91       	pop	r25
    177a:	8f 91       	pop	r24
    177c:	7f 91       	pop	r23
    177e:	6f 91       	pop	r22
    1780:	5f 91       	pop	r21
    1782:	4f 91       	pop	r20
    1784:	3f 91       	pop	r19
    1786:	2f 91       	pop	r18
    1788:	1f 91       	pop	r17
    178a:	0f 91       	pop	r16
    178c:	0f 90       	pop	r0
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	0f 90       	pop	r0
    1792:	1f 90       	pop	r1
    1794:	18 95       	reti

00001796 <__vector_17>:
    1796:	1f 92       	push	r1
    1798:	0f 92       	push	r0
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	0f 92       	push	r0
    179e:	11 24       	eor	r1, r1
    17a0:	0f 93       	push	r16
    17a2:	1f 93       	push	r17
    17a4:	2f 93       	push	r18
    17a6:	3f 93       	push	r19
    17a8:	4f 93       	push	r20
    17aa:	5f 93       	push	r21
    17ac:	6f 93       	push	r22
    17ae:	7f 93       	push	r23
    17b0:	8f 93       	push	r24
    17b2:	9f 93       	push	r25
    17b4:	af 93       	push	r26
    17b6:	bf 93       	push	r27
    17b8:	ef 93       	push	r30
    17ba:	ff 93       	push	r31
    17bc:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
    17c0:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
    17c4:	ac 01       	movw	r20, r24
    17c6:	09 2e       	mov	r0, r25
    17c8:	00 0c       	add	r0, r0
    17ca:	66 0b       	sbc	r22, r22
    17cc:	77 0b       	sbc	r23, r23
    17ce:	9a 01       	movw	r18, r20
    17d0:	11 27       	eor	r17, r17
    17d2:	00 27       	eor	r16, r16
    17d4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17d8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17dc:	60 e0       	ldi	r22, 0x00	; 0
    17de:	70 e0       	ldi	r23, 0x00	; 0
    17e0:	40 2b       	or	r20, r16
    17e2:	51 2b       	or	r21, r17
    17e4:	62 2b       	or	r22, r18
    17e6:	73 2b       	or	r23, r19
    17e8:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <timestamp>
    17ec:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <timestamp+0x1>
    17f0:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <timestamp+0x2>
    17f4:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <timestamp+0x3>
    17f8:	b0 9b       	sbis	0x16, 0	; 22
    17fa:	1a c0       	rjmp	.+52     	; 0x1830 <__vector_17+0x9a>
    17fc:	01 96       	adiw	r24, 0x01	; 1
    17fe:	09 2e       	mov	r0, r25
    1800:	00 0c       	add	r0, r0
    1802:	aa 0b       	sbc	r26, r26
    1804:	bb 0b       	sbc	r27, r27
    1806:	bc 01       	movw	r22, r24
    1808:	55 27       	eor	r21, r21
    180a:	44 27       	eor	r20, r20
    180c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1810:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1814:	a0 e0       	ldi	r26, 0x00	; 0
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	84 2b       	or	r24, r20
    181a:	95 2b       	or	r25, r21
    181c:	a6 2b       	or	r26, r22
    181e:	b7 2b       	or	r27, r23
    1820:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <timestamp>
    1824:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <timestamp+0x1>
    1828:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <timestamp+0x2>
    182c:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <timestamp+0x3>
    1830:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <mtable+0x18>
    1834:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <mtable+0x19>
    1838:	30 97       	sbiw	r30, 0x00	; 0
    183a:	39 f0       	breq	.+14     	; 0x184a <__vector_17+0xb4>
    183c:	6c e0       	ldi	r22, 0x0C	; 12
    183e:	70 e0       	ldi	r23, 0x00	; 0
    1840:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <otable+0x18>
    1844:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <otable+0x19>
    1848:	09 95       	icall
    184a:	0e 94 63 06 	call	0xcc6	; 0xcc6 <schedule>
    184e:	ff 91       	pop	r31
    1850:	ef 91       	pop	r30
    1852:	bf 91       	pop	r27
    1854:	af 91       	pop	r26
    1856:	9f 91       	pop	r25
    1858:	8f 91       	pop	r24
    185a:	7f 91       	pop	r23
    185c:	6f 91       	pop	r22
    185e:	5f 91       	pop	r21
    1860:	4f 91       	pop	r20
    1862:	3f 91       	pop	r19
    1864:	2f 91       	pop	r18
    1866:	1f 91       	pop	r17
    1868:	0f 91       	pop	r16
    186a:	0f 90       	pop	r0
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	0f 90       	pop	r0
    1870:	1f 90       	pop	r1
    1872:	18 95       	reti

00001874 <__vector_18>:
    1874:	1f 92       	push	r1
    1876:	0f 92       	push	r0
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	0f 92       	push	r0
    187c:	11 24       	eor	r1, r1
    187e:	0f 93       	push	r16
    1880:	1f 93       	push	r17
    1882:	2f 93       	push	r18
    1884:	3f 93       	push	r19
    1886:	4f 93       	push	r20
    1888:	5f 93       	push	r21
    188a:	6f 93       	push	r22
    188c:	7f 93       	push	r23
    188e:	8f 93       	push	r24
    1890:	9f 93       	push	r25
    1892:	af 93       	push	r26
    1894:	bf 93       	push	r27
    1896:	ef 93       	push	r30
    1898:	ff 93       	push	r31
    189a:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
    189e:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
    18a2:	ac 01       	movw	r20, r24
    18a4:	09 2e       	mov	r0, r25
    18a6:	00 0c       	add	r0, r0
    18a8:	66 0b       	sbc	r22, r22
    18aa:	77 0b       	sbc	r23, r23
    18ac:	9a 01       	movw	r18, r20
    18ae:	11 27       	eor	r17, r17
    18b0:	00 27       	eor	r16, r16
    18b2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18b6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18ba:	60 e0       	ldi	r22, 0x00	; 0
    18bc:	70 e0       	ldi	r23, 0x00	; 0
    18be:	40 2b       	or	r20, r16
    18c0:	51 2b       	or	r21, r17
    18c2:	62 2b       	or	r22, r18
    18c4:	73 2b       	or	r23, r19
    18c6:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <timestamp>
    18ca:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <timestamp+0x1>
    18ce:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <timestamp+0x2>
    18d2:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <timestamp+0x3>
    18d6:	b0 9b       	sbis	0x16, 0	; 22
    18d8:	1a c0       	rjmp	.+52     	; 0x190e <__vector_18+0x9a>
    18da:	01 96       	adiw	r24, 0x01	; 1
    18dc:	09 2e       	mov	r0, r25
    18de:	00 0c       	add	r0, r0
    18e0:	aa 0b       	sbc	r26, r26
    18e2:	bb 0b       	sbc	r27, r27
    18e4:	bc 01       	movw	r22, r24
    18e6:	55 27       	eor	r21, r21
    18e8:	44 27       	eor	r20, r20
    18ea:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18ee:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18f2:	a0 e0       	ldi	r26, 0x00	; 0
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	84 2b       	or	r24, r20
    18f8:	95 2b       	or	r25, r21
    18fa:	a6 2b       	or	r26, r22
    18fc:	b7 2b       	or	r27, r23
    18fe:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <timestamp>
    1902:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <timestamp+0x1>
    1906:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <timestamp+0x2>
    190a:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <timestamp+0x3>
    190e:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <mtable+0x1a>
    1912:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <mtable+0x1b>
    1916:	30 97       	sbiw	r30, 0x00	; 0
    1918:	39 f0       	breq	.+14     	; 0x1928 <__vector_18+0xb4>
    191a:	6d e0       	ldi	r22, 0x0D	; 13
    191c:	70 e0       	ldi	r23, 0x00	; 0
    191e:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <otable+0x1a>
    1922:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <otable+0x1b>
    1926:	09 95       	icall
    1928:	0e 94 63 06 	call	0xcc6	; 0xcc6 <schedule>
    192c:	ff 91       	pop	r31
    192e:	ef 91       	pop	r30
    1930:	bf 91       	pop	r27
    1932:	af 91       	pop	r26
    1934:	9f 91       	pop	r25
    1936:	8f 91       	pop	r24
    1938:	7f 91       	pop	r23
    193a:	6f 91       	pop	r22
    193c:	5f 91       	pop	r21
    193e:	4f 91       	pop	r20
    1940:	3f 91       	pop	r19
    1942:	2f 91       	pop	r18
    1944:	1f 91       	pop	r17
    1946:	0f 91       	pop	r16
    1948:	0f 90       	pop	r0
    194a:	0f be       	out	0x3f, r0	; 63
    194c:	0f 90       	pop	r0
    194e:	1f 90       	pop	r1
    1950:	18 95       	reti

00001952 <__vector_19>:
    1952:	1f 92       	push	r1
    1954:	0f 92       	push	r0
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	0f 92       	push	r0
    195a:	11 24       	eor	r1, r1
    195c:	0f 93       	push	r16
    195e:	1f 93       	push	r17
    1960:	2f 93       	push	r18
    1962:	3f 93       	push	r19
    1964:	4f 93       	push	r20
    1966:	5f 93       	push	r21
    1968:	6f 93       	push	r22
    196a:	7f 93       	push	r23
    196c:	8f 93       	push	r24
    196e:	9f 93       	push	r25
    1970:	af 93       	push	r26
    1972:	bf 93       	push	r27
    1974:	ef 93       	push	r30
    1976:	ff 93       	push	r31
    1978:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
    197c:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
    1980:	ac 01       	movw	r20, r24
    1982:	09 2e       	mov	r0, r25
    1984:	00 0c       	add	r0, r0
    1986:	66 0b       	sbc	r22, r22
    1988:	77 0b       	sbc	r23, r23
    198a:	9a 01       	movw	r18, r20
    198c:	11 27       	eor	r17, r17
    198e:	00 27       	eor	r16, r16
    1990:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1994:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1998:	60 e0       	ldi	r22, 0x00	; 0
    199a:	70 e0       	ldi	r23, 0x00	; 0
    199c:	40 2b       	or	r20, r16
    199e:	51 2b       	or	r21, r17
    19a0:	62 2b       	or	r22, r18
    19a2:	73 2b       	or	r23, r19
    19a4:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <timestamp>
    19a8:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <timestamp+0x1>
    19ac:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <timestamp+0x2>
    19b0:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <timestamp+0x3>
    19b4:	b0 9b       	sbis	0x16, 0	; 22
    19b6:	1a c0       	rjmp	.+52     	; 0x19ec <__vector_19+0x9a>
    19b8:	01 96       	adiw	r24, 0x01	; 1
    19ba:	09 2e       	mov	r0, r25
    19bc:	00 0c       	add	r0, r0
    19be:	aa 0b       	sbc	r26, r26
    19c0:	bb 0b       	sbc	r27, r27
    19c2:	bc 01       	movw	r22, r24
    19c4:	55 27       	eor	r21, r21
    19c6:	44 27       	eor	r20, r20
    19c8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19cc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19d0:	a0 e0       	ldi	r26, 0x00	; 0
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	84 2b       	or	r24, r20
    19d6:	95 2b       	or	r25, r21
    19d8:	a6 2b       	or	r26, r22
    19da:	b7 2b       	or	r27, r23
    19dc:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <timestamp>
    19e0:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <timestamp+0x1>
    19e4:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <timestamp+0x2>
    19e8:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <timestamp+0x3>
    19ec:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <mtable+0x1c>
    19f0:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <mtable+0x1d>
    19f4:	30 97       	sbiw	r30, 0x00	; 0
    19f6:	39 f0       	breq	.+14     	; 0x1a06 <__vector_19+0xb4>
    19f8:	6e e0       	ldi	r22, 0x0E	; 14
    19fa:	70 e0       	ldi	r23, 0x00	; 0
    19fc:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <otable+0x1c>
    1a00:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <otable+0x1d>
    1a04:	09 95       	icall
    1a06:	0e 94 63 06 	call	0xcc6	; 0xcc6 <schedule>
    1a0a:	ff 91       	pop	r31
    1a0c:	ef 91       	pop	r30
    1a0e:	bf 91       	pop	r27
    1a10:	af 91       	pop	r26
    1a12:	9f 91       	pop	r25
    1a14:	8f 91       	pop	r24
    1a16:	7f 91       	pop	r23
    1a18:	6f 91       	pop	r22
    1a1a:	5f 91       	pop	r21
    1a1c:	4f 91       	pop	r20
    1a1e:	3f 91       	pop	r19
    1a20:	2f 91       	pop	r18
    1a22:	1f 91       	pop	r17
    1a24:	0f 91       	pop	r16
    1a26:	0f 90       	pop	r0
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	0f 90       	pop	r0
    1a2c:	1f 90       	pop	r1
    1a2e:	18 95       	reti

00001a30 <__vector_20>:
    1a30:	1f 92       	push	r1
    1a32:	0f 92       	push	r0
    1a34:	0f b6       	in	r0, 0x3f	; 63
    1a36:	0f 92       	push	r0
    1a38:	11 24       	eor	r1, r1
    1a3a:	0f 93       	push	r16
    1a3c:	1f 93       	push	r17
    1a3e:	2f 93       	push	r18
    1a40:	3f 93       	push	r19
    1a42:	4f 93       	push	r20
    1a44:	5f 93       	push	r21
    1a46:	6f 93       	push	r22
    1a48:	7f 93       	push	r23
    1a4a:	8f 93       	push	r24
    1a4c:	9f 93       	push	r25
    1a4e:	af 93       	push	r26
    1a50:	bf 93       	push	r27
    1a52:	ef 93       	push	r30
    1a54:	ff 93       	push	r31
    1a56:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
    1a5a:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
    1a5e:	ac 01       	movw	r20, r24
    1a60:	09 2e       	mov	r0, r25
    1a62:	00 0c       	add	r0, r0
    1a64:	66 0b       	sbc	r22, r22
    1a66:	77 0b       	sbc	r23, r23
    1a68:	9a 01       	movw	r18, r20
    1a6a:	11 27       	eor	r17, r17
    1a6c:	00 27       	eor	r16, r16
    1a6e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a72:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a76:	60 e0       	ldi	r22, 0x00	; 0
    1a78:	70 e0       	ldi	r23, 0x00	; 0
    1a7a:	40 2b       	or	r20, r16
    1a7c:	51 2b       	or	r21, r17
    1a7e:	62 2b       	or	r22, r18
    1a80:	73 2b       	or	r23, r19
    1a82:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <timestamp>
    1a86:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <timestamp+0x1>
    1a8a:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <timestamp+0x2>
    1a8e:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <timestamp+0x3>
    1a92:	b0 9b       	sbis	0x16, 0	; 22
    1a94:	1a c0       	rjmp	.+52     	; 0x1aca <__vector_20+0x9a>
    1a96:	01 96       	adiw	r24, 0x01	; 1
    1a98:	09 2e       	mov	r0, r25
    1a9a:	00 0c       	add	r0, r0
    1a9c:	aa 0b       	sbc	r26, r26
    1a9e:	bb 0b       	sbc	r27, r27
    1aa0:	bc 01       	movw	r22, r24
    1aa2:	55 27       	eor	r21, r21
    1aa4:	44 27       	eor	r20, r20
    1aa6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1aaa:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1aae:	a0 e0       	ldi	r26, 0x00	; 0
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	84 2b       	or	r24, r20
    1ab4:	95 2b       	or	r25, r21
    1ab6:	a6 2b       	or	r26, r22
    1ab8:	b7 2b       	or	r27, r23
    1aba:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <timestamp>
    1abe:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <timestamp+0x1>
    1ac2:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <timestamp+0x2>
    1ac6:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <timestamp+0x3>
    1aca:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <mtable+0x1e>
    1ace:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <mtable+0x1f>
    1ad2:	30 97       	sbiw	r30, 0x00	; 0
    1ad4:	39 f0       	breq	.+14     	; 0x1ae4 <__vector_20+0xb4>
    1ad6:	6f e0       	ldi	r22, 0x0F	; 15
    1ad8:	70 e0       	ldi	r23, 0x00	; 0
    1ada:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <otable+0x1e>
    1ade:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <otable+0x1f>
    1ae2:	09 95       	icall
    1ae4:	0e 94 63 06 	call	0xcc6	; 0xcc6 <schedule>
    1ae8:	ff 91       	pop	r31
    1aea:	ef 91       	pop	r30
    1aec:	bf 91       	pop	r27
    1aee:	af 91       	pop	r26
    1af0:	9f 91       	pop	r25
    1af2:	8f 91       	pop	r24
    1af4:	7f 91       	pop	r23
    1af6:	6f 91       	pop	r22
    1af8:	5f 91       	pop	r21
    1afa:	4f 91       	pop	r20
    1afc:	3f 91       	pop	r19
    1afe:	2f 91       	pop	r18
    1b00:	1f 91       	pop	r17
    1b02:	0f 91       	pop	r16
    1b04:	0f 90       	pop	r0
    1b06:	0f be       	out	0x3f, r0	; 63
    1b08:	0f 90       	pop	r0
    1b0a:	1f 90       	pop	r1
    1b0c:	18 95       	reti

00001b0e <__vector_21>:
    1b0e:	1f 92       	push	r1
    1b10:	0f 92       	push	r0
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	0f 92       	push	r0
    1b16:	11 24       	eor	r1, r1
    1b18:	0f 93       	push	r16
    1b1a:	1f 93       	push	r17
    1b1c:	2f 93       	push	r18
    1b1e:	3f 93       	push	r19
    1b20:	4f 93       	push	r20
    1b22:	5f 93       	push	r21
    1b24:	6f 93       	push	r22
    1b26:	7f 93       	push	r23
    1b28:	8f 93       	push	r24
    1b2a:	9f 93       	push	r25
    1b2c:	af 93       	push	r26
    1b2e:	bf 93       	push	r27
    1b30:	ef 93       	push	r30
    1b32:	ff 93       	push	r31
    1b34:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
    1b38:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
    1b3c:	ac 01       	movw	r20, r24
    1b3e:	09 2e       	mov	r0, r25
    1b40:	00 0c       	add	r0, r0
    1b42:	66 0b       	sbc	r22, r22
    1b44:	77 0b       	sbc	r23, r23
    1b46:	9a 01       	movw	r18, r20
    1b48:	11 27       	eor	r17, r17
    1b4a:	00 27       	eor	r16, r16
    1b4c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b50:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b54:	60 e0       	ldi	r22, 0x00	; 0
    1b56:	70 e0       	ldi	r23, 0x00	; 0
    1b58:	40 2b       	or	r20, r16
    1b5a:	51 2b       	or	r21, r17
    1b5c:	62 2b       	or	r22, r18
    1b5e:	73 2b       	or	r23, r19
    1b60:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <timestamp>
    1b64:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <timestamp+0x1>
    1b68:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <timestamp+0x2>
    1b6c:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <timestamp+0x3>
    1b70:	b0 9b       	sbis	0x16, 0	; 22
    1b72:	1a c0       	rjmp	.+52     	; 0x1ba8 <__vector_21+0x9a>
    1b74:	01 96       	adiw	r24, 0x01	; 1
    1b76:	09 2e       	mov	r0, r25
    1b78:	00 0c       	add	r0, r0
    1b7a:	aa 0b       	sbc	r26, r26
    1b7c:	bb 0b       	sbc	r27, r27
    1b7e:	bc 01       	movw	r22, r24
    1b80:	55 27       	eor	r21, r21
    1b82:	44 27       	eor	r20, r20
    1b84:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b88:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b8c:	a0 e0       	ldi	r26, 0x00	; 0
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	84 2b       	or	r24, r20
    1b92:	95 2b       	or	r25, r21
    1b94:	a6 2b       	or	r26, r22
    1b96:	b7 2b       	or	r27, r23
    1b98:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <timestamp>
    1b9c:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <timestamp+0x1>
    1ba0:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <timestamp+0x2>
    1ba4:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <timestamp+0x3>
    1ba8:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <mtable+0x20>
    1bac:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <mtable+0x21>
    1bb0:	30 97       	sbiw	r30, 0x00	; 0
    1bb2:	39 f0       	breq	.+14     	; 0x1bc2 <__vector_21+0xb4>
    1bb4:	60 e1       	ldi	r22, 0x10	; 16
    1bb6:	70 e0       	ldi	r23, 0x00	; 0
    1bb8:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <otable+0x20>
    1bbc:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <otable+0x21>
    1bc0:	09 95       	icall
    1bc2:	0e 94 63 06 	call	0xcc6	; 0xcc6 <schedule>
    1bc6:	ff 91       	pop	r31
    1bc8:	ef 91       	pop	r30
    1bca:	bf 91       	pop	r27
    1bcc:	af 91       	pop	r26
    1bce:	9f 91       	pop	r25
    1bd0:	8f 91       	pop	r24
    1bd2:	7f 91       	pop	r23
    1bd4:	6f 91       	pop	r22
    1bd6:	5f 91       	pop	r21
    1bd8:	4f 91       	pop	r20
    1bda:	3f 91       	pop	r19
    1bdc:	2f 91       	pop	r18
    1bde:	1f 91       	pop	r17
    1be0:	0f 91       	pop	r16
    1be2:	0f 90       	pop	r0
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	0f 90       	pop	r0
    1be8:	1f 90       	pop	r1
    1bea:	18 95       	reti

00001bec <__vector_22>:
    1bec:	1f 92       	push	r1
    1bee:	0f 92       	push	r0
    1bf0:	0f b6       	in	r0, 0x3f	; 63
    1bf2:	0f 92       	push	r0
    1bf4:	11 24       	eor	r1, r1
    1bf6:	0f 93       	push	r16
    1bf8:	1f 93       	push	r17
    1bfa:	2f 93       	push	r18
    1bfc:	3f 93       	push	r19
    1bfe:	4f 93       	push	r20
    1c00:	5f 93       	push	r21
    1c02:	6f 93       	push	r22
    1c04:	7f 93       	push	r23
    1c06:	8f 93       	push	r24
    1c08:	9f 93       	push	r25
    1c0a:	af 93       	push	r26
    1c0c:	bf 93       	push	r27
    1c0e:	ef 93       	push	r30
    1c10:	ff 93       	push	r31
    1c12:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
    1c16:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
    1c1a:	ac 01       	movw	r20, r24
    1c1c:	09 2e       	mov	r0, r25
    1c1e:	00 0c       	add	r0, r0
    1c20:	66 0b       	sbc	r22, r22
    1c22:	77 0b       	sbc	r23, r23
    1c24:	9a 01       	movw	r18, r20
    1c26:	11 27       	eor	r17, r17
    1c28:	00 27       	eor	r16, r16
    1c2a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c2e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c32:	60 e0       	ldi	r22, 0x00	; 0
    1c34:	70 e0       	ldi	r23, 0x00	; 0
    1c36:	40 2b       	or	r20, r16
    1c38:	51 2b       	or	r21, r17
    1c3a:	62 2b       	or	r22, r18
    1c3c:	73 2b       	or	r23, r19
    1c3e:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <timestamp>
    1c42:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <timestamp+0x1>
    1c46:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <timestamp+0x2>
    1c4a:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <timestamp+0x3>
    1c4e:	b0 9b       	sbis	0x16, 0	; 22
    1c50:	1a c0       	rjmp	.+52     	; 0x1c86 <__vector_22+0x9a>
    1c52:	01 96       	adiw	r24, 0x01	; 1
    1c54:	09 2e       	mov	r0, r25
    1c56:	00 0c       	add	r0, r0
    1c58:	aa 0b       	sbc	r26, r26
    1c5a:	bb 0b       	sbc	r27, r27
    1c5c:	bc 01       	movw	r22, r24
    1c5e:	55 27       	eor	r21, r21
    1c60:	44 27       	eor	r20, r20
    1c62:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c66:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c6a:	a0 e0       	ldi	r26, 0x00	; 0
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	84 2b       	or	r24, r20
    1c70:	95 2b       	or	r25, r21
    1c72:	a6 2b       	or	r26, r22
    1c74:	b7 2b       	or	r27, r23
    1c76:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <timestamp>
    1c7a:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <timestamp+0x1>
    1c7e:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <timestamp+0x2>
    1c82:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <timestamp+0x3>
    1c86:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <mtable+0x22>
    1c8a:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <mtable+0x23>
    1c8e:	30 97       	sbiw	r30, 0x00	; 0
    1c90:	39 f0       	breq	.+14     	; 0x1ca0 <__vector_22+0xb4>
    1c92:	61 e1       	ldi	r22, 0x11	; 17
    1c94:	70 e0       	ldi	r23, 0x00	; 0
    1c96:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <otable+0x22>
    1c9a:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <otable+0x23>
    1c9e:	09 95       	icall
    1ca0:	0e 94 63 06 	call	0xcc6	; 0xcc6 <schedule>
    1ca4:	ff 91       	pop	r31
    1ca6:	ef 91       	pop	r30
    1ca8:	bf 91       	pop	r27
    1caa:	af 91       	pop	r26
    1cac:	9f 91       	pop	r25
    1cae:	8f 91       	pop	r24
    1cb0:	7f 91       	pop	r23
    1cb2:	6f 91       	pop	r22
    1cb4:	5f 91       	pop	r21
    1cb6:	4f 91       	pop	r20
    1cb8:	3f 91       	pop	r19
    1cba:	2f 91       	pop	r18
    1cbc:	1f 91       	pop	r17
    1cbe:	0f 91       	pop	r16
    1cc0:	0f 90       	pop	r0
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	0f 90       	pop	r0
    1cc6:	1f 90       	pop	r1
    1cc8:	18 95       	reti

00001cca <idle>:
    1cca:	0e 94 63 06 	call	0xcc6	; 0xcc6 <schedule>
    1cce:	78 94       	sei
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	83 bf       	out	0x33, r24	; 51
    1cd4:	88 95       	sleep
    1cd6:	fc cf       	rjmp	.-8      	; 0x1cd0 <idle+0x6>

00001cd8 <__vector_9>:
    1cd8:	1f 92       	push	r1
    1cda:	0f 92       	push	r0
    1cdc:	0f b6       	in	r0, 0x3f	; 63
    1cde:	0f 92       	push	r0
    1ce0:	11 24       	eor	r1, r1
    1ce2:	2f 93       	push	r18
    1ce4:	3f 93       	push	r19
    1ce6:	4f 93       	push	r20
    1ce8:	5f 93       	push	r21
    1cea:	6f 93       	push	r22
    1cec:	7f 93       	push	r23
    1cee:	8f 93       	push	r24
    1cf0:	9f 93       	push	r25
    1cf2:	ef 93       	push	r30
    1cf4:	ff 93       	push	r31
    1cf6:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
    1cfa:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
    1cfe:	01 96       	adiw	r24, 0x01	; 1
    1d00:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__data_end+0x1>
    1d04:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
    1d08:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <timerQ>
    1d0c:	f0 91 49 01 	lds	r31, 0x0149	; 0x800149 <timerQ+0x1>
    1d10:	30 97       	sbiw	r30, 0x00	; 0
    1d12:	01 f1       	breq	.+64     	; 0x1d54 <__vector_9+0x7c>
    1d14:	42 81       	ldd	r20, Z+2	; 0x02
    1d16:	53 81       	ldd	r21, Z+3	; 0x03
    1d18:	64 81       	ldd	r22, Z+4	; 0x04
    1d1a:	75 81       	ldd	r23, Z+5	; 0x05
    1d1c:	86 17       	cp	r24, r22
    1d1e:	97 07       	cpc	r25, r23
    1d20:	c9 f4       	brne	.+50     	; 0x1d54 <__vector_9+0x7c>
    1d22:	ca 01       	movw	r24, r20
    1d24:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d28:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d2c:	42 1b       	sub	r20, r18
    1d2e:	53 0b       	sbc	r21, r19
    1d30:	41 30       	cpi	r20, 0x01	; 1
    1d32:	51 05       	cpc	r21, r1
    1d34:	29 f4       	brne	.+10     	; 0x1d40 <__vector_9+0x68>
    1d36:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d3a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d3e:	01 96       	adiw	r24, 0x01	; 1
    1d40:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1d44:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1d48:	ef e6       	ldi	r30, 0x6F	; 111
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	82 60       	ori	r24, 0x02	; 2
    1d50:	80 83       	st	Z, r24
    1d52:	05 c0       	rjmp	.+10     	; 0x1d5e <__vector_9+0x86>
    1d54:	ef e6       	ldi	r30, 0x6F	; 111
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	8d 7f       	andi	r24, 0xFD	; 253
    1d5c:	80 83       	st	Z, r24
    1d5e:	ff 91       	pop	r31
    1d60:	ef 91       	pop	r30
    1d62:	9f 91       	pop	r25
    1d64:	8f 91       	pop	r24
    1d66:	7f 91       	pop	r23
    1d68:	6f 91       	pop	r22
    1d6a:	5f 91       	pop	r21
    1d6c:	4f 91       	pop	r20
    1d6e:	3f 91       	pop	r19
    1d70:	2f 91       	pop	r18
    1d72:	0f 90       	pop	r0
    1d74:	0f be       	out	0x3f, r0	; 63
    1d76:	0f 90       	pop	r0
    1d78:	1f 90       	pop	r1
    1d7a:	18 95       	reti

00001d7c <__vector_7>:
    1d7c:	1f 92       	push	r1
    1d7e:	0f 92       	push	r0
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	0f 92       	push	r0
    1d84:	11 24       	eor	r1, r1
    1d86:	cf 92       	push	r12
    1d88:	df 92       	push	r13
    1d8a:	ef 92       	push	r14
    1d8c:	ff 92       	push	r15
    1d8e:	2f 93       	push	r18
    1d90:	3f 93       	push	r19
    1d92:	4f 93       	push	r20
    1d94:	5f 93       	push	r21
    1d96:	6f 93       	push	r22
    1d98:	7f 93       	push	r23
    1d9a:	8f 93       	push	r24
    1d9c:	9f 93       	push	r25
    1d9e:	af 93       	push	r26
    1da0:	bf 93       	push	r27
    1da2:	ef 93       	push	r30
    1da4:	ff 93       	push	r31
    1da6:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
    1daa:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
    1dae:	6c 01       	movw	r12, r24
    1db0:	09 2e       	mov	r0, r25
    1db2:	00 0c       	add	r0, r0
    1db4:	ee 08       	sbc	r14, r14
    1db6:	ff 08       	sbc	r15, r15
    1db8:	76 01       	movw	r14, r12
    1dba:	dd 24       	eor	r13, r13
    1dbc:	cc 24       	eor	r12, r12
    1dbe:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1dc2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1dc6:	60 e0       	ldi	r22, 0x00	; 0
    1dc8:	70 e0       	ldi	r23, 0x00	; 0
    1dca:	c4 2a       	or	r12, r20
    1dcc:	d5 2a       	or	r13, r21
    1dce:	e6 2a       	or	r14, r22
    1dd0:	f7 2a       	or	r15, r23
    1dd2:	b0 9b       	sbis	0x16, 0	; 22
    1dd4:	1e c0       	rjmp	.+60     	; 0x1e12 <__vector_7+0x96>
    1dd6:	6c 01       	movw	r12, r24
    1dd8:	2f ef       	ldi	r18, 0xFF	; 255
    1dda:	c2 1a       	sub	r12, r18
    1ddc:	d2 0a       	sbc	r13, r18
    1dde:	0d 2c       	mov	r0, r13
    1de0:	00 0c       	add	r0, r0
    1de2:	ee 08       	sbc	r14, r14
    1de4:	ff 08       	sbc	r15, r15
    1de6:	d6 01       	movw	r26, r12
    1de8:	99 27       	eor	r25, r25
    1dea:	88 27       	eor	r24, r24
    1dec:	c0 90 84 00 	lds	r12, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1df0:	d0 90 85 00 	lds	r13, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1df4:	e1 2c       	mov	r14, r1
    1df6:	f1 2c       	mov	r15, r1
    1df8:	c8 2a       	or	r12, r24
    1dfa:	d9 2a       	or	r13, r25
    1dfc:	ea 2a       	or	r14, r26
    1dfe:	fb 2a       	or	r15, r27
    1e00:	08 c0       	rjmp	.+16     	; 0x1e12 <__vector_7+0x96>
    1e02:	88 e4       	ldi	r24, 0x48	; 72
    1e04:	91 e0       	ldi	r25, 0x01	; 1
    1e06:	0e 94 2e 06 	call	0xc5c	; 0xc5c <dequeue>
    1e0a:	6a e4       	ldi	r22, 0x4A	; 74
    1e0c:	71 e0       	ldi	r23, 0x01	; 1
    1e0e:	0e 94 cc 05 	call	0xb98	; 0xb98 <enqueueByDeadline>
    1e12:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <timerQ>
    1e16:	f0 91 49 01 	lds	r31, 0x0149	; 0x800149 <timerQ+0x1>
    1e1a:	30 97       	sbiw	r30, 0x00	; 0
    1e1c:	69 f0       	breq	.+26     	; 0x1e38 <__vector_7+0xbc>
    1e1e:	82 81       	ldd	r24, Z+2	; 0x02
    1e20:	93 81       	ldd	r25, Z+3	; 0x03
    1e22:	a4 81       	ldd	r26, Z+4	; 0x04
    1e24:	b5 81       	ldd	r27, Z+5	; 0x05
    1e26:	8c 19       	sub	r24, r12
    1e28:	9d 09       	sbc	r25, r13
    1e2a:	ae 09       	sbc	r26, r14
    1e2c:	bf 09       	sbc	r27, r15
    1e2e:	18 16       	cp	r1, r24
    1e30:	19 06       	cpc	r1, r25
    1e32:	1a 06       	cpc	r1, r26
    1e34:	1b 06       	cpc	r1, r27
    1e36:	2c f7       	brge	.-54     	; 0x1e02 <__vector_7+0x86>
    1e38:	30 97       	sbiw	r30, 0x00	; 0
    1e3a:	21 f1       	breq	.+72     	; 0x1e84 <__vector_7+0x108>
    1e3c:	82 81       	ldd	r24, Z+2	; 0x02
    1e3e:	93 81       	ldd	r25, Z+3	; 0x03
    1e40:	a4 81       	ldd	r26, Z+4	; 0x04
    1e42:	b5 81       	ldd	r27, Z+5	; 0x05
    1e44:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <__data_end>
    1e48:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <__data_end+0x1>
    1e4c:	2a 17       	cp	r18, r26
    1e4e:	3b 07       	cpc	r19, r27
    1e50:	c9 f4       	brne	.+50     	; 0x1e84 <__vector_7+0x108>
    1e52:	9c 01       	movw	r18, r24
    1e54:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e58:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e5c:	84 1b       	sub	r24, r20
    1e5e:	95 0b       	sbc	r25, r21
    1e60:	01 97       	sbiw	r24, 0x01	; 1
    1e62:	31 f4       	brne	.+12     	; 0x1e70 <__vector_7+0xf4>
    1e64:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e68:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e6c:	2f 5f       	subi	r18, 0xFF	; 255
    1e6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e70:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1e74:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1e78:	ef e6       	ldi	r30, 0x6F	; 111
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	82 60       	ori	r24, 0x02	; 2
    1e80:	80 83       	st	Z, r24
    1e82:	05 c0       	rjmp	.+10     	; 0x1e8e <__vector_7+0x112>
    1e84:	ef e6       	ldi	r30, 0x6F	; 111
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	8d 7f       	andi	r24, 0xFD	; 253
    1e8c:	80 83       	st	Z, r24
    1e8e:	0e 94 63 06 	call	0xcc6	; 0xcc6 <schedule>
    1e92:	ff 91       	pop	r31
    1e94:	ef 91       	pop	r30
    1e96:	bf 91       	pop	r27
    1e98:	af 91       	pop	r26
    1e9a:	9f 91       	pop	r25
    1e9c:	8f 91       	pop	r24
    1e9e:	7f 91       	pop	r23
    1ea0:	6f 91       	pop	r22
    1ea2:	5f 91       	pop	r21
    1ea4:	4f 91       	pop	r20
    1ea6:	3f 91       	pop	r19
    1ea8:	2f 91       	pop	r18
    1eaa:	ff 90       	pop	r15
    1eac:	ef 90       	pop	r14
    1eae:	df 90       	pop	r13
    1eb0:	cf 90       	pop	r12
    1eb2:	0f 90       	pop	r0
    1eb4:	0f be       	out	0x3f, r0	; 63
    1eb6:	0f 90       	pop	r0
    1eb8:	1f 90       	pop	r1
    1eba:	18 95       	reti

00001ebc <async>:
    1ebc:	3f 92       	push	r3
    1ebe:	4f 92       	push	r4
    1ec0:	5f 92       	push	r5
    1ec2:	6f 92       	push	r6
    1ec4:	7f 92       	push	r7
    1ec6:	8f 92       	push	r8
    1ec8:	9f 92       	push	r9
    1eca:	af 92       	push	r10
    1ecc:	bf 92       	push	r11
    1ece:	cf 92       	push	r12
    1ed0:	df 92       	push	r13
    1ed2:	ef 92       	push	r14
    1ed4:	ff 92       	push	r15
    1ed6:	0f 93       	push	r16
    1ed8:	1f 93       	push	r17
    1eda:	cf 93       	push	r28
    1edc:	df 93       	push	r29
    1ede:	2b 01       	movw	r4, r22
    1ee0:	3c 01       	movw	r6, r24
    1ee2:	49 01       	movw	r8, r18
    1ee4:	5a 01       	movw	r10, r20
    1ee6:	8f b7       	in	r24, 0x3f	; 63
    1ee8:	80 78       	andi	r24, 0x80	; 128
    1eea:	38 2e       	mov	r3, r24
    1eec:	f8 94       	cli
    1eee:	86 e0       	ldi	r24, 0x06	; 6
    1ef0:	91 e0       	ldi	r25, 0x01	; 1
    1ef2:	0e 94 2e 06 	call	0xc5c	; 0xc5c <dequeue>
    1ef6:	ec 01       	movw	r28, r24
    1ef8:	1b 87       	std	Y+11, r17	; 0x0b
    1efa:	0a 87       	std	Y+10, r16	; 0x0a
    1efc:	fd 86       	std	Y+13, r15	; 0x0d
    1efe:	ec 86       	std	Y+12, r14	; 0x0c
    1f00:	df 86       	std	Y+15, r13	; 0x0f
    1f02:	ce 86       	std	Y+14, r12	; 0x0e
    1f04:	33 20       	and	r3, r3
    1f06:	61 f0       	breq	.+24     	; 0x1f20 <async+0x64>
    1f08:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1f0c:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1f10:	02 80       	ldd	r0, Z+2	; 0x02
    1f12:	f3 81       	ldd	r31, Z+3	; 0x03
    1f14:	e0 2d       	mov	r30, r0
    1f16:	82 81       	ldd	r24, Z+2	; 0x02
    1f18:	93 81       	ldd	r25, Z+3	; 0x03
    1f1a:	a4 81       	ldd	r26, Z+4	; 0x04
    1f1c:	b5 81       	ldd	r27, Z+5	; 0x05
    1f1e:	08 c0       	rjmp	.+16     	; 0x1f30 <async+0x74>
    1f20:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <timestamp>
    1f24:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <timestamp+0x1>
    1f28:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <timestamp+0x2>
    1f2c:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <timestamp+0x3>
    1f30:	48 0e       	add	r4, r24
    1f32:	59 1e       	adc	r5, r25
    1f34:	6a 1e       	adc	r6, r26
    1f36:	7b 1e       	adc	r7, r27
    1f38:	4a 82       	std	Y+2, r4	; 0x02
    1f3a:	5b 82       	std	Y+3, r5	; 0x03
    1f3c:	6c 82       	std	Y+4, r6	; 0x04
    1f3e:	7d 82       	std	Y+5, r7	; 0x05
    1f40:	18 14       	cp	r1, r8
    1f42:	19 04       	cpc	r1, r9
    1f44:	1a 04       	cpc	r1, r10
    1f46:	1b 04       	cpc	r1, r11
    1f48:	44 f0       	brlt	.+16     	; 0x1f5a <async+0x9e>
    1f4a:	0f 2e       	mov	r0, r31
    1f4c:	88 24       	eor	r8, r8
    1f4e:	8a 94       	dec	r8
    1f50:	98 2c       	mov	r9, r8
    1f52:	a8 2c       	mov	r10, r8
    1f54:	ff e7       	ldi	r31, 0x7F	; 127
    1f56:	bf 2e       	mov	r11, r31
    1f58:	f0 2d       	mov	r31, r0
    1f5a:	84 0c       	add	r8, r4
    1f5c:	95 1c       	adc	r9, r5
    1f5e:	a6 1c       	adc	r10, r6
    1f60:	b7 1c       	adc	r11, r7
    1f62:	8e 82       	std	Y+6, r8	; 0x06
    1f64:	9f 82       	std	Y+7, r9	; 0x07
    1f66:	a8 86       	std	Y+8, r10	; 0x08
    1f68:	b9 86       	std	Y+9, r11	; 0x09
    1f6a:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <__data_end>
    1f6e:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <__data_end+0x1>
    1f72:	c9 01       	movw	r24, r18
    1f74:	03 2e       	mov	r0, r19
    1f76:	00 0c       	add	r0, r0
    1f78:	aa 0b       	sbc	r26, r26
    1f7a:	bb 0b       	sbc	r27, r27
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	99 27       	eor	r25, r25
    1f80:	88 27       	eor	r24, r24
    1f82:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1f86:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1f8a:	60 e0       	ldi	r22, 0x00	; 0
    1f8c:	70 e0       	ldi	r23, 0x00	; 0
    1f8e:	84 2b       	or	r24, r20
    1f90:	95 2b       	or	r25, r21
    1f92:	a6 2b       	or	r26, r22
    1f94:	b7 2b       	or	r27, r23
    1f96:	b0 9b       	sbis	0x16, 0	; 22
    1f98:	13 c0       	rjmp	.+38     	; 0x1fc0 <async+0x104>
    1f9a:	c9 01       	movw	r24, r18
    1f9c:	01 96       	adiw	r24, 0x01	; 1
    1f9e:	09 2e       	mov	r0, r25
    1fa0:	00 0c       	add	r0, r0
    1fa2:	aa 0b       	sbc	r26, r26
    1fa4:	bb 0b       	sbc	r27, r27
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	99 27       	eor	r25, r25
    1faa:	88 27       	eor	r24, r24
    1fac:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1fb0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1fb4:	60 e0       	ldi	r22, 0x00	; 0
    1fb6:	70 e0       	ldi	r23, 0x00	; 0
    1fb8:	84 2b       	or	r24, r20
    1fba:	95 2b       	or	r25, r21
    1fbc:	a6 2b       	or	r26, r22
    1fbe:	b7 2b       	or	r27, r23
    1fc0:	48 1a       	sub	r4, r24
    1fc2:	59 0a       	sbc	r5, r25
    1fc4:	6a 0a       	sbc	r6, r26
    1fc6:	7b 0a       	sbc	r7, r27
    1fc8:	14 14       	cp	r1, r4
    1fca:	15 04       	cpc	r1, r5
    1fcc:	16 04       	cpc	r1, r6
    1fce:	17 04       	cpc	r1, r7
    1fd0:	ac f5       	brge	.+106    	; 0x203c <async+0x180>
    1fd2:	68 e4       	ldi	r22, 0x48	; 72
    1fd4:	71 e0       	ldi	r23, 0x01	; 1
    1fd6:	ce 01       	movw	r24, r28
    1fd8:	0e 94 fd 05 	call	0xbfa	; 0xbfa <enqueueByBaseline>
    1fdc:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <timerQ>
    1fe0:	f0 91 49 01 	lds	r31, 0x0149	; 0x800149 <timerQ+0x1>
    1fe4:	30 97       	sbiw	r30, 0x00	; 0
    1fe6:	21 f1       	breq	.+72     	; 0x2030 <async+0x174>
    1fe8:	82 81       	ldd	r24, Z+2	; 0x02
    1fea:	93 81       	ldd	r25, Z+3	; 0x03
    1fec:	a4 81       	ldd	r26, Z+4	; 0x04
    1fee:	b5 81       	ldd	r27, Z+5	; 0x05
    1ff0:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <__data_end>
    1ff4:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <__data_end+0x1>
    1ff8:	2a 17       	cp	r18, r26
    1ffa:	3b 07       	cpc	r19, r27
    1ffc:	c9 f4       	brne	.+50     	; 0x2030 <async+0x174>
    1ffe:	9c 01       	movw	r18, r24
    2000:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    2004:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    2008:	84 1b       	sub	r24, r20
    200a:	95 0b       	sbc	r25, r21
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	31 f4       	brne	.+12     	; 0x201c <async+0x160>
    2010:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    2014:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    2018:	2f 5f       	subi	r18, 0xFF	; 255
    201a:	3f 4f       	sbci	r19, 0xFF	; 255
    201c:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    2020:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    2024:	ef e6       	ldi	r30, 0x6F	; 111
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	82 60       	ori	r24, 0x02	; 2
    202c:	80 83       	st	Z, r24
    202e:	39 c0       	rjmp	.+114    	; 0x20a2 <async+0x1e6>
    2030:	ef e6       	ldi	r30, 0x6F	; 111
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	8d 7f       	andi	r24, 0xFD	; 253
    2038:	80 83       	st	Z, r24
    203a:	33 c0       	rjmp	.+102    	; 0x20a2 <async+0x1e6>
    203c:	6a e4       	ldi	r22, 0x4A	; 74
    203e:	71 e0       	ldi	r23, 0x01	; 1
    2040:	ce 01       	movw	r24, r28
    2042:	0e 94 cc 05 	call	0xb98	; 0xb98 <enqueueByDeadline>
    2046:	33 20       	and	r3, r3
    2048:	61 f1       	breq	.+88     	; 0x20a2 <async+0x1e6>
    204a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    204e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    2052:	89 2b       	or	r24, r25
    2054:	31 f1       	breq	.+76     	; 0x20a2 <async+0x1e6>
    2056:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <msgQ>
    205a:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <msgQ+0x1>
    205e:	86 81       	ldd	r24, Z+6	; 0x06
    2060:	97 81       	ldd	r25, Z+7	; 0x07
    2062:	a0 85       	ldd	r26, Z+8	; 0x08
    2064:	b1 85       	ldd	r27, Z+9	; 0x09
    2066:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    206a:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    206e:	02 80       	ldd	r0, Z+2	; 0x02
    2070:	f3 81       	ldd	r31, Z+3	; 0x03
    2072:	e0 2d       	mov	r30, r0
    2074:	46 81       	ldd	r20, Z+6	; 0x06
    2076:	57 81       	ldd	r21, Z+7	; 0x07
    2078:	60 85       	ldd	r22, Z+8	; 0x08
    207a:	71 85       	ldd	r23, Z+9	; 0x09
    207c:	84 1b       	sub	r24, r20
    207e:	95 0b       	sbc	r25, r21
    2080:	a6 0b       	sbc	r26, r22
    2082:	b7 0b       	sbc	r27, r23
    2084:	72 f4       	brpl	.+28     	; 0x20a2 <async+0x1e6>
    2086:	84 e0       	ldi	r24, 0x04	; 4
    2088:	91 e0       	ldi	r25, 0x01	; 1
    208a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <pop>
    208e:	62 e0       	ldi	r22, 0x02	; 2
    2090:	71 e0       	ldi	r23, 0x01	; 1
    2092:	0e 94 4f 06 	call	0xc9e	; 0xc9e <push>
    2096:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <activeStack>
    209a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <activeStack+0x1>
    209e:	0e 94 ac 05 	call	0xb58	; 0xb58 <dispatch>
    20a2:	33 20       	and	r3, r3
    20a4:	09 f0       	breq	.+2      	; 0x20a8 <async+0x1ec>
    20a6:	78 94       	sei
    20a8:	ce 01       	movw	r24, r28
    20aa:	df 91       	pop	r29
    20ac:	cf 91       	pop	r28
    20ae:	1f 91       	pop	r17
    20b0:	0f 91       	pop	r16
    20b2:	ff 90       	pop	r15
    20b4:	ef 90       	pop	r14
    20b6:	df 90       	pop	r13
    20b8:	cf 90       	pop	r12
    20ba:	bf 90       	pop	r11
    20bc:	af 90       	pop	r10
    20be:	9f 90       	pop	r9
    20c0:	8f 90       	pop	r8
    20c2:	7f 90       	pop	r7
    20c4:	6f 90       	pop	r6
    20c6:	5f 90       	pop	r5
    20c8:	4f 90       	pop	r4
    20ca:	3f 90       	pop	r3
    20cc:	08 95       	ret

000020ce <sync>:
    20ce:	cf 92       	push	r12
    20d0:	df 92       	push	r13
    20d2:	ef 92       	push	r14
    20d4:	ff 92       	push	r15
    20d6:	0f 93       	push	r16
    20d8:	1f 93       	push	r17
    20da:	cf 93       	push	r28
    20dc:	df 93       	push	r29
    20de:	ec 01       	movw	r28, r24
    20e0:	7b 01       	movw	r14, r22
    20e2:	6a 01       	movw	r12, r20
    20e4:	1f b7       	in	r17, 0x3f	; 63
    20e6:	10 78       	andi	r17, 0x80	; 128
    20e8:	f8 94       	cli
    20ea:	a8 81       	ld	r26, Y
    20ec:	b9 81       	ldd	r27, Y+1	; 0x01
    20ee:	10 97       	sbiw	r26, 0x00	; 0
    20f0:	19 f4       	brne	.+6      	; 0x20f8 <sync+0x2a>
    20f2:	35 c0       	rjmp	.+106    	; 0x215e <sync+0x90>
    20f4:	a0 81       	ld	r26, Z
    20f6:	b1 81       	ldd	r27, Z+1	; 0x01
    20f8:	14 96       	adiw	r26, 0x04	; 4
    20fa:	ed 91       	ld	r30, X+
    20fc:	fc 91       	ld	r31, X
    20fe:	15 97       	sbiw	r26, 0x05	; 5
    2100:	30 97       	sbiw	r30, 0x00	; 0
    2102:	c1 f7       	brne	.-16     	; 0x20f4 <sync+0x26>
    2104:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2108:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    210c:	a2 17       	cp	r26, r18
    210e:	b3 07       	cpc	r27, r19
    2110:	11 f0       	breq	.+4      	; 0x2116 <sync+0x48>
    2112:	11 11       	cpse	r17, r1
    2114:	07 c0       	rjmp	.+14     	; 0x2124 <sync+0x56>
    2116:	11 23       	and	r17, r17
    2118:	09 f4       	brne	.+2      	; 0x211c <sync+0x4e>
    211a:	4a c0       	rjmp	.+148    	; 0x21b0 <sync+0xe2>
    211c:	78 94       	sei
    211e:	8f ef       	ldi	r24, 0xFF	; 255
    2120:	9f ef       	ldi	r25, 0xFF	; 255
    2122:	4e c0       	rjmp	.+156    	; 0x21c0 <sync+0xf2>
    2124:	8a 81       	ldd	r24, Y+2	; 0x02
    2126:	9b 81       	ldd	r25, Y+3	; 0x03
    2128:	00 97       	sbiw	r24, 0x00	; 0
    212a:	19 f0       	breq	.+6      	; 0x2132 <sync+0x64>
    212c:	fc 01       	movw	r30, r24
    212e:	15 82       	std	Z+5, r1	; 0x05
    2130:	14 82       	std	Z+4, r1	; 0x04
    2132:	3b 83       	std	Y+3, r19	; 0x03
    2134:	2a 83       	std	Y+2, r18	; 0x02
    2136:	f9 01       	movw	r30, r18
    2138:	d5 83       	std	Z+5, r29	; 0x05
    213a:	c4 83       	std	Z+4, r28	; 0x04
    213c:	cd 01       	movw	r24, r26
    213e:	0e 94 ac 05 	call	0xb58	; 0xb58 <dispatch>
    2142:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2146:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    214a:	82 81       	ldd	r24, Z+2	; 0x02
    214c:	93 81       	ldd	r25, Z+3	; 0x03
    214e:	89 2b       	or	r24, r25
    2150:	31 f4       	brne	.+12     	; 0x215e <sync+0x90>
    2152:	11 23       	and	r17, r17
    2154:	81 f1       	breq	.+96     	; 0x21b6 <sync+0xe8>
    2156:	78 94       	sei
    2158:	80 e0       	ldi	r24, 0x00	; 0
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	31 c0       	rjmp	.+98     	; 0x21c0 <sync+0xf2>
    215e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2162:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2166:	99 83       	std	Y+1, r25	; 0x01
    2168:	88 83       	st	Y, r24
    216a:	11 23       	and	r17, r17
    216c:	29 f0       	breq	.+10     	; 0x2178 <sync+0xaa>
    216e:	8a 81       	ldd	r24, Y+2	; 0x02
    2170:	9b 81       	ldd	r25, Y+3	; 0x03
    2172:	01 97       	sbiw	r24, 0x01	; 1
    2174:	09 f0       	breq	.+2      	; 0x2178 <sync+0xaa>
    2176:	78 94       	sei
    2178:	b6 01       	movw	r22, r12
    217a:	ce 01       	movw	r24, r28
    217c:	f7 01       	movw	r30, r14
    217e:	09 95       	icall
    2180:	f8 2e       	mov	r15, r24
    2182:	09 2f       	mov	r16, r25
    2184:	8f b7       	in	r24, 0x3f	; 63
    2186:	f8 94       	cli
    2188:	19 82       	std	Y+1, r1	; 0x01
    218a:	18 82       	st	Y, r1
    218c:	8a 81       	ldd	r24, Y+2	; 0x02
    218e:	9b 81       	ldd	r25, Y+3	; 0x03
    2190:	82 30       	cpi	r24, 0x02	; 2
    2192:	91 05       	cpc	r25, r1
    2194:	38 f0       	brcs	.+14     	; 0x21a4 <sync+0xd6>
    2196:	1b 82       	std	Y+3, r1	; 0x03
    2198:	1a 82       	std	Y+2, r1	; 0x02
    219a:	fc 01       	movw	r30, r24
    219c:	15 82       	std	Z+5, r1	; 0x05
    219e:	14 82       	std	Z+4, r1	; 0x04
    21a0:	0e 94 ac 05 	call	0xb58	; 0xb58 <dispatch>
    21a4:	11 23       	and	r17, r17
    21a6:	51 f0       	breq	.+20     	; 0x21bc <sync+0xee>
    21a8:	78 94       	sei
    21aa:	8f 2d       	mov	r24, r15
    21ac:	90 2f       	mov	r25, r16
    21ae:	08 c0       	rjmp	.+16     	; 0x21c0 <sync+0xf2>
    21b0:	8f ef       	ldi	r24, 0xFF	; 255
    21b2:	9f ef       	ldi	r25, 0xFF	; 255
    21b4:	05 c0       	rjmp	.+10     	; 0x21c0 <sync+0xf2>
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	02 c0       	rjmp	.+4      	; 0x21c0 <sync+0xf2>
    21bc:	8f 2d       	mov	r24, r15
    21be:	90 2f       	mov	r25, r16
    21c0:	df 91       	pop	r29
    21c2:	cf 91       	pop	r28
    21c4:	1f 91       	pop	r17
    21c6:	0f 91       	pop	r16
    21c8:	ff 90       	pop	r15
    21ca:	ef 90       	pop	r14
    21cc:	df 90       	pop	r13
    21ce:	cf 90       	pop	r12
    21d0:	08 95       	ret

000021d2 <run>:
    21d2:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    21d6:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    21da:	8a e4       	ldi	r24, 0x4A	; 74
    21dc:	91 e0       	ldi	r25, 0x01	; 1
    21de:	0e 94 2e 06 	call	0xc5c	; 0xc5c <dequeue>
    21e2:	ec 01       	movw	r28, r24
    21e4:	f8 01       	movw	r30, r16
    21e6:	93 83       	std	Z+3, r25	; 0x03
    21e8:	82 83       	std	Z+2, r24	; 0x02
    21ea:	78 94       	sei
    21ec:	6c 85       	ldd	r22, Y+12	; 0x0c
    21ee:	7d 85       	ldd	r23, Y+13	; 0x0d
    21f0:	4e 85       	ldd	r20, Y+14	; 0x0e
    21f2:	5f 85       	ldd	r21, Y+15	; 0x0f
    21f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    21f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    21f8:	0e 94 67 10 	call	0x20ce	; 0x20ce <sync>
    21fc:	8f b7       	in	r24, 0x3f	; 63
    21fe:	f8 94       	cli
    2200:	66 e0       	ldi	r22, 0x06	; 6
    2202:	71 e0       	ldi	r23, 0x01	; 1
    2204:	ce 01       	movw	r24, r28
    2206:	0e 94 45 06 	call	0xc8a	; 0xc8a <insert>
    220a:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    220e:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    2212:	01 90       	ld	r0, Z+
    2214:	f0 81       	ld	r31, Z
    2216:	e0 2d       	mov	r30, r0
    2218:	c2 81       	ldd	r28, Z+2	; 0x02
    221a:	d3 81       	ldd	r29, Z+3	; 0x03
    221c:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <msgQ>
    2220:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <msgQ+0x1>
    2224:	30 97       	sbiw	r30, 0x00	; 0
    2226:	a1 f0       	breq	.+40     	; 0x2250 <run+0x7e>
    2228:	20 97       	sbiw	r28, 0x00	; 0
    222a:	99 f2       	breq	.-90     	; 0x21d2 <run>
    222c:	86 81       	ldd	r24, Z+6	; 0x06
    222e:	97 81       	ldd	r25, Z+7	; 0x07
    2230:	a0 85       	ldd	r26, Z+8	; 0x08
    2232:	b1 85       	ldd	r27, Z+9	; 0x09
    2234:	4e 81       	ldd	r20, Y+6	; 0x06
    2236:	5f 81       	ldd	r21, Y+7	; 0x07
    2238:	68 85       	ldd	r22, Y+8	; 0x08
    223a:	79 85       	ldd	r23, Y+9	; 0x09
    223c:	84 1b       	sub	r24, r20
    223e:	95 0b       	sbc	r25, r21
    2240:	a6 0b       	sbc	r26, r22
    2242:	b7 0b       	sbc	r27, r23
    2244:	18 16       	cp	r1, r24
    2246:	19 06       	cpc	r1, r25
    2248:	1a 06       	cpc	r1, r26
    224a:	1b 06       	cpc	r1, r27
    224c:	0c f0       	brlt	.+2      	; 0x2250 <run+0x7e>
    224e:	c1 cf       	rjmp	.-126    	; 0x21d2 <run>
    2250:	82 e0       	ldi	r24, 0x02	; 2
    2252:	91 e0       	ldi	r25, 0x01	; 1
    2254:	0e 94 59 06 	call	0xcb2	; 0xcb2 <pop>
    2258:	64 e0       	ldi	r22, 0x04	; 4
    225a:	71 e0       	ldi	r23, 0x01	; 1
    225c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <push>
    2260:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <activeStack>
    2264:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <activeStack+0x1>
    2268:	02 c0       	rjmp	.+4      	; 0x226e <run+0x9c>
    226a:	a0 81       	ld	r26, Z
    226c:	b1 81       	ldd	r27, Z+1	; 0x01
    226e:	14 96       	adiw	r26, 0x04	; 4
    2270:	ed 91       	ld	r30, X+
    2272:	fc 91       	ld	r31, X
    2274:	15 97       	sbiw	r26, 0x05	; 5
    2276:	30 97       	sbiw	r30, 0x00	; 0
    2278:	c1 f7       	brne	.-16     	; 0x226a <run+0x98>
    227a:	cd 01       	movw	r24, r26
    227c:	0e 94 ac 05 	call	0xb58	; 0xb58 <dispatch>
    2280:	a8 cf       	rjmp	.-176    	; 0x21d2 <run>

00002282 <install>:
    thread0.msg = NULL;
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    2282:	fc 01       	movw	r30, r24
    if (i >= 0 && i < N_VECTORS) {
    2284:	42 31       	cpi	r20, 0x12	; 18
    2286:	b8 f4       	brcc	.+46     	; 0x22b6 <install+0x34>
        char status;
        DISABLE(status);
    2288:	9f b7       	in	r25, 0x3f	; 63
    228a:	90 78       	andi	r25, 0x80	; 128
    228c:	f8 94       	cli
        otable[i] = obj;
    228e:	50 e0       	ldi	r21, 0x00	; 0
    2290:	44 0f       	add	r20, r20
    2292:	55 1f       	adc	r21, r21
    2294:	da 01       	movw	r26, r20
    2296:	a4 5b       	subi	r26, 0xB4	; 180
    2298:	be 4f       	sbci	r27, 0xFE	; 254
    229a:	ed 93       	st	X+, r30
    229c:	fc 93       	st	X, r31
        mtable[i] = m;
    229e:	da 01       	movw	r26, r20
    22a0:	ac 51       	subi	r26, 0x1C	; 28
    22a2:	be 4f       	sbci	r27, 0xFE	; 254
    22a4:	6d 93       	st	X+, r22
    22a6:	7c 93       	st	X, r23
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    22a8:	21 e0       	ldi	r18, 0x01	; 1
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	33 83       	std	Z+3, r19	; 0x03
    22ae:	22 83       	std	Z+2, r18	; 0x02
        ENABLE(status);
    22b0:	99 23       	and	r25, r25
    22b2:	09 f0       	breq	.+2      	; 0x22b6 <install+0x34>
    22b4:	78 94       	sei
    22b6:	08 95       	ret

000022b8 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    22b8:	8c 01       	movw	r16, r24
    22ba:	7b 01       	movw	r14, r22
    22bc:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    22be:	8f b7       	in	r24, 0x3f	; 63
    22c0:	f8 94       	cli
    initialize();
    22c2:	0e 94 0d 05 	call	0xa1a	; 0xa1a <initialize>
    ENABLE(1);
    22c6:	78 94       	sei
    if (m != NULL)
    22c8:	e1 14       	cp	r14, r1
    22ca:	f1 04       	cpc	r15, r1
    22cc:	41 f0       	breq	.+16     	; 0x22de <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	a9 01       	movw	r20, r18
    22d4:	60 e0       	ldi	r22, 0x00	; 0
    22d6:	70 e0       	ldi	r23, 0x00	; 0
    22d8:	cb 01       	movw	r24, r22
    22da:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <async>
    DISABLE(status);
    22de:	8f b7       	in	r24, 0x3f	; 63
    22e0:	f8 94       	cli
    idle();
    22e2:	0e 94 65 0e 	call	0x1cca	; 0x1cca <idle>

000022e6 <sendSignal>:
#include "TinyTimber.h"
#include <avr/io.h>

int sendSignal(USARTSender *self, int data){
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    22e6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
    22ea:	85 ff       	sbrs	r24, 5
    22ec:	fc cf       	rjmp	.-8      	; 0x22e6 <sendSignal>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    22ee:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
	return 0;
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	08 95       	ret

000022f8 <__divmodhi4>:
    22f8:	97 fb       	bst	r25, 7
    22fa:	07 2e       	mov	r0, r23
    22fc:	16 f4       	brtc	.+4      	; 0x2302 <__divmodhi4+0xa>
    22fe:	00 94       	com	r0
    2300:	07 d0       	rcall	.+14     	; 0x2310 <__divmodhi4_neg1>
    2302:	77 fd       	sbrc	r23, 7
    2304:	09 d0       	rcall	.+18     	; 0x2318 <__divmodhi4_neg2>
    2306:	0e 94 90 11 	call	0x2320	; 0x2320 <__udivmodhi4>
    230a:	07 fc       	sbrc	r0, 7
    230c:	05 d0       	rcall	.+10     	; 0x2318 <__divmodhi4_neg2>
    230e:	3e f4       	brtc	.+14     	; 0x231e <__divmodhi4_exit>

00002310 <__divmodhi4_neg1>:
    2310:	90 95       	com	r25
    2312:	81 95       	neg	r24
    2314:	9f 4f       	sbci	r25, 0xFF	; 255
    2316:	08 95       	ret

00002318 <__divmodhi4_neg2>:
    2318:	70 95       	com	r23
    231a:	61 95       	neg	r22
    231c:	7f 4f       	sbci	r23, 0xFF	; 255

0000231e <__divmodhi4_exit>:
    231e:	08 95       	ret

00002320 <__udivmodhi4>:
    2320:	aa 1b       	sub	r26, r26
    2322:	bb 1b       	sub	r27, r27
    2324:	51 e1       	ldi	r21, 0x11	; 17
    2326:	07 c0       	rjmp	.+14     	; 0x2336 <__udivmodhi4_ep>

00002328 <__udivmodhi4_loop>:
    2328:	aa 1f       	adc	r26, r26
    232a:	bb 1f       	adc	r27, r27
    232c:	a6 17       	cp	r26, r22
    232e:	b7 07       	cpc	r27, r23
    2330:	10 f0       	brcs	.+4      	; 0x2336 <__udivmodhi4_ep>
    2332:	a6 1b       	sub	r26, r22
    2334:	b7 0b       	sbc	r27, r23

00002336 <__udivmodhi4_ep>:
    2336:	88 1f       	adc	r24, r24
    2338:	99 1f       	adc	r25, r25
    233a:	5a 95       	dec	r21
    233c:	a9 f7       	brne	.-22     	; 0x2328 <__udivmodhi4_loop>
    233e:	80 95       	com	r24
    2340:	90 95       	com	r25
    2342:	bc 01       	movw	r22, r24
    2344:	cd 01       	movw	r24, r26
    2346:	08 95       	ret

00002348 <setjmp>:
    2348:	dc 01       	movw	r26, r24
    234a:	2d 92       	st	X+, r2
    234c:	3d 92       	st	X+, r3
    234e:	4d 92       	st	X+, r4
    2350:	5d 92       	st	X+, r5
    2352:	6d 92       	st	X+, r6
    2354:	7d 92       	st	X+, r7
    2356:	8d 92       	st	X+, r8
    2358:	9d 92       	st	X+, r9
    235a:	ad 92       	st	X+, r10
    235c:	bd 92       	st	X+, r11
    235e:	cd 92       	st	X+, r12
    2360:	dd 92       	st	X+, r13
    2362:	ed 92       	st	X+, r14
    2364:	fd 92       	st	X+, r15
    2366:	0d 93       	st	X+, r16
    2368:	1d 93       	st	X+, r17
    236a:	cd 93       	st	X+, r28
    236c:	dd 93       	st	X+, r29
    236e:	ff 91       	pop	r31
    2370:	ef 91       	pop	r30
    2372:	8d b7       	in	r24, 0x3d	; 61
    2374:	8d 93       	st	X+, r24
    2376:	8e b7       	in	r24, 0x3e	; 62
    2378:	8d 93       	st	X+, r24
    237a:	8f b7       	in	r24, 0x3f	; 63
    237c:	8d 93       	st	X+, r24
    237e:	ed 93       	st	X+, r30
    2380:	fd 93       	st	X+, r31
    2382:	88 27       	eor	r24, r24
    2384:	99 27       	eor	r25, r25
    2386:	09 94       	ijmp

00002388 <longjmp>:
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	81 30       	cpi	r24, 0x01	; 1
    238e:	91 05       	cpc	r25, r1
    2390:	81 1d       	adc	r24, r1
    2392:	2d 90       	ld	r2, X+
    2394:	3d 90       	ld	r3, X+
    2396:	4d 90       	ld	r4, X+
    2398:	5d 90       	ld	r5, X+
    239a:	6d 90       	ld	r6, X+
    239c:	7d 90       	ld	r7, X+
    239e:	8d 90       	ld	r8, X+
    23a0:	9d 90       	ld	r9, X+
    23a2:	ad 90       	ld	r10, X+
    23a4:	bd 90       	ld	r11, X+
    23a6:	cd 90       	ld	r12, X+
    23a8:	dd 90       	ld	r13, X+
    23aa:	ed 90       	ld	r14, X+
    23ac:	fd 90       	ld	r15, X+
    23ae:	0d 91       	ld	r16, X+
    23b0:	1d 91       	ld	r17, X+
    23b2:	cd 91       	ld	r28, X+
    23b4:	dd 91       	ld	r29, X+
    23b6:	ed 91       	ld	r30, X+
    23b8:	fd 91       	ld	r31, X+
    23ba:	0d 90       	ld	r0, X+
    23bc:	f8 94       	cli
    23be:	fe bf       	out	0x3e, r31	; 62
    23c0:	0f be       	out	0x3f, r0	; 63
    23c2:	ed bf       	out	0x3d, r30	; 61
    23c4:	ed 91       	ld	r30, X+
    23c6:	fd 91       	ld	r31, X+
    23c8:	09 94       	ijmp

000023ca <_exit>:
    23ca:	f8 94       	cli

000023cc <__stop_program>:
    23cc:	ff cf       	rjmp	.-2      	; 0x23cc <__stop_program>
