
Lab3-Proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  0000064e  000006e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000064e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000227  00800134  00800134  00000716  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000716  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000748  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012fa  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c1e  00000000  00000000  00001b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000086d  00000000  00000000  000027a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  00003018  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005df  00000000  00000000  000032c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000087e  00000000  00000000  000038a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00004121  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ee e4       	ldi	r30, 0x4E	; 78
  70:	f6 e0       	ldi	r31, 0x06	; 6
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a4 33       	cpi	r26, 0x34	; 52
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a4 e3       	ldi	r26, 0x34	; 52
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	ab 35       	cpi	r26, 0x5B	; 91
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <main>
  92:	0c 94 25 03 	jmp	0x64a	; 0x64a <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <LCD_Init>:

void LCD_update(unsigned char data1, unsigned char data2){
	/* LCD Blanking and Low power waveform are unchanged. */
	/* Update Display memory. */
	LCDDR0 = data1;
	LCDDR6 = data2;
  9a:	87 eb       	ldi	r24, 0xB7	; 183
  9c:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
  a0:	87 e0       	ldi	r24, 0x07	; 7
  a2:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
  a6:	8e e2       	ldi	r24, 0x2E	; 46
  a8:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
  ac:	80 e8       	ldi	r24, 0x80	; 128
  ae:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
  b2:	08 95       	ret

000000b4 <writeChar>:
};


void writeChar(char ch, int pos){
	/* Returns if given input is not possible to print */
	if(pos < 0 || pos > 5 || ch < 48 || ch > 57){
  b4:	66 30       	cpi	r22, 0x06	; 6
  b6:	71 05       	cpc	r23, r1
  b8:	08 f0       	brcs	.+2      	; 0xbc <writeChar+0x8>
  ba:	6e c0       	rjmp	.+220    	; 0x198 <writeChar+0xe4>
  bc:	80 33       	cpi	r24, 0x30	; 48
  be:	08 f4       	brcc	.+2      	; 0xc2 <writeChar+0xe>
  c0:	6b c0       	rjmp	.+214    	; 0x198 <writeChar+0xe4>
  c2:	8a 33       	cpi	r24, 0x3A	; 58
  c4:	08 f0       	brcs	.+2      	; 0xc8 <writeChar+0x14>
  c6:	68 c0       	rjmp	.+208    	; 0x198 <writeChar+0xe4>
		return;
	}
	volatile uint8_t *lcd_base = &LCDDR0 + offsetPos[pos];
  c8:	fb 01       	movw	r30, r22
  ca:	e0 50       	subi	r30, 0x00	; 0
  cc:	ff 4f       	sbci	r31, 0xFF	; 255
  ce:	e0 81       	ld	r30, Z
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	e4 51       	subi	r30, 0x14	; 20
  d4:	ff 4f       	sbci	r31, 0xFF	; 255
	
	int number = (int)ch - 48;
  d6:	a8 2f       	mov	r26, r24
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	d0 97       	sbiw	r26, 0x30	; 48
	int shift = 0;
	/*Clears the part of the display we want to write onto */
	if (pos % 2 == 1){
  dc:	61 70       	andi	r22, 0x01	; 1
  de:	70 78       	andi	r23, 0x80	; 128
  e0:	77 23       	and	r23, r23
  e2:	34 f4       	brge	.+12     	; 0xf0 <writeChar+0x3c>
  e4:	61 50       	subi	r22, 0x01	; 1
  e6:	71 09       	sbc	r23, r1
  e8:	6e 6f       	ori	r22, 0xFE	; 254
  ea:	7f 6f       	ori	r23, 0xFF	; 255
  ec:	6f 5f       	subi	r22, 0xFF	; 255
  ee:	7f 4f       	sbci	r23, 0xFF	; 255
  f0:	61 30       	cpi	r22, 0x01	; 1
  f2:	71 05       	cpc	r23, r1
  f4:	71 f4       	brne	.+28     	; 0x112 <writeChar+0x5e>
		shift = 4;
		lcd_base[0]  = lcd_base[0]  & 0x0F;
  f6:	80 81       	ld	r24, Z
  f8:	8f 70       	andi	r24, 0x0F	; 15
  fa:	80 83       	st	Z, r24
		lcd_base[5]  = lcd_base[5]  & 0x0F;
  fc:	85 81       	ldd	r24, Z+5	; 0x05
  fe:	8f 70       	andi	r24, 0x0F	; 15
 100:	85 83       	std	Z+5, r24	; 0x05
		lcd_base[10] = lcd_base[10] & 0x0F;
 102:	82 85       	ldd	r24, Z+10	; 0x0a
 104:	8f 70       	andi	r24, 0x0F	; 15
 106:	82 87       	std	Z+10, r24	; 0x0a
		lcd_base[15] = lcd_base[15] & 0x0F;
 108:	87 85       	ldd	r24, Z+15	; 0x0f
 10a:	8f 70       	andi	r24, 0x0F	; 15
 10c:	87 87       	std	Z+15, r24	; 0x0f
	
	int number = (int)ch - 48;
	int shift = 0;
	/*Clears the part of the display we want to write onto */
	if (pos % 2 == 1){
		shift = 4;
 10e:	24 e0       	ldi	r18, 0x04	; 4
 110:	0d c0       	rjmp	.+26     	; 0x12c <writeChar+0x78>
		lcd_base[0]  = lcd_base[0]  & 0x0F;
		lcd_base[5]  = lcd_base[5]  & 0x0F;
		lcd_base[10] = lcd_base[10] & 0x0F;
		lcd_base[15] = lcd_base[15] & 0x0F;
		}else{
		lcd_base[0]  = lcd_base[0]  & 0xF0;
 112:	80 81       	ld	r24, Z
 114:	80 7f       	andi	r24, 0xF0	; 240
 116:	80 83       	st	Z, r24
		lcd_base[5]  = lcd_base[5]  & 0xF0;
 118:	85 81       	ldd	r24, Z+5	; 0x05
 11a:	80 7f       	andi	r24, 0xF0	; 240
 11c:	85 83       	std	Z+5, r24	; 0x05
		lcd_base[10] = lcd_base[10] & 0xF0;
 11e:	82 85       	ldd	r24, Z+10	; 0x0a
 120:	80 7f       	andi	r24, 0xF0	; 240
 122:	82 87       	std	Z+10, r24	; 0x0a
		lcd_base[15] = lcd_base[15] & 0xF0;
 124:	87 85       	ldd	r24, Z+15	; 0x0f
 126:	80 7f       	andi	r24, 0xF0	; 240
 128:	87 87       	std	Z+15, r24	; 0x0f
		return;
	}
	volatile uint8_t *lcd_base = &LCDDR0 + offsetPos[pos];
	
	int number = (int)ch - 48;
	int shift = 0;
 12a:	20 e0       	ldi	r18, 0x00	; 0
		lcd_base[5]  = lcd_base[5]  & 0xF0;
		lcd_base[10] = lcd_base[10] & 0xF0;
		lcd_base[15] = lcd_base[15] & 0xF0;
	}
	/*Writes to the display*/
	lcd_base[0]  = charCodes[number][0]<<shift | lcd_base[0] ;
 12c:	aa 0f       	add	r26, r26
 12e:	bb 1f       	adc	r27, r27
 130:	aa 0f       	add	r26, r26
 132:	bb 1f       	adc	r27, r27
 134:	a4 5f       	subi	r26, 0xF4	; 244
 136:	be 4f       	sbci	r27, 0xFE	; 254
 138:	8c 91       	ld	r24, X
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 2e       	mov	r0, r18
 13e:	02 c0       	rjmp	.+4      	; 0x144 <writeChar+0x90>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	0a 94       	dec	r0
 146:	e2 f7       	brpl	.-8      	; 0x140 <writeChar+0x8c>
 148:	90 81       	ld	r25, Z
 14a:	89 2b       	or	r24, r25
 14c:	80 83       	st	Z, r24
	lcd_base[5]  = charCodes[number][1]<<shift | lcd_base[5] ;
 14e:	11 96       	adiw	r26, 0x01	; 1
 150:	8c 91       	ld	r24, X
 152:	11 97       	sbiw	r26, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 2e       	mov	r0, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <writeChar+0xaa>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <writeChar+0xa6>
 162:	95 81       	ldd	r25, Z+5	; 0x05
 164:	89 2b       	or	r24, r25
 166:	85 83       	std	Z+5, r24	; 0x05
	lcd_base[10] = charCodes[number][2]<<shift | lcd_base[10];
 168:	12 96       	adiw	r26, 0x02	; 2
 16a:	8c 91       	ld	r24, X
 16c:	12 97       	sbiw	r26, 0x02	; 2
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 2e       	mov	r0, r18
 172:	02 c0       	rjmp	.+4      	; 0x178 <writeChar+0xc4>
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	0a 94       	dec	r0
 17a:	e2 f7       	brpl	.-8      	; 0x174 <writeChar+0xc0>
 17c:	92 85       	ldd	r25, Z+10	; 0x0a
 17e:	89 2b       	or	r24, r25
 180:	82 87       	std	Z+10, r24	; 0x0a
	lcd_base[15] = charCodes[number][3]<<shift | lcd_base[15];
 182:	13 96       	adiw	r26, 0x03	; 3
 184:	8c 91       	ld	r24, X
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <writeChar+0xda>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	2a 95       	dec	r18
 190:	e2 f7       	brpl	.-8      	; 0x18a <writeChar+0xd6>
 192:	97 85       	ldd	r25, Z+15	; 0x0f
 194:	89 2b       	or	r24, r25
 196:	87 87       	std	Z+15, r24	; 0x0f
 198:	08 95       	ret

0000019a <CLK_Init>:
    while(1){
        while (getCount() < 10){
        }
        LCDDR18 ^= 1;
        resetCount();
    }
 19a:	e1 e6       	ldi	r30, 0x61	; 97
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 e8       	ldi	r24, 0x80	; 128
 1a0:	80 83       	st	Z, r24
 1a2:	10 82       	st	Z, r1
 1a4:	08 95       	ret

000001a6 <BUTTON_Init>:
 1a6:	85 b1       	in	r24, 0x05	; 5
 1a8:	80 68       	ori	r24, 0x80	; 128
 1aa:	85 b9       	out	0x05, r24	; 5
 1ac:	80 e8       	ldi	r24, 0x80	; 128
 1ae:	84 b9       	out	0x04, r24	; 4
 1b0:	08 95       	ret

000001b2 <init>:
 1b2:	0e 94 cd 00 	call	0x19a	; 0x19a <CLK_Init>
 1b6:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_Init>
 1ba:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <BUTTON_Init>
 1be:	08 95       	ret

000001c0 <printAt>:
 1c0:	cf 92       	push	r12
 1c2:	df 92       	push	r13
 1c4:	ef 92       	push	r14
 1c6:	ff 92       	push	r15
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	6b 01       	movw	r12, r22
 1ce:	7c 01       	movw	r14, r24
 1d0:	ea 01       	movw	r28, r20
 1d2:	24 e6       	ldi	r18, 0x64	; 100
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	40 e0       	ldi	r20, 0x00	; 0
 1d8:	50 e0       	ldi	r21, 0x00	; 0
 1da:	0e 94 a3 02 	call	0x546	; 0x546 <__divmodsi4>
 1de:	2a e0       	ldi	r18, 0x0A	; 10
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	40 e0       	ldi	r20, 0x00	; 0
 1e4:	50 e0       	ldi	r21, 0x00	; 0
 1e6:	0e 94 a3 02 	call	0x546	; 0x546 <__divmodsi4>
 1ea:	be 01       	movw	r22, r28
 1ec:	80 e3       	ldi	r24, 0x30	; 48
 1ee:	82 0f       	add	r24, r18
 1f0:	0e 94 5a 00 	call	0xb4	; 0xb4 <writeChar>
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	01 c0       	rjmp	.+2      	; 0x1fc <printAt+0x3c>
 1fa:	01 96       	adiw	r24, 0x01	; 1
 1fc:	88 3e       	cpi	r24, 0xE8	; 232
 1fe:	23 e0       	ldi	r18, 0x03	; 3
 200:	92 07       	cpc	r25, r18
 202:	dc f3       	brlt	.-10     	; 0x1fa <printAt+0x3a>
 204:	21 96       	adiw	r28, 0x01	; 1
 206:	c7 01       	movw	r24, r14
 208:	b6 01       	movw	r22, r12
 20a:	2a e0       	ldi	r18, 0x0A	; 10
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	40 e0       	ldi	r20, 0x00	; 0
 210:	50 e0       	ldi	r21, 0x00	; 0
 212:	0e 94 a3 02 	call	0x546	; 0x546 <__divmodsi4>
 216:	86 2f       	mov	r24, r22
 218:	be 01       	movw	r22, r28
 21a:	80 5d       	subi	r24, 0xD0	; 208
 21c:	0e 94 5a 00 	call	0xb4	; 0xb4 <writeChar>
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	ff 90       	pop	r15
 226:	ef 90       	pop	r14
 228:	df 90       	pop	r13
 22a:	cf 90       	pop	r12
 22c:	08 95       	ret

0000022e <button>:
 22e:	c1 2c       	mov	r12, r1
 230:	d1 2c       	mov	r13, r1
 232:	76 01       	movw	r14, r12
 234:	43 e0       	ldi	r20, 0x03	; 3
 236:	50 e0       	ldi	r21, 0x00	; 0
 238:	c7 01       	movw	r24, r14
 23a:	b6 01       	movw	r22, r12
 23c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <printAt>
 240:	1f 9b       	sbis	0x03, 7	; 3
 242:	fe cf       	rjmp	.-4      	; 0x240 <button+0x12>
 244:	1f 99       	sbic	0x03, 7	; 3
 246:	fe cf       	rjmp	.-4      	; 0x244 <button+0x16>
 248:	8f ef       	ldi	r24, 0xFF	; 255
 24a:	c8 1a       	sub	r12, r24
 24c:	d8 0a       	sbc	r13, r24
 24e:	e8 0a       	sbc	r14, r24
 250:	f8 0a       	sbc	r15, r24
 252:	f0 cf       	rjmp	.-32     	; 0x234 <button+0x6>

00000254 <is_prime>:
}

bool is_prime(long i){
 254:	8f 92       	push	r8
 256:	9f 92       	push	r9
 258:	af 92       	push	r10
 25a:	bf 92       	push	r11
 25c:	cf 92       	push	r12
 25e:	df 92       	push	r13
 260:	ef 92       	push	r14
 262:	ff 92       	push	r15
 264:	4b 01       	movw	r8, r22
 266:	5c 01       	movw	r10, r24
    for(long j = 2; j<i; j++){
 268:	c1 2c       	mov	r12, r1
 26a:	d1 2c       	mov	r13, r1
 26c:	76 01       	movw	r14, r12
 26e:	68 94       	set
 270:	c1 f8       	bld	r12, 1
 272:	0f c0       	rjmp	.+30     	; 0x292 <is_prime+0x3e>
        if (i % j == 0){
 274:	c5 01       	movw	r24, r10
 276:	b4 01       	movw	r22, r8
 278:	a7 01       	movw	r20, r14
 27a:	96 01       	movw	r18, r12
 27c:	0e 94 a3 02 	call	0x546	; 0x546 <__divmodsi4>
 280:	67 2b       	or	r22, r23
 282:	68 2b       	or	r22, r24
 284:	69 2b       	or	r22, r25
 286:	61 f0       	breq	.+24     	; 0x2a0 <is_prime+0x4c>
        resetCount();
    }
}

bool is_prime(long i){
    for(long j = 2; j<i; j++){
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	c8 1a       	sub	r12, r24
 28c:	d8 0a       	sbc	r13, r24
 28e:	e8 0a       	sbc	r14, r24
 290:	f8 0a       	sbc	r15, r24
 292:	c8 14       	cp	r12, r8
 294:	d9 04       	cpc	r13, r9
 296:	ea 04       	cpc	r14, r10
 298:	fb 04       	cpc	r15, r11
 29a:	64 f3       	brlt	.-40     	; 0x274 <is_prime+0x20>
        if (i % j == 0){
            return false;
        }
    }
    return true;
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	01 c0       	rjmp	.+2      	; 0x2a2 <is_prime+0x4e>
}

bool is_prime(long i){
    for(long j = 2; j<i; j++){
        if (i % j == 0){
            return false;
 2a0:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
    return true;
}
 2a2:	ff 90       	pop	r15
 2a4:	ef 90       	pop	r14
 2a6:	df 90       	pop	r13
 2a8:	cf 90       	pop	r12
 2aa:	bf 90       	pop	r11
 2ac:	af 90       	pop	r10
 2ae:	9f 90       	pop	r9
 2b0:	8f 90       	pop	r8
 2b2:	08 95       	ret

000002b4 <computePrimes>:

void computePrimes(int pos) {
 2b4:	ec 01       	movw	r28, r24
	/*Goes through and calculates prime numbers*/
	long n;
	for(n = 1; ; n++) {
 2b6:	c1 2c       	mov	r12, r1
 2b8:	d1 2c       	mov	r13, r1
 2ba:	76 01       	movw	r14, r12
 2bc:	c3 94       	inc	r12
		if (is_prime(n)) {
 2be:	c7 01       	movw	r24, r14
 2c0:	b6 01       	movw	r22, r12
 2c2:	0e 94 2a 01 	call	0x254	; 0x254 <is_prime>
 2c6:	88 23       	and	r24, r24
 2c8:	29 f0       	breq	.+10     	; 0x2d4 <computePrimes+0x20>
			printAt(n, pos);
 2ca:	ae 01       	movw	r20, r28
 2cc:	c7 01       	movw	r24, r14
 2ce:	b6 01       	movw	r22, r12
 2d0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <printAt>
}

void computePrimes(int pos) {
	/*Goes through and calculates prime numbers*/
	long n;
	for(n = 1; ; n++) {
 2d4:	8f ef       	ldi	r24, 0xFF	; 255
 2d6:	c8 1a       	sub	r12, r24
 2d8:	d8 0a       	sbc	r13, r24
 2da:	e8 0a       	sbc	r14, r24
 2dc:	f8 0a       	sbc	r15, r24
		if (is_prime(n)) {
			printAt(n, pos);
		}
	}
 2de:	ef cf       	rjmp	.-34     	; 0x2be <computePrimes+0xa>

000002e0 <main>:



int main(void)
{    
    init();
 2e0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <init>
    /* Replace with your application code */
	
    spawn(computePrimes, 0);
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	8a e5       	ldi	r24, 0x5A	; 90
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	0e 94 07 02 	call	0x40e	; 0x40e <spawn>
	button();
 2f0:	0e 94 17 01 	call	0x22e	; 0x22e <button>

000002f4 <initialize>:
int getCount(){
    return count;
}

void resetCount(){
    count = 0;
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	15 c0       	rjmp	.+42     	; 0x324 <initialize+0x30>
 2fa:	ac 01       	movw	r20, r24
 2fc:	4f 5f       	subi	r20, 0xFF	; 255
 2fe:	5f 4f       	sbci	r21, 0xFF	; 255
 300:	6d e6       	ldi	r22, 0x6D	; 109
 302:	64 9f       	mul	r22, r20
 304:	90 01       	movw	r18, r0
 306:	65 9f       	mul	r22, r21
 308:	30 0d       	add	r19, r0
 30a:	11 24       	eor	r1, r1
 30c:	29 55       	subi	r18, 0x59	; 89
 30e:	3e 4f       	sbci	r19, 0xFE	; 254
 310:	68 9f       	mul	r22, r24
 312:	f0 01       	movw	r30, r0
 314:	69 9f       	mul	r22, r25
 316:	f0 0d       	add	r31, r0
 318:	11 24       	eor	r1, r1
 31a:	e9 55       	subi	r30, 0x59	; 89
 31c:	fe 4f       	sbci	r31, 0xFE	; 254
 31e:	35 83       	std	Z+5, r19	; 0x05
 320:	24 83       	std	Z+4, r18	; 0x04
 322:	ca 01       	movw	r24, r20
 324:	83 30       	cpi	r24, 0x03	; 3
 326:	91 05       	cpc	r25, r1
 328:	44 f3       	brlt	.-48     	; 0x2fa <initialize+0x6>
 32a:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <threads+0x14c>
 32e:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <threads+0x14b>
 332:	8d b3       	in	r24, 0x1d	; 29
 334:	80 68       	ori	r24, 0x80	; 128
 336:	8d bb       	out	0x1d, r24	; 29
 338:	ec e6       	ldi	r30, 0x6C	; 108
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	80 68       	ori	r24, 0x80	; 128
 340:	80 83       	st	Z, r24
 342:	e0 e8       	ldi	r30, 0x80	; 128
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	80 6c       	ori	r24, 0xC0	; 192
 34a:	80 83       	st	Z, r24
 34c:	e1 e8       	ldi	r30, 0x81	; 129
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	80 81       	ld	r24, Z
 352:	8d 60       	ori	r24, 0x0D	; 13
 354:	80 83       	st	Z, r24
 356:	ef e6       	ldi	r30, 0x6F	; 111
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	82 60       	ori	r24, 0x02	; 2
 35e:	80 83       	st	Z, r24
 360:	f8 94       	cli
 362:	87 e8       	ldi	r24, 0x87	; 135
 364:	91 e0       	ldi	r25, 0x01	; 1
 366:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
 36a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
 36e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 372:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 376:	78 94       	sei
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <initialized+0x1>
 380:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <initialized>
 384:	08 95       	ret

00000386 <enqueue>:
 386:	dc 01       	movw	r26, r24
 388:	15 96       	adiw	r26, 0x05	; 5
 38a:	1c 92       	st	X, r1
 38c:	1e 92       	st	-X, r1
 38e:	14 97       	sbiw	r26, 0x04	; 4
 390:	db 01       	movw	r26, r22
 392:	ed 91       	ld	r30, X+
 394:	fc 91       	ld	r31, X
 396:	11 97       	sbiw	r26, 0x01	; 1
 398:	30 97       	sbiw	r30, 0x00	; 0
 39a:	21 f4       	brne	.+8      	; 0x3a4 <enqueue+0x1e>
 39c:	8d 93       	st	X+, r24
 39e:	9c 93       	st	X, r25
 3a0:	08 95       	ret
 3a2:	f9 01       	movw	r30, r18
 3a4:	24 81       	ldd	r18, Z+4	; 0x04
 3a6:	35 81       	ldd	r19, Z+5	; 0x05
 3a8:	21 15       	cp	r18, r1
 3aa:	31 05       	cpc	r19, r1
 3ac:	d1 f7       	brne	.-12     	; 0x3a2 <enqueue+0x1c>
 3ae:	95 83       	std	Z+5, r25	; 0x05
 3b0:	84 83       	std	Z+4, r24	; 0x04
 3b2:	08 95       	ret

000003b4 <dequeue>:
 3b4:	dc 01       	movw	r26, r24
 3b6:	ed 91       	ld	r30, X+
 3b8:	fc 91       	ld	r31, X
 3ba:	11 97       	sbiw	r26, 0x01	; 1
 3bc:	30 97       	sbiw	r30, 0x00	; 0
 3be:	09 f4       	brne	.+2      	; 0x3c2 <dequeue+0xe>
 3c0:	ff cf       	rjmp	.-2      	; 0x3c0 <dequeue+0xc>
 3c2:	24 81       	ldd	r18, Z+4	; 0x04
 3c4:	35 81       	ldd	r19, Z+5	; 0x05
 3c6:	2d 93       	st	X+, r18
 3c8:	3c 93       	st	X, r19
 3ca:	cf 01       	movw	r24, r30
 3cc:	08 95       	ret

000003ce <dispatch>:
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	00 d0       	rcall	.+0      	; 0x3d4 <dispatch+0x6>
 3d4:	cd b7       	in	r28, 0x3d	; 61
 3d6:	de b7       	in	r29, 0x3e	; 62
 3d8:	9a 83       	std	Y+2, r25	; 0x02
 3da:	89 83       	std	Y+1, r24	; 0x01
 3dc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <current>
 3e0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <current+0x1>
 3e4:	06 96       	adiw	r24, 0x06	; 6
 3e6:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <setjmp>
 3ea:	89 2b       	or	r24, r25
 3ec:	59 f4       	brne	.+22     	; 0x404 <__DATA_REGION_LENGTH__+0x4>
 3ee:	89 81       	ldd	r24, Y+1	; 0x01
 3f0:	9a 81       	ldd	r25, Y+2	; 0x02
 3f2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <current+0x1>
 3f6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <current>
 3fa:	61 e0       	ldi	r22, 0x01	; 1
 3fc:	70 e0       	ldi	r23, 0x00	; 0
 3fe:	06 96       	adiw	r24, 0x06	; 6
 400:	0e 94 04 03 	call	0x608	; 0x608 <longjmp>
 404:	0f 90       	pop	r0
 406:	0f 90       	pop	r0
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	08 95       	ret

0000040e <spawn>:
 40e:	ef 92       	push	r14
 410:	ff 92       	push	r15
 412:	0f 93       	push	r16
 414:	1f 93       	push	r17
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	00 d0       	rcall	.+0      	; 0x41c <spawn+0xe>
 41c:	cd b7       	in	r28, 0x3d	; 61
 41e:	de b7       	in	r29, 0x3e	; 62
 420:	7c 01       	movw	r14, r24
 422:	8b 01       	movw	r16, r22
 424:	f8 94       	cli
 426:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <initialized>
 42a:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <initialized+0x1>
 42e:	89 2b       	or	r24, r25
 430:	11 f4       	brne	.+4      	; 0x436 <spawn+0x28>
 432:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <initialize>
 436:	8a e0       	ldi	r24, 0x0A	; 10
 438:	91 e0       	ldi	r25, 0x01	; 1
 43a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <dequeue>
 43e:	9a 83       	std	Y+2, r25	; 0x02
 440:	89 83       	std	Y+1, r24	; 0x01
 442:	fc 01       	movw	r30, r24
 444:	f1 82       	std	Z+1, r15	; 0x01
 446:	e0 82       	st	Z, r14
 448:	13 83       	std	Z+3, r17	; 0x03
 44a:	02 83       	std	Z+2, r16	; 0x02
 44c:	15 82       	std	Z+5, r1	; 0x05
 44e:	14 82       	std	Z+4, r1	; 0x04
 450:	06 96       	adiw	r24, 0x06	; 6
 452:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <setjmp>
 456:	01 97       	sbiw	r24, 0x01	; 1
 458:	e1 f4       	brne	.+56     	; 0x492 <spawn+0x84>
 45a:	78 94       	sei
 45c:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <current>
 460:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <current+0x1>
 464:	ed 91       	ld	r30, X+
 466:	fc 91       	ld	r31, X
 468:	11 97       	sbiw	r26, 0x01	; 1
 46a:	12 96       	adiw	r26, 0x02	; 2
 46c:	8d 91       	ld	r24, X+
 46e:	9c 91       	ld	r25, X
 470:	13 97       	sbiw	r26, 0x03	; 3
 472:	09 95       	icall
 474:	f8 94       	cli
 476:	6a e0       	ldi	r22, 0x0A	; 10
 478:	71 e0       	ldi	r23, 0x01	; 1
 47a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <current>
 47e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <current+0x1>
 482:	0e 94 c3 01 	call	0x386	; 0x386 <enqueue>
 486:	88 e3       	ldi	r24, 0x38	; 56
 488:	91 e0       	ldi	r25, 0x01	; 1
 48a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <dequeue>
 48e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <dispatch>
 492:	e9 81       	ldd	r30, Y+1	; 0x01
 494:	fa 81       	ldd	r31, Y+2	; 0x02
 496:	36 96       	adiw	r30, 0x06	; 6
 498:	89 81       	ldd	r24, Y+1	; 0x01
 49a:	9a 81       	ldd	r25, Y+2	; 0x02
 49c:	87 59       	subi	r24, 0x97	; 151
 49e:	9f 4f       	sbci	r25, 0xFF	; 255
 4a0:	91 8b       	std	Z+17, r25	; 0x11
 4a2:	80 8b       	std	Z+16, r24	; 0x10
 4a4:	e9 81       	ldd	r30, Y+1	; 0x01
 4a6:	fa 81       	ldd	r31, Y+2	; 0x02
 4a8:	91 8f       	std	Z+25, r25	; 0x19
 4aa:	80 8f       	std	Z+24, r24	; 0x18
 4ac:	68 e3       	ldi	r22, 0x38	; 56
 4ae:	71 e0       	ldi	r23, 0x01	; 1
 4b0:	cf 01       	movw	r24, r30
 4b2:	0e 94 c3 01 	call	0x386	; 0x386 <enqueue>
 4b6:	78 94       	sei
 4b8:	0f 90       	pop	r0
 4ba:	0f 90       	pop	r0
 4bc:	df 91       	pop	r29
 4be:	cf 91       	pop	r28
 4c0:	1f 91       	pop	r17
 4c2:	0f 91       	pop	r16
 4c4:	ff 90       	pop	r15
 4c6:	ef 90       	pop	r14
 4c8:	08 95       	ret

000004ca <yield>:
 4ca:	f8 94       	cli
 4cc:	68 e3       	ldi	r22, 0x38	; 56
 4ce:	71 e0       	ldi	r23, 0x01	; 1
 4d0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <current>
 4d4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <current+0x1>
 4d8:	0e 94 c3 01 	call	0x386	; 0x386 <enqueue>
 4dc:	88 e3       	ldi	r24, 0x38	; 56
 4de:	91 e0       	ldi	r25, 0x01	; 1
 4e0:	0e 94 da 01 	call	0x3b4	; 0x3b4 <dequeue>
 4e4:	0e 94 e7 01 	call	0x3ce	; 0x3ce <dispatch>
 4e8:	78 94       	sei
 4ea:	08 95       	ret

000004ec <__vector_7>:
}

ISR(TIMER1_COMPA_vect){
 4ec:	1f 92       	push	r1
 4ee:	0f 92       	push	r0
 4f0:	0f b6       	in	r0, 0x3f	; 63
 4f2:	0f 92       	push	r0
 4f4:	11 24       	eor	r1, r1
 4f6:	2f 93       	push	r18
 4f8:	3f 93       	push	r19
 4fa:	4f 93       	push	r20
 4fc:	5f 93       	push	r21
 4fe:	6f 93       	push	r22
 500:	7f 93       	push	r23
 502:	8f 93       	push	r24
 504:	9f 93       	push	r25
 506:	af 93       	push	r26
 508:	bf 93       	push	r27
 50a:	ef 93       	push	r30
 50c:	ff 93       	push	r31
    count++;
 50e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
 512:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
 516:	01 96       	adiw	r24, 0x01	; 1
 518:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__data_end+0x1>
 51c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__data_end>
    yield();
 520:	0e 94 65 02 	call	0x4ca	; 0x4ca <yield>
 524:	ff 91       	pop	r31
 526:	ef 91       	pop	r30
 528:	bf 91       	pop	r27
 52a:	af 91       	pop	r26
 52c:	9f 91       	pop	r25
 52e:	8f 91       	pop	r24
 530:	7f 91       	pop	r23
 532:	6f 91       	pop	r22
 534:	5f 91       	pop	r21
 536:	4f 91       	pop	r20
 538:	3f 91       	pop	r19
 53a:	2f 91       	pop	r18
 53c:	0f 90       	pop	r0
 53e:	0f be       	out	0x3f, r0	; 63
 540:	0f 90       	pop	r0
 542:	1f 90       	pop	r1
 544:	18 95       	reti

00000546 <__divmodsi4>:
 546:	05 2e       	mov	r0, r21
 548:	97 fb       	bst	r25, 7
 54a:	1e f4       	brtc	.+6      	; 0x552 <__divmodsi4+0xc>
 54c:	00 94       	com	r0
 54e:	0e 94 ba 02 	call	0x574	; 0x574 <__negsi2>
 552:	57 fd       	sbrc	r21, 7
 554:	07 d0       	rcall	.+14     	; 0x564 <__divmodsi4_neg2>
 556:	0e 94 c2 02 	call	0x584	; 0x584 <__udivmodsi4>
 55a:	07 fc       	sbrc	r0, 7
 55c:	03 d0       	rcall	.+6      	; 0x564 <__divmodsi4_neg2>
 55e:	4e f4       	brtc	.+18     	; 0x572 <__divmodsi4_exit>
 560:	0c 94 ba 02 	jmp	0x574	; 0x574 <__negsi2>

00000564 <__divmodsi4_neg2>:
 564:	50 95       	com	r21
 566:	40 95       	com	r20
 568:	30 95       	com	r19
 56a:	21 95       	neg	r18
 56c:	3f 4f       	sbci	r19, 0xFF	; 255
 56e:	4f 4f       	sbci	r20, 0xFF	; 255
 570:	5f 4f       	sbci	r21, 0xFF	; 255

00000572 <__divmodsi4_exit>:
 572:	08 95       	ret

00000574 <__negsi2>:
 574:	90 95       	com	r25
 576:	80 95       	com	r24
 578:	70 95       	com	r23
 57a:	61 95       	neg	r22
 57c:	7f 4f       	sbci	r23, 0xFF	; 255
 57e:	8f 4f       	sbci	r24, 0xFF	; 255
 580:	9f 4f       	sbci	r25, 0xFF	; 255
 582:	08 95       	ret

00000584 <__udivmodsi4>:
 584:	a1 e2       	ldi	r26, 0x21	; 33
 586:	1a 2e       	mov	r1, r26
 588:	aa 1b       	sub	r26, r26
 58a:	bb 1b       	sub	r27, r27
 58c:	fd 01       	movw	r30, r26
 58e:	0d c0       	rjmp	.+26     	; 0x5aa <__udivmodsi4_ep>

00000590 <__udivmodsi4_loop>:
 590:	aa 1f       	adc	r26, r26
 592:	bb 1f       	adc	r27, r27
 594:	ee 1f       	adc	r30, r30
 596:	ff 1f       	adc	r31, r31
 598:	a2 17       	cp	r26, r18
 59a:	b3 07       	cpc	r27, r19
 59c:	e4 07       	cpc	r30, r20
 59e:	f5 07       	cpc	r31, r21
 5a0:	20 f0       	brcs	.+8      	; 0x5aa <__udivmodsi4_ep>
 5a2:	a2 1b       	sub	r26, r18
 5a4:	b3 0b       	sbc	r27, r19
 5a6:	e4 0b       	sbc	r30, r20
 5a8:	f5 0b       	sbc	r31, r21

000005aa <__udivmodsi4_ep>:
 5aa:	66 1f       	adc	r22, r22
 5ac:	77 1f       	adc	r23, r23
 5ae:	88 1f       	adc	r24, r24
 5b0:	99 1f       	adc	r25, r25
 5b2:	1a 94       	dec	r1
 5b4:	69 f7       	brne	.-38     	; 0x590 <__udivmodsi4_loop>
 5b6:	60 95       	com	r22
 5b8:	70 95       	com	r23
 5ba:	80 95       	com	r24
 5bc:	90 95       	com	r25
 5be:	9b 01       	movw	r18, r22
 5c0:	ac 01       	movw	r20, r24
 5c2:	bd 01       	movw	r22, r26
 5c4:	cf 01       	movw	r24, r30
 5c6:	08 95       	ret

000005c8 <setjmp>:
 5c8:	dc 01       	movw	r26, r24
 5ca:	2d 92       	st	X+, r2
 5cc:	3d 92       	st	X+, r3
 5ce:	4d 92       	st	X+, r4
 5d0:	5d 92       	st	X+, r5
 5d2:	6d 92       	st	X+, r6
 5d4:	7d 92       	st	X+, r7
 5d6:	8d 92       	st	X+, r8
 5d8:	9d 92       	st	X+, r9
 5da:	ad 92       	st	X+, r10
 5dc:	bd 92       	st	X+, r11
 5de:	cd 92       	st	X+, r12
 5e0:	dd 92       	st	X+, r13
 5e2:	ed 92       	st	X+, r14
 5e4:	fd 92       	st	X+, r15
 5e6:	0d 93       	st	X+, r16
 5e8:	1d 93       	st	X+, r17
 5ea:	cd 93       	st	X+, r28
 5ec:	dd 93       	st	X+, r29
 5ee:	ff 91       	pop	r31
 5f0:	ef 91       	pop	r30
 5f2:	8d b7       	in	r24, 0x3d	; 61
 5f4:	8d 93       	st	X+, r24
 5f6:	8e b7       	in	r24, 0x3e	; 62
 5f8:	8d 93       	st	X+, r24
 5fa:	8f b7       	in	r24, 0x3f	; 63
 5fc:	8d 93       	st	X+, r24
 5fe:	ed 93       	st	X+, r30
 600:	fd 93       	st	X+, r31
 602:	88 27       	eor	r24, r24
 604:	99 27       	eor	r25, r25
 606:	09 94       	ijmp

00000608 <longjmp>:
 608:	dc 01       	movw	r26, r24
 60a:	cb 01       	movw	r24, r22
 60c:	81 30       	cpi	r24, 0x01	; 1
 60e:	91 05       	cpc	r25, r1
 610:	81 1d       	adc	r24, r1
 612:	2d 90       	ld	r2, X+
 614:	3d 90       	ld	r3, X+
 616:	4d 90       	ld	r4, X+
 618:	5d 90       	ld	r5, X+
 61a:	6d 90       	ld	r6, X+
 61c:	7d 90       	ld	r7, X+
 61e:	8d 90       	ld	r8, X+
 620:	9d 90       	ld	r9, X+
 622:	ad 90       	ld	r10, X+
 624:	bd 90       	ld	r11, X+
 626:	cd 90       	ld	r12, X+
 628:	dd 90       	ld	r13, X+
 62a:	ed 90       	ld	r14, X+
 62c:	fd 90       	ld	r15, X+
 62e:	0d 91       	ld	r16, X+
 630:	1d 91       	ld	r17, X+
 632:	cd 91       	ld	r28, X+
 634:	dd 91       	ld	r29, X+
 636:	ed 91       	ld	r30, X+
 638:	fd 91       	ld	r31, X+
 63a:	0d 90       	ld	r0, X+
 63c:	f8 94       	cli
 63e:	fe bf       	out	0x3e, r31	; 62
 640:	0f be       	out	0x3f, r0	; 63
 642:	ed bf       	out	0x3d, r30	; 61
 644:	ed 91       	ld	r30, X+
 646:	fd 91       	ld	r31, X+
 648:	09 94       	ijmp

0000064a <_exit>:
 64a:	f8 94       	cli

0000064c <__stop_program>:
 64c:	ff cf       	rjmp	.-2      	; 0x64c <__stop_program>
