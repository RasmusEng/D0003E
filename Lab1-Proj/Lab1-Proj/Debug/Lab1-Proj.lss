
Lab1-Proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000262  000002f6  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000002f6  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000325  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000333  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f42  00000000  00000000  0000038b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000926  00000000  00000000  000012cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000039b  00000000  00000000  00001bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001f90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c6  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014c  00000000  00000000  000022ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000241a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000226  00000226  000002ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002454  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.LCD_Init 0000001a  000001ea  000001ea  0000027e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.writeChar 000000e6  000000b8  000000b8  0000014c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .data.offsetPos 00000006  00800128  0000025c  000002f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 17 .data.charCodes 00000028  00800100  00000234  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 18 .text.CLK_init 0000000c  0000021a  0000021a  000002ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.main    0000004c  0000019e  0000019e  00000232  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_fini 00000002  0000022e  0000022e  000002c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_funcs_on_exit 00000002  00000230  00000230  000002c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_simulator_exit 00000002  00000232  00000232  000002c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.exit    00000016  00000204  00000204  00000298  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text._Exit   00000004  0000022a  0000022a  000002be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
   8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
   c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  10:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  14:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  18:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  1c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  20:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  24:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  28:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  30:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  34:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  38:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  3c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  40:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  44:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  48:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  4c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  50:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  54:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  58:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>

0000005c <.dinit>:
  5c:	01 00       	.word	0x0001	; ????
  5e:	01 2e       	mov	r0, r17
  60:	00 02       	muls	r16, r16
  62:	34 00       	.word	0x0034	; ????

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf ef       	ldi	r28, 0xFF	; 255
  6a:	d4 e0       	ldi	r29, 0x04	; 4
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	ec e5       	ldi	r30, 0x5C	; 92
  72:	f0 e0       	ldi	r31, 0x00	; 0
  74:	40 e0       	ldi	r20, 0x00	; 0
  76:	17 c0       	rjmp	.+46     	; 0xa6 <__do_clear_bss+0x8>
  78:	b5 91       	lpm	r27, Z+
  7a:	a5 91       	lpm	r26, Z+
  7c:	35 91       	lpm	r19, Z+
  7e:	25 91       	lpm	r18, Z+
  80:	05 91       	lpm	r16, Z+
  82:	07 fd       	sbrc	r16, 7
  84:	0c c0       	rjmp	.+24     	; 0x9e <__do_clear_bss>
  86:	95 91       	lpm	r25, Z+
  88:	85 91       	lpm	r24, Z+
  8a:	ef 01       	movw	r28, r30
  8c:	f9 2f       	mov	r31, r25
  8e:	e8 2f       	mov	r30, r24
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	a2 17       	cp	r26, r18
  96:	b3 07       	cpc	r27, r19
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0x20>
  9a:	fe 01       	movw	r30, r28
  9c:	04 c0       	rjmp	.+8      	; 0xa6 <__do_clear_bss+0x8>

0000009e <__do_clear_bss>:
  9e:	1d 92       	st	X+, r1
  a0:	a2 17       	cp	r26, r18
  a2:	b3 07       	cpc	r27, r19
  a4:	e1 f7       	brne	.-8      	; 0x9e <__do_clear_bss>
  a6:	e3 36       	cpi	r30, 0x63	; 99
  a8:	f4 07       	cpc	r31, r20
  aa:	31 f7       	brne	.-52     	; 0x78 <__do_copy_data+0x8>
  ac:	0e 94 cf 00 	call	0x19e	; 0x19e <main>
  b0:	0c 94 02 01 	jmp	0x204	; 0x204 <exit>

000000b4 <_exit>:
  b4:	f8 94       	cli

000000b6 <__stop_program>:
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <__stop_program>

Disassembly of section .text:

00000226 <__bad_interrupt>:
 226:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.LCD_Init:

000001ea <LCD_Init>:


void LCD_Init(void){
	//Use 32 kHz crystal oscillator
	//1/3 Bias and 1/4 duty, SEG0:SEG24 is used as port pins
	LCDCRB = (1<<LCDCS) | (1<<LCDMUX0)| (1<<LCDMUX1)|(1<<LCDPM0) |(1<<LCDPM1) |(1<<LCDPM2);
 1ea:	87 eb       	ldi	r24, 0xB7	; 183
 1ec:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	/* Using 16 as prescaler selection and 8 as LCD Clock Divide */
	/* gives a frame rate of 32 Hz */
	LCDFRR = (1<<LCDCD0) | (1<<LCDCD1) | (1<<LCDCD2);
 1f0:	87 e0       	ldi	r24, 0x07	; 7
 1f2:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
	/* Set segment drive time to 125 Î¼s and output voltage to 3.35 V*/
	LCDCCR = (1<<LCDDC0) | (1<<LCDCC1) | (1<<LCDCC2) | (1<<LCDCC3);
 1f6:	8e e2       	ldi	r24, 0x2E	; 46
 1f8:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	/* Enable LCD, default waveform and no interrupt enabled */
	LCDCRA = (1<<LCDEN);
 1fc:	80 e8       	ldi	r24, 0x80	; 128
 1fe:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
 202:	08 95       	ret

Disassembly of section .text.writeChar:

000000b8 <writeChar>:
	0,0,1,1,2,2,3,3
};


void writeChar(char ch, int pos){
	if(pos < 0 || pos > 5 || ch < 48 || ch > 57){
  b8:	66 30       	cpi	r22, 0x06	; 6
  ba:	71 05       	cpc	r23, r1
  bc:	08 f0       	brcs	.+2      	; 0xc0 <writeChar+0x8>
  be:	6e c0       	rjmp	.+220    	; 0x19c <writeChar+0xe4>
  c0:	80 33       	cpi	r24, 0x30	; 48
  c2:	08 f4       	brcc	.+2      	; 0xc6 <writeChar+0xe>
  c4:	6b c0       	rjmp	.+214    	; 0x19c <writeChar+0xe4>
  c6:	8a 33       	cpi	r24, 0x3A	; 58
  c8:	08 f0       	brcs	.+2      	; 0xcc <writeChar+0x14>
  ca:	68 c0       	rjmp	.+208    	; 0x19c <writeChar+0xe4>
		return;
	}
	volatile uint8_t *lcd_base = &LCDDR0 + offsetPos[pos];
  cc:	fb 01       	movw	r30, r22
  ce:	e8 5d       	subi	r30, 0xD8	; 216
  d0:	fe 4f       	sbci	r31, 0xFE	; 254
  d2:	e0 81       	ld	r30, Z
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	e4 51       	subi	r30, 0x14	; 20
  d8:	ff 4f       	sbci	r31, 0xFF	; 255
	
	int number = (int)ch - 48;
  da:	a8 2f       	mov	r26, r24
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	d0 97       	sbiw	r26, 0x30	; 48
	int shift = 0;
	if (pos % 2 == 1){
  e0:	61 70       	andi	r22, 0x01	; 1
  e2:	70 78       	andi	r23, 0x80	; 128
  e4:	77 23       	and	r23, r23
  e6:	34 f4       	brge	.+12     	; 0xf4 <writeChar+0x3c>
  e8:	61 50       	subi	r22, 0x01	; 1
  ea:	71 09       	sbc	r23, r1
  ec:	6e 6f       	ori	r22, 0xFE	; 254
  ee:	7f 6f       	ori	r23, 0xFF	; 255
  f0:	6f 5f       	subi	r22, 0xFF	; 255
  f2:	7f 4f       	sbci	r23, 0xFF	; 255
  f4:	61 30       	cpi	r22, 0x01	; 1
  f6:	71 05       	cpc	r23, r1
  f8:	71 f4       	brne	.+28     	; 0x116 <writeChar+0x5e>
		shift = 4;
		lcd_base[0]  = lcd_base[0]  & 0x0F;
  fa:	80 81       	ld	r24, Z
  fc:	8f 70       	andi	r24, 0x0F	; 15
  fe:	80 83       	st	Z, r24
		lcd_base[5]  = lcd_base[5]  & 0x0F;
 100:	85 81       	ldd	r24, Z+5	; 0x05
 102:	8f 70       	andi	r24, 0x0F	; 15
 104:	85 83       	std	Z+5, r24	; 0x05
		lcd_base[10] = lcd_base[10] & 0x0F;
 106:	82 85       	ldd	r24, Z+10	; 0x0a
 108:	8f 70       	andi	r24, 0x0F	; 15
 10a:	82 87       	std	Z+10, r24	; 0x0a
		lcd_base[15] = lcd_base[15] & 0x0F;
 10c:	87 85       	ldd	r24, Z+15	; 0x0f
 10e:	8f 70       	andi	r24, 0x0F	; 15
 110:	87 87       	std	Z+15, r24	; 0x0f
	volatile uint8_t *lcd_base = &LCDDR0 + offsetPos[pos];
	
	int number = (int)ch - 48;
	int shift = 0;
	if (pos % 2 == 1){
		shift = 4;
 112:	24 e0       	ldi	r18, 0x04	; 4
 114:	0d c0       	rjmp	.+26     	; 0x130 <writeChar+0x78>
		lcd_base[0]  = lcd_base[0]  & 0x0F;
		lcd_base[5]  = lcd_base[5]  & 0x0F;
		lcd_base[10] = lcd_base[10] & 0x0F;
		lcd_base[15] = lcd_base[15] & 0x0F;
	}else{
		lcd_base[0]  = lcd_base[0]  & 0xF0;
 116:	80 81       	ld	r24, Z
 118:	80 7f       	andi	r24, 0xF0	; 240
 11a:	80 83       	st	Z, r24
		lcd_base[5]  = lcd_base[5]  & 0xF0;
 11c:	85 81       	ldd	r24, Z+5	; 0x05
 11e:	80 7f       	andi	r24, 0xF0	; 240
 120:	85 83       	std	Z+5, r24	; 0x05
		lcd_base[10] = lcd_base[10] & 0xF0;
 122:	82 85       	ldd	r24, Z+10	; 0x0a
 124:	80 7f       	andi	r24, 0xF0	; 240
 126:	82 87       	std	Z+10, r24	; 0x0a
		lcd_base[15] = lcd_base[15] & 0xF0;
 128:	87 85       	ldd	r24, Z+15	; 0x0f
 12a:	80 7f       	andi	r24, 0xF0	; 240
 12c:	87 87       	std	Z+15, r24	; 0x0f
		return;
	}
	volatile uint8_t *lcd_base = &LCDDR0 + offsetPos[pos];
	
	int number = (int)ch - 48;
	int shift = 0;
 12e:	20 e0       	ldi	r18, 0x00	; 0
		lcd_base[0]  = lcd_base[0]  & 0xF0;
		lcd_base[5]  = lcd_base[5]  & 0xF0;
		lcd_base[10] = lcd_base[10] & 0xF0;
		lcd_base[15] = lcd_base[15] & 0xF0;
	}
	lcd_base[0]  = charCodes[number][0]<<shift | lcd_base[0] ;
 130:	aa 0f       	add	r26, r26
 132:	bb 1f       	adc	r27, r27
 134:	aa 0f       	add	r26, r26
 136:	bb 1f       	adc	r27, r27
 138:	a0 50       	subi	r26, 0x00	; 0
 13a:	bf 4f       	sbci	r27, 0xFF	; 255
 13c:	8c 91       	ld	r24, X
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	02 2e       	mov	r0, r18
 142:	02 c0       	rjmp	.+4      	; 0x148 <writeChar+0x90>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	0a 94       	dec	r0
 14a:	e2 f7       	brpl	.-8      	; 0x144 <writeChar+0x8c>
 14c:	90 81       	ld	r25, Z
 14e:	89 2b       	or	r24, r25
 150:	80 83       	st	Z, r24
	lcd_base[5]  = charCodes[number][1]<<shift | lcd_base[5] ;
 152:	11 96       	adiw	r26, 0x01	; 1
 154:	8c 91       	ld	r24, X
 156:	11 97       	sbiw	r26, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 2e       	mov	r0, r18
 15c:	02 c0       	rjmp	.+4      	; 0x162 <writeChar+0xaa>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	0a 94       	dec	r0
 164:	e2 f7       	brpl	.-8      	; 0x15e <writeChar+0xa6>
 166:	95 81       	ldd	r25, Z+5	; 0x05
 168:	89 2b       	or	r24, r25
 16a:	85 83       	std	Z+5, r24	; 0x05
	lcd_base[10] = charCodes[number][2]<<shift | lcd_base[10];
 16c:	12 96       	adiw	r26, 0x02	; 2
 16e:	8c 91       	ld	r24, X
 170:	12 97       	sbiw	r26, 0x02	; 2
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 2e       	mov	r0, r18
 176:	02 c0       	rjmp	.+4      	; 0x17c <writeChar+0xc4>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	0a 94       	dec	r0
 17e:	e2 f7       	brpl	.-8      	; 0x178 <writeChar+0xc0>
 180:	92 85       	ldd	r25, Z+10	; 0x0a
 182:	89 2b       	or	r24, r25
 184:	82 87       	std	Z+10, r24	; 0x0a
	lcd_base[15] = charCodes[number][3]<<shift | lcd_base[15];
 186:	13 96       	adiw	r26, 0x03	; 3
 188:	8c 91       	ld	r24, X
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <writeChar+0xda>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	2a 95       	dec	r18
 194:	e2 f7       	brpl	.-8      	; 0x18e <writeChar+0xd6>
 196:	97 85       	ldd	r25, Z+15	; 0x0f
 198:	89 2b       	or	r24, r25
 19a:	87 87       	std	Z+15, r24	; 0x0f
 19c:	08 95       	ret

Disassembly of section .text.CLK_init:

0000021a <CLK_init>:
#include <xc.h>
#include "LCC-Driver.h"
#include <util/delay.h>

void CLK_init(void){
	CLKPR = 0x80;
 21a:	e1 e6       	ldi	r30, 0x61	; 97
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 e8       	ldi	r24, 0x80	; 128
 220:	80 83       	st	Z, r24
	CLKPR = 0x00;
 222:	10 82       	st	Z, r1
 224:	08 95       	ret

Disassembly of section .text.main:

0000019e <main>:
}

int main(void)
{
	CLK_init();
 19e:	0e 94 0d 01 	call	0x21a	; 0x21a <CLK_init>
	LCD_Init();
 1a2:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_Init>
	writeChar('4',0);
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	84 e3       	ldi	r24, 0x34	; 52
 1ac:	0e 94 5c 00 	call	0xb8	; 0xb8 <__data_load_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b0:	2f e7       	ldi	r18, 0x7F	; 127
 1b2:	84 e8       	ldi	r24, 0x84	; 132
 1b4:	9e e1       	ldi	r25, 0x1E	; 30
 1b6:	21 50       	subi	r18, 0x01	; 1
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <main+0x18>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <main+0x22>
 1c0:	00 00       	nop
	_delay_ms(10000);
	writeChar('5',1);
 1c2:	61 e0       	ldi	r22, 0x01	; 1
 1c4:	70 e0       	ldi	r23, 0x00	; 0
 1c6:	85 e3       	ldi	r24, 0x35	; 53
 1c8:	0e 94 5c 00 	call	0xb8	; 0xb8 <__data_load_end>
 1cc:	2f e7       	ldi	r18, 0x7F	; 127
 1ce:	84 e8       	ldi	r24, 0x84	; 132
 1d0:	9e e1       	ldi	r25, 0x1E	; 30
 1d2:	21 50       	subi	r18, 0x01	; 1
 1d4:	80 40       	sbci	r24, 0x00	; 0
 1d6:	90 40       	sbci	r25, 0x00	; 0
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <main+0x34>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <main+0x3e>
 1dc:	00 00       	nop
	_delay_ms(10000);
	writeChar('1',0);
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	81 e3       	ldi	r24, 0x31	; 49
 1e4:	0e 94 5c 00 	call	0xb8	; 0xb8 <__data_load_end>
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <main+0x4a>

Disassembly of section .text.__dummy_fini:

0000022e <_fini>:
 22e:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000230 <__funcs_on_exit>:
 230:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000232 <__simulator_exit>:
 232:	08 95       	ret

Disassembly of section .text.exit:

00000204 <exit>:
 204:	ec 01       	movw	r28, r24
 206:	0e 94 18 01 	call	0x230	; 0x230 <__funcs_on_exit>
 20a:	0e 94 17 01 	call	0x22e	; 0x22e <_fini>
 20e:	ce 01       	movw	r24, r28
 210:	0e 94 19 01 	call	0x232	; 0x232 <__simulator_exit>
 214:	ce 01       	movw	r24, r28
 216:	0e 94 15 01 	call	0x22a	; 0x22a <_Exit>

Disassembly of section .text._Exit:

0000022a <_Exit>:
 22a:	0e 94 5a 00 	call	0xb4	; 0xb4 <_exit>
