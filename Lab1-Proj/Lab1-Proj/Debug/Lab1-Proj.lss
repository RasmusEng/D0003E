
Lab1-Proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ca  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001ca  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000001f9  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000207  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001258  00000000  00000000  000002b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a66  00000000  00000000  0000150f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000649  00000000  00000000  00001f75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001dc  00000000  00000000  000025c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e1  00000000  00000000  0000279c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005f6  00000000  00000000  00002a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00003073  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000148  00000148  000001bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003134  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.LCD_Init 0000001a  000000f0  000000f0  00000164  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.CLK_init 0000000c  00000130  00000130  000001a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.button_init 0000000c  0000013c  0000013c  000001b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.blink2  00000040  000000b0  000000b0  00000124  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.main    00000010  00000120  00000120  00000194  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_fini 00000002  00000150  00000150  000001c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_funcs_on_exit 00000002  00000152  00000152  000001c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_simulator_exit 00000002  00000154  00000154  000001c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.exit    00000016  0000010a  0000010a  0000017e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text._Exit   00000004  0000014c  0000014c  000001c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
   8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
   c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  10:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  14:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  18:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  1c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  20:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  24:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  28:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  2c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  30:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  34:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  38:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  3c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  40:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  44:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  48:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  4c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  50:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  54:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  58:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	ec e5       	ldi	r30, 0x5C	; 92
  6a:	f0 e0       	ldi	r31, 0x00	; 0
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	17 c0       	rjmp	.+46     	; 0x9e <__do_clear_bss+0x8>
  70:	b5 91       	lpm	r27, Z+
  72:	a5 91       	lpm	r26, Z+
  74:	35 91       	lpm	r19, Z+
  76:	25 91       	lpm	r18, Z+
  78:	05 91       	lpm	r16, Z+
  7a:	07 fd       	sbrc	r16, 7
  7c:	0c c0       	rjmp	.+24     	; 0x96 <__do_clear_bss>
  7e:	95 91       	lpm	r25, Z+
  80:	85 91       	lpm	r24, Z+
  82:	ef 01       	movw	r28, r30
  84:	f9 2f       	mov	r31, r25
  86:	e8 2f       	mov	r30, r24
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 17       	cp	r26, r18
  8e:	b3 07       	cpc	r27, r19
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0x20>
  92:	fe 01       	movw	r30, r28
  94:	04 c0       	rjmp	.+8      	; 0x9e <__do_clear_bss+0x8>

00000096 <__do_clear_bss>:
  96:	1d 92       	st	X+, r1
  98:	a2 17       	cp	r26, r18
  9a:	b3 07       	cpc	r27, r19
  9c:	e1 f7       	brne	.-8      	; 0x96 <__do_clear_bss>
  9e:	ec 35       	cpi	r30, 0x5C	; 92
  a0:	f4 07       	cpc	r31, r20
  a2:	31 f7       	brne	.-52     	; 0x70 <__do_copy_data+0x8>
  a4:	0e 94 90 00 	call	0x120	; 0x120 <main>
  a8:	0c 94 85 00 	jmp	0x10a	; 0x10a <exit>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>

Disassembly of section .text:

00000148 <__bad_interrupt>:
 148:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.LCD_Init:

000000f0 <LCD_Init>:
};

void LCD_Init(void){
	//Use 32 kHz crystal oscillator
	//1/3 Bias and 1/4 duty, SEG0:SEG24 is used as port pins
	LCDCRB = (1<<LCDCS) | (1<<LCDMUX0)| (1<<LCDMUX1)|(1<<LCDPM0) |(1<<LCDPM1) |(1<<LCDPM2);
  f0:	87 eb       	ldi	r24, 0xB7	; 183
  f2:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	/* Using 16 as prescaler selection and 8 as LCD Clock Divide */
	/* gives a frame rate of 32 Hz */
	LCDFRR = (1<<LCDCD0) | (1<<LCDCD1) | (1<<LCDCD2);
  f6:	87 e0       	ldi	r24, 0x07	; 7
  f8:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
	/* Set segment drive time to 125 Î¼s and output voltage to 3.35 V*/
	LCDCCR = (1<<LCDDC0) | (1<<LCDCC1) | (1<<LCDCC2) | (1<<LCDCC3);
  fc:	8e e2       	ldi	r24, 0x2E	; 46
  fe:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	/* Enable LCD, default waveform and no interrupt enabled */
	LCDCRA = (1<<LCDEN);
 102:	80 e8       	ldi	r24, 0x80	; 128
 104:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
 108:	08 95       	ret

Disassembly of section .text.CLK_init:

00000130 <CLK_init>:
#include "LCC-Driver.h"
#include <util/delay.h>
#include <stdbool.h>

void CLK_init(void){
	CLKPR = 0x80;
 130:	e1 e6       	ldi	r30, 0x61	; 97
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 e8       	ldi	r24, 0x80	; 128
 136:	80 83       	st	Z, r24
	CLKPR = 0x00;
 138:	10 82       	st	Z, r1
 13a:	08 95       	ret

Disassembly of section .text.button_init:

0000013c <button_init>:
}

void button_init(void){
	PORTB |= (1 << 7);
 13c:	85 b1       	in	r24, 0x05	; 5
 13e:	80 68       	ori	r24, 0x80	; 128
 140:	85 b9       	out	0x05, r24	; 5
	DDRB = (1<<DDB7);
 142:	80 e8       	ldi	r24, 0x80	; 128
 144:	84 b9       	out	0x04, r24	; 4
 146:	08 95       	ret

Disassembly of section .text.blink2:

000000b0 <blink2>:
void part4(){
	long j = 25001;
	bool check = false;
	while(1){
		primes4(&j);
		blink2();
  b0:	e1 e8       	ldi	r30, 0x81	; 129
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	84 60       	ori	r24, 0x04	; 4
  b8:	80 83       	st	Z, r24
  ba:	20 e0       	ldi	r18, 0x00	; 0
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	01 c0       	rjmp	.+2      	; 0xc6 <blink2+0x16>
  c4:	9a 01       	movw	r18, r20
  c6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
  ca:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
  ce:	24 1b       	sub	r18, r20
  d0:	35 0b       	sbc	r19, r21
  d2:	82 0f       	add	r24, r18
  d4:	93 1f       	adc	r25, r19
  d6:	82 31       	cpi	r24, 0x12	; 18
  d8:	2a e7       	ldi	r18, 0x7A	; 122
  da:	92 07       	cpc	r25, r18
  dc:	9c f3       	brlt	.-26     	; 0xc4 <blink2+0x14>
  de:	e9 ef       	ldi	r30, 0xF9	; 249
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	30 81       	ld	r19, Z
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	23 27       	eor	r18, r19
  e8:	20 83       	st	Z, r18
  ea:	82 51       	subi	r24, 0x12	; 18
  ec:	9a 47       	sbci	r25, 0x7A	; 122
  ee:	ea cf       	rjmp	.-44     	; 0xc4 <blink2+0x14>

Disassembly of section .text.main:

00000120 <main>:
	}
}

int main(void)
{
	CLK_init();
 120:	0e 94 98 00 	call	0x130	; 0x130 <CLK_init>
	LCD_Init();
 124:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_Init>
	button_init();
 128:	0e 94 9e 00 	call	0x13c	; 0x13c <button_init>
	
	//part4();
	
	//button();
	blink2();
 12c:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>

Disassembly of section .text.__dummy_fini:

00000150 <_fini>:
 150:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000152 <__funcs_on_exit>:
 152:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000154 <__simulator_exit>:
 154:	08 95       	ret

Disassembly of section .text.exit:

0000010a <exit>:
 10a:	ec 01       	movw	r28, r24
 10c:	0e 94 a9 00 	call	0x152	; 0x152 <__funcs_on_exit>
 110:	0e 94 a8 00 	call	0x150	; 0x150 <_fini>
 114:	ce 01       	movw	r24, r28
 116:	0e 94 aa 00 	call	0x154	; 0x154 <__simulator_exit>
 11a:	ce 01       	movw	r24, r28
 11c:	0e 94 a6 00 	call	0x14c	; 0x14c <_Exit>

Disassembly of section .text._Exit:

0000014c <_Exit>:
 14c:	0e 94 56 00 	call	0xac	; 0xac <_exit>
