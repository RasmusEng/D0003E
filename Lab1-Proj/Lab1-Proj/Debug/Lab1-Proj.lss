
Lab1-Proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000004ae  00000542  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000542  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 00000038  00000000  00000000  00000571  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000005a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011c0  00000000  00000000  00000651  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a1b  00000000  00000000  00001811  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005da  00000000  00000000  0000222c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000019c  00000000  00000000  00002808  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e1  00000000  00000000  000029a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004ea  00000000  00000000  00002c85  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  0000316f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000472  00000472  00000506  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003228  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.LCD_Init 0000001a  0000040a  0000040a  0000049e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.writeChar 000000e6  000000b8  000000b8  0000014c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.writeLong 000000b8  0000019e  0000019e  00000232  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .data.offsetPos 00000006  00800128  000004a8  0000053c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 18 .rodata.charCodes 00000028  00800100  00000480  00000514  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 19 .text.CLK_init 0000000c  0000045a  0000045a  000004ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.button_init 0000000c  00000466  00000466  000004fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.is_prime 00000060  00000256  00000256  000002ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.blink4  00000054  000002b6  000002b6  0000034a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.primes4 00000026  000003e4  000003e4  00000478  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.button4 00000038  0000034e  0000034e  000003e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.part4   00000030  00000386  00000386  0000041a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.main    00000010  0000043a  0000043a  000004ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.libgcc.div 0000002e  000003b6  000003b6  0000044a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.libgcc.div 00000010  0000044a  0000044a  000004de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.libgcc.div 00000044  0000030a  0000030a  0000039e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__dummy_fini 00000002  0000047a  0000047a  0000050e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__dummy_funcs_on_exit 00000002  0000047c  0000047c  00000510  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.__dummy_simulator_exit 00000002  0000047e  0000047e  00000512  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.exit    00000016  00000424  00000424  000004b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text._Exit   00000004  00000476  00000476  0000050a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
   8:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
   c:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  10:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  14:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  18:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  1c:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  20:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  24:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  28:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  2c:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  30:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  34:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  38:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  3c:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  40:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  44:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  48:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  4c:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  50:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  54:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  58:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>

0000005c <.dinit>:
  5c:	01 00       	.word	0x0001	; ????
  5e:	01 2e       	mov	r0, r17
  60:	00 04       	cpc	r0, r0
  62:	80 00       	.word	0x0080	; ????

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf ef       	ldi	r28, 0xFF	; 255
  6a:	d4 e0       	ldi	r29, 0x04	; 4
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	ec e5       	ldi	r30, 0x5C	; 92
  72:	f0 e0       	ldi	r31, 0x00	; 0
  74:	40 e0       	ldi	r20, 0x00	; 0
  76:	17 c0       	rjmp	.+46     	; 0xa6 <__do_clear_bss+0x8>
  78:	b5 91       	lpm	r27, Z+
  7a:	a5 91       	lpm	r26, Z+
  7c:	35 91       	lpm	r19, Z+
  7e:	25 91       	lpm	r18, Z+
  80:	05 91       	lpm	r16, Z+
  82:	07 fd       	sbrc	r16, 7
  84:	0c c0       	rjmp	.+24     	; 0x9e <__do_clear_bss>
  86:	95 91       	lpm	r25, Z+
  88:	85 91       	lpm	r24, Z+
  8a:	ef 01       	movw	r28, r30
  8c:	f9 2f       	mov	r31, r25
  8e:	e8 2f       	mov	r30, r24
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	a2 17       	cp	r26, r18
  96:	b3 07       	cpc	r27, r19
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0x20>
  9a:	fe 01       	movw	r30, r28
  9c:	04 c0       	rjmp	.+8      	; 0xa6 <__do_clear_bss+0x8>

0000009e <__do_clear_bss>:
  9e:	1d 92       	st	X+, r1
  a0:	a2 17       	cp	r26, r18
  a2:	b3 07       	cpc	r27, r19
  a4:	e1 f7       	brne	.-8      	; 0x9e <__do_clear_bss>
  a6:	e3 36       	cpi	r30, 0x63	; 99
  a8:	f4 07       	cpc	r31, r20
  aa:	31 f7       	brne	.-52     	; 0x78 <__do_copy_data+0x8>
  ac:	0e 94 1d 02 	call	0x43a	; 0x43a <main>
  b0:	0c 94 12 02 	jmp	0x424	; 0x424 <exit>

000000b4 <_exit>:
  b4:	f8 94       	cli

000000b6 <__stop_program>:
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <__stop_program>

Disassembly of section .text:

00000472 <__bad_interrupt>:
 472:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.LCD_Init:

0000040a <LCD_Init>:
};

void LCD_Init(void){
	//Use 32 kHz crystal oscillator
	//1/3 Bias and 1/4 duty, SEG0:SEG24 is used as port pins
	LCDCRB = (1<<LCDCS) | (1<<LCDMUX0)| (1<<LCDMUX1)|(1<<LCDPM0) |(1<<LCDPM1) |(1<<LCDPM2);
 40a:	87 eb       	ldi	r24, 0xB7	; 183
 40c:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	/* Using 16 as prescaler selection and 8 as LCD Clock Divide */
	/* gives a frame rate of 32 Hz */
	LCDFRR = (1<<LCDCD0) | (1<<LCDCD1) | (1<<LCDCD2);
 410:	87 e0       	ldi	r24, 0x07	; 7
 412:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
	/* Set segment drive time to 125 Î¼s and output voltage to 3.35 V*/
	LCDCCR = (1<<LCDDC0) | (1<<LCDCC1) | (1<<LCDCC2) | (1<<LCDCC3);
 416:	8e e2       	ldi	r24, 0x2E	; 46
 418:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	/* Enable LCD, default waveform and no interrupt enabled */
	LCDCRA = (1<<LCDEN);
 41c:	80 e8       	ldi	r24, 0x80	; 128
 41e:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
 422:	08 95       	ret

Disassembly of section .text.writeChar:

000000b8 <writeChar>:
	0,0,1,1,2,2,3,3
};


void writeChar(char ch, int pos){
	if(pos < 0 || pos > 5 || ch < 48 || ch > 57){
  b8:	66 30       	cpi	r22, 0x06	; 6
  ba:	71 05       	cpc	r23, r1
  bc:	08 f0       	brcs	.+2      	; 0xc0 <writeChar+0x8>
  be:	6e c0       	rjmp	.+220    	; 0x19c <writeChar+0xe4>
  c0:	80 33       	cpi	r24, 0x30	; 48
  c2:	08 f4       	brcc	.+2      	; 0xc6 <writeChar+0xe>
  c4:	6b c0       	rjmp	.+214    	; 0x19c <writeChar+0xe4>
  c6:	8a 33       	cpi	r24, 0x3A	; 58
  c8:	08 f0       	brcs	.+2      	; 0xcc <writeChar+0x14>
  ca:	68 c0       	rjmp	.+208    	; 0x19c <writeChar+0xe4>
		return;
	}
	volatile uint8_t *lcd_base = &LCDDR0 + offsetPos[pos];
  cc:	fb 01       	movw	r30, r22
  ce:	e8 5d       	subi	r30, 0xD8	; 216
  d0:	fe 4f       	sbci	r31, 0xFE	; 254
  d2:	e0 81       	ld	r30, Z
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	e4 51       	subi	r30, 0x14	; 20
  d8:	ff 4f       	sbci	r31, 0xFF	; 255
	
	int number = (int)ch - 48;
  da:	a8 2f       	mov	r26, r24
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	d0 97       	sbiw	r26, 0x30	; 48
	int shift = 0;
	if (pos % 2 == 1){
  e0:	61 70       	andi	r22, 0x01	; 1
  e2:	70 78       	andi	r23, 0x80	; 128
  e4:	77 23       	and	r23, r23
  e6:	34 f4       	brge	.+12     	; 0xf4 <writeChar+0x3c>
  e8:	61 50       	subi	r22, 0x01	; 1
  ea:	71 09       	sbc	r23, r1
  ec:	6e 6f       	ori	r22, 0xFE	; 254
  ee:	7f 6f       	ori	r23, 0xFF	; 255
  f0:	6f 5f       	subi	r22, 0xFF	; 255
  f2:	7f 4f       	sbci	r23, 0xFF	; 255
  f4:	61 30       	cpi	r22, 0x01	; 1
  f6:	71 05       	cpc	r23, r1
  f8:	71 f4       	brne	.+28     	; 0x116 <writeChar+0x5e>
		shift = 4;
		lcd_base[0]  = lcd_base[0]  & 0x0F;
  fa:	80 81       	ld	r24, Z
  fc:	8f 70       	andi	r24, 0x0F	; 15
  fe:	80 83       	st	Z, r24
		lcd_base[5]  = lcd_base[5]  & 0x0F;
 100:	85 81       	ldd	r24, Z+5	; 0x05
 102:	8f 70       	andi	r24, 0x0F	; 15
 104:	85 83       	std	Z+5, r24	; 0x05
		lcd_base[10] = lcd_base[10] & 0x0F;
 106:	82 85       	ldd	r24, Z+10	; 0x0a
 108:	8f 70       	andi	r24, 0x0F	; 15
 10a:	82 87       	std	Z+10, r24	; 0x0a
		lcd_base[15] = lcd_base[15] & 0x0F;
 10c:	87 85       	ldd	r24, Z+15	; 0x0f
 10e:	8f 70       	andi	r24, 0x0F	; 15
 110:	87 87       	std	Z+15, r24	; 0x0f
	volatile uint8_t *lcd_base = &LCDDR0 + offsetPos[pos];
	
	int number = (int)ch - 48;
	int shift = 0;
	if (pos % 2 == 1){
		shift = 4;
 112:	24 e0       	ldi	r18, 0x04	; 4
 114:	0d c0       	rjmp	.+26     	; 0x130 <writeChar+0x78>
		lcd_base[0]  = lcd_base[0]  & 0x0F;
		lcd_base[5]  = lcd_base[5]  & 0x0F;
		lcd_base[10] = lcd_base[10] & 0x0F;
		lcd_base[15] = lcd_base[15] & 0x0F;
	}else{
		lcd_base[0]  = lcd_base[0]  & 0xF0;
 116:	80 81       	ld	r24, Z
 118:	80 7f       	andi	r24, 0xF0	; 240
 11a:	80 83       	st	Z, r24
		lcd_base[5]  = lcd_base[5]  & 0xF0;
 11c:	85 81       	ldd	r24, Z+5	; 0x05
 11e:	80 7f       	andi	r24, 0xF0	; 240
 120:	85 83       	std	Z+5, r24	; 0x05
		lcd_base[10] = lcd_base[10] & 0xF0;
 122:	82 85       	ldd	r24, Z+10	; 0x0a
 124:	80 7f       	andi	r24, 0xF0	; 240
 126:	82 87       	std	Z+10, r24	; 0x0a
		lcd_base[15] = lcd_base[15] & 0xF0;
 128:	87 85       	ldd	r24, Z+15	; 0x0f
 12a:	80 7f       	andi	r24, 0xF0	; 240
 12c:	87 87       	std	Z+15, r24	; 0x0f
		return;
	}
	volatile uint8_t *lcd_base = &LCDDR0 + offsetPos[pos];
	
	int number = (int)ch - 48;
	int shift = 0;
 12e:	20 e0       	ldi	r18, 0x00	; 0
		lcd_base[0]  = lcd_base[0]  & 0xF0;
		lcd_base[5]  = lcd_base[5]  & 0xF0;
		lcd_base[10] = lcd_base[10] & 0xF0;
		lcd_base[15] = lcd_base[15] & 0xF0;
	}
	lcd_base[0]  = charCodes[number][0]<<shift | lcd_base[0] ;
 130:	aa 0f       	add	r26, r26
 132:	bb 1f       	adc	r27, r27
 134:	aa 0f       	add	r26, r26
 136:	bb 1f       	adc	r27, r27
 138:	a0 50       	subi	r26, 0x00	; 0
 13a:	bf 4f       	sbci	r27, 0xFF	; 255
 13c:	8c 91       	ld	r24, X
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	02 2e       	mov	r0, r18
 142:	02 c0       	rjmp	.+4      	; 0x148 <writeChar+0x90>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	0a 94       	dec	r0
 14a:	e2 f7       	brpl	.-8      	; 0x144 <writeChar+0x8c>
 14c:	90 81       	ld	r25, Z
 14e:	89 2b       	or	r24, r25
 150:	80 83       	st	Z, r24
	lcd_base[5]  = charCodes[number][1]<<shift | lcd_base[5] ;
 152:	11 96       	adiw	r26, 0x01	; 1
 154:	8c 91       	ld	r24, X
 156:	11 97       	sbiw	r26, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 2e       	mov	r0, r18
 15c:	02 c0       	rjmp	.+4      	; 0x162 <writeChar+0xaa>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	0a 94       	dec	r0
 164:	e2 f7       	brpl	.-8      	; 0x15e <writeChar+0xa6>
 166:	95 81       	ldd	r25, Z+5	; 0x05
 168:	89 2b       	or	r24, r25
 16a:	85 83       	std	Z+5, r24	; 0x05
	lcd_base[10] = charCodes[number][2]<<shift | lcd_base[10];
 16c:	12 96       	adiw	r26, 0x02	; 2
 16e:	8c 91       	ld	r24, X
 170:	12 97       	sbiw	r26, 0x02	; 2
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 2e       	mov	r0, r18
 176:	02 c0       	rjmp	.+4      	; 0x17c <writeChar+0xc4>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	0a 94       	dec	r0
 17e:	e2 f7       	brpl	.-8      	; 0x178 <writeChar+0xc0>
 180:	92 85       	ldd	r25, Z+10	; 0x0a
 182:	89 2b       	or	r24, r25
 184:	82 87       	std	Z+10, r24	; 0x0a
	lcd_base[15] = charCodes[number][3]<<shift | lcd_base[15];
 186:	13 96       	adiw	r26, 0x03	; 3
 188:	8c 91       	ld	r24, X
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <writeChar+0xda>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	2a 95       	dec	r18
 194:	e2 f7       	brpl	.-8      	; 0x18e <writeChar+0xd6>
 196:	97 85       	ldd	r25, Z+15	; 0x0f
 198:	89 2b       	or	r24, r25
 19a:	87 87       	std	Z+15, r24	; 0x0f
 19c:	08 95       	ret

Disassembly of section .text.writeLong:

0000019e <writeLong>:
}

void writeLong(long i){
 19e:	ff 92       	push	r15
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	cd b7       	in	r28, 0x3d	; 61
 1aa:	de b7       	in	r29, 0x3e	; 62
 1ac:	27 97       	sbiw	r28, 0x07	; 7
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	f8 94       	cli
 1b2:	de bf       	out	0x3e, r29	; 62
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	cd bf       	out	0x3d, r28	; 61
	if(i == 0){
 1b8:	61 15       	cp	r22, r1
 1ba:	71 05       	cpc	r23, r1
 1bc:	81 05       	cpc	r24, r1
 1be:	91 05       	cpc	r25, r1
 1c0:	d9 f4       	brne	.+54     	; 0x1f8 <writeLong+0x5a>
		writeChar('0', 6);	
 1c2:	66 e0       	ldi	r22, 0x06	; 6
 1c4:	70 e0       	ldi	r23, 0x00	; 0
 1c6:	80 e3       	ldi	r24, 0x30	; 48
 1c8:	0e 94 5c 00 	call	0xb8	; 0xb8 <__data_load_end>
 1cc:	38 c0       	rjmp	.+112    	; 0x23e <__EEPROM_REGION_LENGTH__+0x3e>
		return;
	}
	char chars[7];
	
	for(int j = 5; j>-1; j--){
		chars[j] = (char)(i%10)+48;
 1ce:	2a e0       	ldi	r18, 0x0A	; 10
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	40 e0       	ldi	r20, 0x00	; 0
 1d4:	50 e0       	ldi	r21, 0x00	; 0
 1d6:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__divmodsi4>
 1da:	e1 e0       	ldi	r30, 0x01	; 1
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	ec 0f       	add	r30, r28
 1e0:	fd 1f       	adc	r31, r29
 1e2:	e0 0f       	add	r30, r16
 1e4:	f1 1f       	adc	r31, r17
 1e6:	60 5d       	subi	r22, 0xD0	; 208
 1e8:	60 83       	st	Z, r22
		i /= 10;
 1ea:	62 2f       	mov	r22, r18
 1ec:	73 2f       	mov	r23, r19
 1ee:	84 2f       	mov	r24, r20
 1f0:	95 2f       	mov	r25, r21
		writeChar('0', 6);	
		return;
	}
	char chars[7];
	
	for(int j = 5; j>-1; j--){
 1f2:	01 50       	subi	r16, 0x01	; 1
 1f4:	11 09       	sbc	r17, r1
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <writeLong+0x5e>
 1f8:	05 e0       	ldi	r16, 0x05	; 5
 1fa:	10 e0       	ldi	r17, 0x00	; 0
 1fc:	11 23       	and	r17, r17
 1fe:	3c f7       	brge	.-50     	; 0x1ce <writeLong+0x30>
 200:	06 e0       	ldi	r16, 0x06	; 6
 202:	10 e0       	ldi	r17, 0x00	; 0
 204:	f1 2c       	mov	r15, r1
 206:	19 c0       	rjmp	.+50     	; 0x23a <__EEPROM_REGION_LENGTH__+0x3a>
		i /= 10;
	}
	
	bool importantNum = false;
	for(int j = 6; j>-1; j--){
		if(!importantNum){
 208:	f1 10       	cpse	r15, r1
 20a:	0b c0       	rjmp	.+22     	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
			if(chars[j] == 0){
 20c:	e1 e0       	ldi	r30, 0x01	; 1
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	ec 0f       	add	r30, r28
 212:	fd 1f       	adc	r31, r29
 214:	e0 0f       	add	r30, r16
 216:	f1 1f       	adc	r31, r17
 218:	80 81       	ld	r24, Z
 21a:	88 23       	and	r24, r24
 21c:	61 f0       	breq	.+24     	; 0x236 <__EEPROM_REGION_LENGTH__+0x36>
				continue;
			}else{
				importantNum = true;
 21e:	ff 24       	eor	r15, r15
 220:	f3 94       	inc	r15
			}
		}
		writeChar(chars[j],j);
 222:	e1 e0       	ldi	r30, 0x01	; 1
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	ec 0f       	add	r30, r28
 228:	fd 1f       	adc	r31, r29
 22a:	e0 0f       	add	r30, r16
 22c:	f1 1f       	adc	r31, r17
 22e:	b8 01       	movw	r22, r16
 230:	80 81       	ld	r24, Z
 232:	0e 94 5c 00 	call	0xb8	; 0xb8 <__data_load_end>
		chars[j] = (char)(i%10)+48;
		i /= 10;
	}
	
	bool importantNum = false;
	for(int j = 6; j>-1; j--){
 236:	01 50       	subi	r16, 0x01	; 1
 238:	11 09       	sbc	r17, r1
 23a:	11 23       	and	r17, r17
 23c:	2c f7       	brge	.-54     	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
				importantNum = true;
			}
		}
		writeChar(chars[j],j);
	}
 23e:	27 96       	adiw	r28, 0x07	; 7
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	f8 94       	cli
 244:	de bf       	out	0x3e, r29	; 62
 246:	0f be       	out	0x3f, r0	; 63
 248:	cd bf       	out	0x3d, r28	; 61
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	1f 91       	pop	r17
 250:	0f 91       	pop	r16
 252:	ff 90       	pop	r15
 254:	08 95       	ret

Disassembly of section .text.CLK_init:

0000045a <CLK_init>:
#include "LCC-Driver.h"
#include <util/delay.h>
#include <stdbool.h>

void CLK_init(void){
	CLKPR = 0x80;
 45a:	e1 e6       	ldi	r30, 0x61	; 97
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	80 e8       	ldi	r24, 0x80	; 128
 460:	80 83       	st	Z, r24
	CLKPR = 0x00;
 462:	10 82       	st	Z, r1
 464:	08 95       	ret

Disassembly of section .text.button_init:

00000466 <button_init>:
}

void button_init(void){
	PORTB |= (1 << 7);
 466:	85 b1       	in	r24, 0x05	; 5
 468:	80 68       	ori	r24, 0x80	; 128
 46a:	85 b9       	out	0x05, r24	; 5
	DDRB = (1<<DDB7);
 46c:	80 e8       	ldi	r24, 0x80	; 128
 46e:	84 b9       	out	0x04, r24	; 4
 470:	08 95       	ret

Disassembly of section .text.is_prime:

00000256 <is_prime>:

void button(){
	while(1){
		LCDDR0 = (LCDDR0 & 0x4) ? 0x00 : 0x4;
		while(PINB & (0x1<<PINB7));
		while(!(PINB & (0x1<<PINB7)));
 256:	8f 92       	push	r8
 258:	9f 92       	push	r9
 25a:	af 92       	push	r10
 25c:	bf 92       	push	r11
 25e:	cf 92       	push	r12
 260:	df 92       	push	r13
 262:	ef 92       	push	r14
 264:	ff 92       	push	r15
 266:	4b 01       	movw	r8, r22
 268:	5c 01       	movw	r10, r24
 26a:	c1 2c       	mov	r12, r1
 26c:	d1 2c       	mov	r13, r1
 26e:	76 01       	movw	r14, r12
 270:	68 94       	set
 272:	c1 f8       	bld	r12, 1
 274:	0f c0       	rjmp	.+30     	; 0x294 <is_prime+0x3e>
 276:	c5 01       	movw	r24, r10
 278:	b4 01       	movw	r22, r8
 27a:	a7 01       	movw	r20, r14
 27c:	96 01       	movw	r18, r12
 27e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__divmodsi4>
 282:	67 2b       	or	r22, r23
 284:	68 2b       	or	r22, r24
 286:	69 2b       	or	r22, r25
 288:	61 f0       	breq	.+24     	; 0x2a2 <is_prime+0x4c>
 28a:	8f ef       	ldi	r24, 0xFF	; 255
 28c:	c8 1a       	sub	r12, r24
 28e:	d8 0a       	sbc	r13, r24
 290:	e8 0a       	sbc	r14, r24
 292:	f8 0a       	sbc	r15, r24
 294:	c8 14       	cp	r12, r8
 296:	d9 04       	cpc	r13, r9
 298:	ea 04       	cpc	r14, r10
 29a:	fb 04       	cpc	r15, r11
 29c:	64 f3       	brlt	.-40     	; 0x276 <is_prime+0x20>
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	01 c0       	rjmp	.+2      	; 0x2a4 <is_prime+0x4e>
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	ff 90       	pop	r15
 2a6:	ef 90       	pop	r14
 2a8:	df 90       	pop	r13
 2aa:	cf 90       	pop	r12
 2ac:	bf 90       	pop	r11
 2ae:	af 90       	pop	r10
 2b0:	9f 90       	pop	r9
 2b2:	8f 90       	pop	r8
 2b4:	08 95       	ret

Disassembly of section .text.blink4:

000002b6 <blink4>:
	}
}

void blink4(){
	TCCR1B |= (1 << CS12);
 2b6:	e1 e8       	ldi	r30, 0x81	; 129
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	80 81       	ld	r24, Z
 2bc:	84 60       	ori	r24, 0x04	; 4
 2be:	80 83       	st	Z, r24
	
	uint16_t half = 32768;

	uint16_t current_time = TCNT1;
 2c0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 2c4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
		
	//LCDDR0 = 0x0;
	LCDDR2 &= ~(4 << 0); // Släck segment för "1"
 2c8:	ee ee       	ldi	r30, 0xEE	; 238
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	80 81       	ld	r24, Z
 2ce:	8b 7f       	andi	r24, 0xFB	; 251
 2d0:	80 83       	st	Z, r24
	while(TCNT1 != current_time + half){}
 2d2:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 2d6:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 2da:	ca 01       	movw	r24, r20
 2dc:	90 58       	subi	r25, 0x80	; 128
 2de:	28 17       	cp	r18, r24
 2e0:	39 07       	cpc	r19, r25
 2e2:	b9 f7       	brne	.-18     	; 0x2d2 <blink4+0x1c>
		
	uint16_t current_time2 = TCNT1;
 2e4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 2e8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
		
	//LCDDR0 = 0x001;
	LCDDR2 |= (4 << 0); // Tänd segment för "1"
 2ec:	ee ee       	ldi	r30, 0xEE	; 238
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	84 60       	ori	r24, 0x04	; 4
 2f4:	80 83       	st	Z, r24
		
	while(TCNT1 != current_time2 + half){}
 2f6:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 2fa:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 2fe:	ca 01       	movw	r24, r20
 300:	90 58       	subi	r25, 0x80	; 128
 302:	28 17       	cp	r18, r24
 304:	39 07       	cpc	r19, r25
 306:	b9 f7       	brne	.-18     	; 0x2f6 <blink4+0x40>
}
 308:	08 95       	ret

Disassembly of section .text.primes4:

000003e4 <primes4>:


void primes4(long j){
 3e4:	cf 92       	push	r12
 3e6:	df 92       	push	r13
 3e8:	ef 92       	push	r14
 3ea:	ff 92       	push	r15
 3ec:	6b 01       	movw	r12, r22
 3ee:	7c 01       	movw	r14, r24
	if (is_prime(j)){
 3f0:	0e 94 2b 01 	call	0x256	; 0x256 <is_prime>
 3f4:	88 23       	and	r24, r24
 3f6:	21 f0       	breq	.+8      	; 0x400 <__DATA_REGION_LENGTH__>
		writeLong(j);
 3f8:	c7 01       	movw	r24, r14
 3fa:	b6 01       	movw	r22, r12
 3fc:	0e 94 cf 00 	call	0x19e	; 0x19e <writeLong>
	}
}
 400:	ff 90       	pop	r15
 402:	ef 90       	pop	r14
 404:	df 90       	pop	r13
 406:	cf 90       	pop	r12
 408:	08 95       	ret

Disassembly of section .text.button4:

0000034e <button4>:



void button4(int *check){
 34e:	dc 01       	movw	r26, r24
	if (PINB & (0x1<<PINB7) && *check)
 350:	1f 9b       	sbis	0x03, 7	; 3
 352:	0d c0       	rjmp	.+26     	; 0x36e <button4+0x20>
 354:	8d 91       	ld	r24, X+
 356:	9c 91       	ld	r25, X
 358:	11 97       	sbiw	r26, 0x01	; 1
 35a:	89 2b       	or	r24, r25
 35c:	41 f0       	breq	.+16     	; 0x36e <button4+0x20>
	{
		
		LCDDR0 &= ~(4 << 0);;
 35e:	ec ee       	ldi	r30, 0xEC	; 236
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 81       	ld	r24, Z
 364:	8b 7f       	andi	r24, 0xFB	; 251
 366:	80 83       	st	Z, r24
		*check = 0;
 368:	1d 92       	st	X+, r1
 36a:	1c 92       	st	X, r1
 36c:	08 95       	ret
	}
	else if(!(PINB & (0x1<<PINB7)))
 36e:	1f 99       	sbic	0x03, 7	; 3
 370:	09 c0       	rjmp	.+18     	; 0x384 <button4+0x36>
	{
		
		LCDDR0 |= (4 << 0);
 372:	ec ee       	ldi	r30, 0xEC	; 236
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	90 81       	ld	r25, Z
 378:	94 60       	ori	r25, 0x04	; 4
 37a:	90 83       	st	Z, r25
		*check = 1;
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	8d 93       	st	X+, r24
 382:	9c 93       	st	X, r25
 384:	08 95       	ret

Disassembly of section .text.part4:

00000386 <part4>:




void part4(){
	long j = 25000;
 386:	0f 2e       	mov	r0, r31
 388:	f8 ea       	ldi	r31, 0xA8	; 168
 38a:	cf 2e       	mov	r12, r31
 38c:	f1 e6       	ldi	r31, 0x61	; 97
 38e:	df 2e       	mov	r13, r31
 390:	e1 2c       	mov	r14, r1
 392:	f1 2c       	mov	r15, r1
 394:	f0 2d       	mov	r31, r0
	int check = 1;
	while(1){
		primes4(j);
 396:	c7 01       	movw	r24, r14
 398:	b6 01       	movw	r22, r12
 39a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <primes4>
		blink4();
 39e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <blink4>
		button4(check);
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 a7 01 	call	0x34e	; 0x34e <button4>
		j += 1;
 3aa:	8f ef       	ldi	r24, 0xFF	; 255
 3ac:	c8 1a       	sub	r12, r24
 3ae:	d8 0a       	sbc	r13, r24
 3b0:	e8 0a       	sbc	r14, r24
 3b2:	f8 0a       	sbc	r15, r24
 3b4:	f0 cf       	rjmp	.-32     	; 0x396 <part4+0x10>

Disassembly of section .text.main:

0000043a <main>:
	}
}

int main(void)
{
	CLK_init();
 43a:	0e 94 2d 02 	call	0x45a	; 0x45a <CLK_init>
	LCD_Init();
 43e:	0e 94 05 02 	call	0x40a	; 0x40a <LCD_Init>
	button_init();
 442:	0e 94 33 02 	call	0x466	; 0x466 <button_init>
	
	part4();
 446:	0e 94 c3 01 	call	0x386	; 0x386 <part4>

Disassembly of section .text.libgcc.div:

000003b6 <__divmodsi4>:
 3b6:	05 2e       	mov	r0, r21
 3b8:	97 fb       	bst	r25, 7
 3ba:	1e f4       	brtc	.+6      	; 0x3c2 <__divmodsi4+0xc>
 3bc:	00 94       	com	r0
 3be:	0e 94 25 02 	call	0x44a	; 0x44a <__negsi2>
 3c2:	57 fd       	sbrc	r21, 7
 3c4:	07 d0       	rcall	.+14     	; 0x3d4 <__divmodsi4_neg2>
 3c6:	0e 94 85 01 	call	0x30a	; 0x30a <__udivmodsi4>
 3ca:	07 fc       	sbrc	r0, 7
 3cc:	03 d0       	rcall	.+6      	; 0x3d4 <__divmodsi4_neg2>
 3ce:	4e f4       	brtc	.+18     	; 0x3e2 <__divmodsi4_exit>
 3d0:	0c 94 25 02 	jmp	0x44a	; 0x44a <__negsi2>

000003d4 <__divmodsi4_neg2>:
 3d4:	50 95       	com	r21
 3d6:	40 95       	com	r20
 3d8:	30 95       	com	r19
 3da:	21 95       	neg	r18
 3dc:	3f 4f       	sbci	r19, 0xFF	; 255
 3de:	4f 4f       	sbci	r20, 0xFF	; 255
 3e0:	5f 4f       	sbci	r21, 0xFF	; 255

000003e2 <__divmodsi4_exit>:
 3e2:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000044a <__negsi2>:
 44a:	90 95       	com	r25
 44c:	80 95       	com	r24
 44e:	70 95       	com	r23
 450:	61 95       	neg	r22
 452:	7f 4f       	sbci	r23, 0xFF	; 255
 454:	8f 4f       	sbci	r24, 0xFF	; 255
 456:	9f 4f       	sbci	r25, 0xFF	; 255
 458:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000030a <__udivmodsi4>:
 30a:	a1 e2       	ldi	r26, 0x21	; 33
 30c:	1a 2e       	mov	r1, r26
 30e:	aa 1b       	sub	r26, r26
 310:	bb 1b       	sub	r27, r27
 312:	fd 01       	movw	r30, r26
 314:	0d c0       	rjmp	.+26     	; 0x330 <__udivmodsi4_ep>

00000316 <__udivmodsi4_loop>:
 316:	aa 1f       	adc	r26, r26
 318:	bb 1f       	adc	r27, r27
 31a:	ee 1f       	adc	r30, r30
 31c:	ff 1f       	adc	r31, r31
 31e:	a2 17       	cp	r26, r18
 320:	b3 07       	cpc	r27, r19
 322:	e4 07       	cpc	r30, r20
 324:	f5 07       	cpc	r31, r21
 326:	20 f0       	brcs	.+8      	; 0x330 <__udivmodsi4_ep>
 328:	a2 1b       	sub	r26, r18
 32a:	b3 0b       	sbc	r27, r19
 32c:	e4 0b       	sbc	r30, r20
 32e:	f5 0b       	sbc	r31, r21

00000330 <__udivmodsi4_ep>:
 330:	66 1f       	adc	r22, r22
 332:	77 1f       	adc	r23, r23
 334:	88 1f       	adc	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	1a 94       	dec	r1
 33a:	69 f7       	brne	.-38     	; 0x316 <__udivmodsi4_loop>
 33c:	60 95       	com	r22
 33e:	70 95       	com	r23
 340:	80 95       	com	r24
 342:	90 95       	com	r25
 344:	9b 01       	movw	r18, r22
 346:	ac 01       	movw	r20, r24
 348:	bd 01       	movw	r22, r26
 34a:	cf 01       	movw	r24, r30
 34c:	08 95       	ret

Disassembly of section .text.__dummy_fini:

0000047a <_fini>:
 47a:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000047c <__funcs_on_exit>:
 47c:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000047e <__simulator_exit>:
 47e:	08 95       	ret

Disassembly of section .text.exit:

00000424 <exit>:
 424:	ec 01       	movw	r28, r24
 426:	0e 94 3e 02 	call	0x47c	; 0x47c <__funcs_on_exit>
 42a:	0e 94 3d 02 	call	0x47a	; 0x47a <_fini>
 42e:	ce 01       	movw	r24, r28
 430:	0e 94 3f 02 	call	0x47e	; 0x47e <__simulator_exit>
 434:	ce 01       	movw	r24, r28
 436:	0e 94 3b 02 	call	0x476	; 0x476 <_Exit>

Disassembly of section .text._Exit:

00000476 <_Exit>:
 476:	0e 94 5a 00 	call	0xb4	; 0xb4 <_exit>
