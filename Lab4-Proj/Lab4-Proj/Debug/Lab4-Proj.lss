
Lab4-Proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800100  00002318  000023ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002318  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000035b  00800170  00800170  0000241c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000241c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000244c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  0000248c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000035df  00000000  00000000  00002764  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001344  00000000  00000000  00005d43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018fb  00000000  00000000  00007087  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000dc0  00000000  00000000  00008984  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a69  00000000  00000000  00009744  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b0d  00000000  00000000  0000a1ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000248  00000000  00000000  0000ccba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <__vector_1>
       8:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__vector_2>
       c:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__vector_3>
      10:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__vector_4>
      14:	0c 94 eb 07 	jmp	0xfd6	; 0xfd6 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 56 0e 	jmp	0x1cac	; 0x1cac <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 04 0e 	jmp	0x1c08	; 0x1c08 <__vector_9>
      28:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__vector_10>
      2c:	0c 94 c9 08 	jmp	0x1192	; 0x1192 <__vector_11>
      30:	0c 94 38 09 	jmp	0x1270	; 0x1270 <__vector_12>
      34:	0c 94 a7 09 	jmp	0x134e	; 0x134e <__vector_13>
      38:	0c 94 16 0a 	jmp	0x142c	; 0x142c <__vector_14>
      3c:	0c 94 85 0a 	jmp	0x150a	; 0x150a <__vector_15>
      40:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <__vector_16>
      44:	0c 94 63 0b 	jmp	0x16c6	; 0x16c6 <__vector_17>
      48:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <__vector_18>
      4c:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <__vector_19>
      50:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <__vector_20>
      54:	0c 94 1f 0d 	jmp	0x1a3e	; 0x1a3e <__vector_21>
      58:	0c 94 8e 0d 	jmp	0x1b1c	; 0x1b1c <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e8 e1       	ldi	r30, 0x18	; 24
      70:	f3 e2       	ldi	r31, 0x23	; 35
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a0 37       	cpi	r26, 0x70	; 112
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	a0 e7       	ldi	r26, 0x70	; 112
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	ab 3c       	cpi	r26, 0xCB	; 203
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 1a 03 	call	0x634	; 0x634 <main>
      92:	0c 94 8a 11 	jmp	0x2314	; 0x2314 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <Switch>:
#include "Joystick.h"
#include "TinyTimber.h"



void Switch(InterruptHandler *self, int arg) {
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
	if (self->risingEdge){
      a6:	fc 01       	movw	r30, r24
      a8:	26 81       	ldd	r18, Z+6	; 0x06
      aa:	22 23       	and	r18, r18
      ac:	a1 f0       	breq	.+40     	; 0xd6 <Switch+0x3c>
		self->risingEdge = false;
      ae:	16 82       	std	Z+6, r1	; 0x06
		ASYNC(self->joystick, joyStickHorizontalControll, 0);		
      b0:	04 81       	ldd	r16, Z+4	; 0x04
      b2:	15 81       	ldd	r17, Z+5	; 0x05
      b4:	c1 2c       	mov	r12, r1
      b6:	d1 2c       	mov	r13, r1
      b8:	0f 2e       	mov	r0, r31
      ba:	f1 ef       	ldi	r31, 0xF1	; 241
      bc:	ef 2e       	mov	r14, r31
      be:	f0 e0       	ldi	r31, 0x00	; 0
      c0:	ff 2e       	mov	r15, r31
      c2:	f0 2d       	mov	r31, r0
      c4:	20 e0       	ldi	r18, 0x00	; 0
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	a9 01       	movw	r20, r18
      ca:	60 e0       	ldi	r22, 0x00	; 0
      cc:	70 e0       	ldi	r23, 0x00	; 0
      ce:	cb 01       	movw	r24, r22
      d0:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <async>
      d4:	03 c0       	rjmp	.+6      	; 0xdc <Switch+0x42>
	}else{
		self->risingEdge = true;
      d6:	21 e0       	ldi	r18, 0x01	; 1
      d8:	fc 01       	movw	r30, r24
      da:	26 83       	std	Z+6, r18	; 0x06
	}
}
      dc:	1f 91       	pop	r17
      de:	0f 91       	pop	r16
      e0:	ff 90       	pop	r15
      e2:	ef 90       	pop	r14
      e4:	df 90       	pop	r13
      e6:	cf 90       	pop	r12
      e8:	08 95       	ret

000000ea <Change>:

/* Interrupt function for changing the active pulse generator frequency */
void Change(InterruptHandler *self, int arg) {
      ea:	cf 92       	push	r12
      ec:	df 92       	push	r13
      ee:	ef 92       	push	r14
      f0:	ff 92       	push	r15
      f2:	0f 93       	push	r16
      f4:	1f 93       	push	r17
	ASYNC(self->joystick, joyStickVerticalControll, 0);
      f6:	fc 01       	movw	r30, r24
      f8:	04 81       	ldd	r16, Z+4	; 0x04
      fa:	15 81       	ldd	r17, Z+5	; 0x05
      fc:	c1 2c       	mov	r12, r1
      fe:	d1 2c       	mov	r13, r1
     100:	0f 2e       	mov	r0, r31
     102:	f2 e2       	ldi	r31, 0x22	; 34
     104:	ef 2e       	mov	r14, r31
     106:	f1 e0       	ldi	r31, 0x01	; 1
     108:	ff 2e       	mov	r15, r31
     10a:	f0 2d       	mov	r31, r0
     10c:	20 e0       	ldi	r18, 0x00	; 0
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	a9 01       	movw	r20, r18
     112:	60 e0       	ldi	r22, 0x00	; 0
     114:	70 e0       	ldi	r23, 0x00	; 0
     116:	cb 01       	movw	r24, r22
     118:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <async>
     11c:	1f 91       	pop	r17
     11e:	0f 91       	pop	r16
     120:	ff 90       	pop	r15
     122:	ef 90       	pop	r14
     124:	df 90       	pop	r13
     126:	cf 90       	pop	r12
     128:	08 95       	ret

0000012a <holdJoyStick>:
#include "Joystick.h"
#include <avr/io.h>
#include "GUI.h"

int holdJoyStick(Joystick *self, int unUsed) {
     12a:	cf 92       	push	r12
     12c:	df 92       	push	r13
     12e:	ef 92       	push	r14
     130:	ff 92       	push	r15
     132:	0f 93       	push	r16
     134:	1f 93       	push	r17
     136:	cf 93       	push	r28
     138:	df 93       	push	r29
     13a:	ec 01       	movw	r28, r24
	if (!(PINB & (1 << PB7))) { // DOWN
     13c:	1f 99       	sbic	0x03, 7	; 3
     13e:	22 c0       	rjmp	.+68     	; 0x184 <holdJoyStick+0x5a>
		ASYNC(self->gui, freqDown, 0); // SYNC till ASYNC
     140:	0c 81       	ldd	r16, Y+4	; 0x04
     142:	1d 81       	ldd	r17, Y+5	; 0x05
     144:	c1 2c       	mov	r12, r1
     146:	d1 2c       	mov	r13, r1
     148:	0f 2e       	mov	r0, r31
     14a:	f0 eb       	ldi	r31, 0xB0	; 176
     14c:	ef 2e       	mov	r14, r31
     14e:	f1 e0       	ldi	r31, 0x01	; 1
     150:	ff 2e       	mov	r15, r31
     152:	f0 2d       	mov	r31, r0
     154:	20 e0       	ldi	r18, 0x00	; 0
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	a9 01       	movw	r20, r18
     15a:	60 e0       	ldi	r22, 0x00	; 0
     15c:	70 e0       	ldi	r23, 0x00	; 0
     15e:	cb 01       	movw	r24, r22
     160:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <async>
		AFTER(MSEC(50), self, holdJoyStick, 0);
     164:	0f 2e       	mov	r0, r31
     166:	f5 e9       	ldi	r31, 0x95	; 149
     168:	ef 2e       	mov	r14, r31
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	ff 2e       	mov	r15, r31
     16e:	f0 2d       	mov	r31, r0
     170:	8e 01       	movw	r16, r28
     172:	20 e0       	ldi	r18, 0x00	; 0
     174:	30 e0       	ldi	r19, 0x00	; 0
     176:	a9 01       	movw	r20, r18
     178:	6a e1       	ldi	r22, 0x1A	; 26
     17a:	76 e0       	ldi	r23, 0x06	; 6
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <async>
	}
	if (!(PINB & (1 << PB6))) { // UP
     184:	1e 99       	sbic	0x03, 6	; 3
     186:	22 c0       	rjmp	.+68     	; 0x1cc <holdJoyStick+0xa2>
		ASYNC(self->gui, freqUp, 0); // SYNC till ASYNC
     188:	0c 81       	ldd	r16, Y+4	; 0x04
     18a:	1d 81       	ldd	r17, Y+5	; 0x05
     18c:	c1 2c       	mov	r12, r1
     18e:	d1 2c       	mov	r13, r1
     190:	0f 2e       	mov	r0, r31
     192:	f7 e7       	ldi	r31, 0x77	; 119
     194:	ef 2e       	mov	r14, r31
     196:	f1 e0       	ldi	r31, 0x01	; 1
     198:	ff 2e       	mov	r15, r31
     19a:	f0 2d       	mov	r31, r0
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	a9 01       	movw	r20, r18
     1a2:	60 e0       	ldi	r22, 0x00	; 0
     1a4:	70 e0       	ldi	r23, 0x00	; 0
     1a6:	cb 01       	movw	r24, r22
     1a8:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <async>
		AFTER(MSEC(50), self, holdJoyStick, 0);
     1ac:	0f 2e       	mov	r0, r31
     1ae:	f5 e9       	ldi	r31, 0x95	; 149
     1b0:	ef 2e       	mov	r14, r31
     1b2:	f0 e0       	ldi	r31, 0x00	; 0
     1b4:	ff 2e       	mov	r15, r31
     1b6:	f0 2d       	mov	r31, r0
     1b8:	8e 01       	movw	r16, r28
     1ba:	20 e0       	ldi	r18, 0x00	; 0
     1bc:	30 e0       	ldi	r19, 0x00	; 0
     1be:	a9 01       	movw	r20, r18
     1c0:	6a e1       	ldi	r22, 0x1A	; 26
     1c2:	76 e0       	ldi	r23, 0x06	; 6
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <async>
	}
	return 0;
}
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	df 91       	pop	r29
     1d2:	cf 91       	pop	r28
     1d4:	1f 91       	pop	r17
     1d6:	0f 91       	pop	r16
     1d8:	ff 90       	pop	r15
     1da:	ef 90       	pop	r14
     1dc:	df 90       	pop	r13
     1de:	cf 90       	pop	r12
     1e0:	08 95       	ret

000001e2 <joyStickHorizontalControll>:

int joyStickHorizontalControll(Joystick *self, int unUsed){
     1e2:	cf 92       	push	r12
     1e4:	df 92       	push	r13
     1e6:	ef 92       	push	r14
     1e8:	ff 92       	push	r15
     1ea:	0f 93       	push	r16
     1ec:	1f 93       	push	r17
     1ee:	ac 01       	movw	r20, r24
	if((!(PINE & (1 << PE1)) | !(PINE & (1 << PE6)))){
     1f0:	2c b1       	in	r18, 0x0c	; 12
     1f2:	3c b1       	in	r19, 0x0c	; 12
     1f4:	26 95       	lsr	r18
     1f6:	91 e0       	ldi	r25, 0x01	; 1
     1f8:	29 27       	eor	r18, r25
     1fa:	21 70       	andi	r18, 0x01	; 1
     1fc:	32 95       	swap	r19
     1fe:	36 95       	lsr	r19
     200:	36 95       	lsr	r19
     202:	33 70       	andi	r19, 0x03	; 3
     204:	93 27       	eor	r25, r19
     206:	91 70       	andi	r25, 0x01	; 1
     208:	92 2b       	or	r25, r18
     20a:	99 f0       	breq	.+38     	; 0x232 <__EEPROM_REGION_LENGTH__+0x32>
     20c:	fa 01       	movw	r30, r20
		ASYNC(self->gui, switchState,0);
     20e:	04 81       	ldd	r16, Z+4	; 0x04
     210:	15 81       	ldd	r17, Z+5	; 0x05
     212:	c1 2c       	mov	r12, r1
     214:	d1 2c       	mov	r13, r1
     216:	0f 2e       	mov	r0, r31
     218:	f9 ee       	ldi	r31, 0xE9	; 233
     21a:	ef 2e       	mov	r14, r31
     21c:	f1 e0       	ldi	r31, 0x01	; 1
     21e:	ff 2e       	mov	r15, r31
     220:	f0 2d       	mov	r31, r0
     222:	20 e0       	ldi	r18, 0x00	; 0
     224:	30 e0       	ldi	r19, 0x00	; 0
     226:	a9 01       	movw	r20, r18
     228:	60 e0       	ldi	r22, 0x00	; 0
     22a:	70 e0       	ldi	r23, 0x00	; 0
     22c:	cb 01       	movw	r24, r22
     22e:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <async>
		//AFTER(MSEC(50), self->gui, switchState, 0);
	}
	return 0;
}
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	1f 91       	pop	r17
     238:	0f 91       	pop	r16
     23a:	ff 90       	pop	r15
     23c:	ef 90       	pop	r14
     23e:	df 90       	pop	r13
     240:	cf 90       	pop	r12
     242:	08 95       	ret

00000244 <joyStickVerticalControll>:

int joyStickVerticalControll(Joystick *self, int unUsed){
     244:	cf 92       	push	r12
     246:	df 92       	push	r13
     248:	ef 92       	push	r14
     24a:	ff 92       	push	r15
     24c:	0f 93       	push	r16
     24e:	1f 93       	push	r17
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	ec 01       	movw	r28, r24
	if (!(PINB & (1 << PB7))) { //DOWN
     256:	1f 99       	sbic	0x03, 7	; 3
     258:	11 c0       	rjmp	.+34     	; 0x27c <joyStickVerticalControll+0x38>
		ASYNC(self, holdJoyStick, 0);
     25a:	c1 2c       	mov	r12, r1
     25c:	d1 2c       	mov	r13, r1
     25e:	0f 2e       	mov	r0, r31
     260:	f5 e9       	ldi	r31, 0x95	; 149
     262:	ef 2e       	mov	r14, r31
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	ff 2e       	mov	r15, r31
     268:	f0 2d       	mov	r31, r0
     26a:	8c 01       	movw	r16, r24
     26c:	20 e0       	ldi	r18, 0x00	; 0
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	a9 01       	movw	r20, r18
     272:	60 e0       	ldi	r22, 0x00	; 0
     274:	70 e0       	ldi	r23, 0x00	; 0
     276:	cb 01       	movw	r24, r22
     278:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <async>

		//AFTER(MSEC(50), self, holdJoyStick, 0);
	}
	if (!(PINB & (1 << PB6))) { //UP
     27c:	1e 99       	sbic	0x03, 6	; 3
     27e:	11 c0       	rjmp	.+34     	; 0x2a2 <joyStickVerticalControll+0x5e>
		ASYNC(self, holdJoyStick, 0);
     280:	c1 2c       	mov	r12, r1
     282:	d1 2c       	mov	r13, r1
     284:	0f 2e       	mov	r0, r31
     286:	f5 e9       	ldi	r31, 0x95	; 149
     288:	ef 2e       	mov	r14, r31
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	ff 2e       	mov	r15, r31
     28e:	f0 2d       	mov	r31, r0
     290:	8e 01       	movw	r16, r28
     292:	20 e0       	ldi	r18, 0x00	; 0
     294:	30 e0       	ldi	r19, 0x00	; 0
     296:	a9 01       	movw	r20, r18
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	70 e0       	ldi	r23, 0x00	; 0
     29c:	cb 01       	movw	r24, r22
     29e:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <async>
		//AFTER(MSEC(50), self, holdJoyStick, 0);
		
	}
	if (!(PINB & (1 << PB4))) { //PRESS
     2a2:	1c 99       	sbic	0x03, 4	; 3
     2a4:	19 c0       	rjmp	.+50     	; 0x2d8 <joyStickVerticalControll+0x94>
		if (self->risingEdge){
     2a6:	8e 81       	ldd	r24, Y+6	; 0x06
     2a8:	88 23       	and	r24, r24
     2aa:	a1 f0       	breq	.+40     	; 0x2d4 <joyStickVerticalControll+0x90>
			self->risingEdge = false;
     2ac:	1e 82       	std	Y+6, r1	; 0x06
			ASYNC(self->gui, press, 0);	
     2ae:	0c 81       	ldd	r16, Y+4	; 0x04
     2b0:	1d 81       	ldd	r17, Y+5	; 0x05
     2b2:	c1 2c       	mov	r12, r1
     2b4:	d1 2c       	mov	r13, r1
     2b6:	0f 2e       	mov	r0, r31
     2b8:	fb ef       	ldi	r31, 0xFB	; 251
     2ba:	ef 2e       	mov	r14, r31
     2bc:	f1 e0       	ldi	r31, 0x01	; 1
     2be:	ff 2e       	mov	r15, r31
     2c0:	f0 2d       	mov	r31, r0
     2c2:	20 e0       	ldi	r18, 0x00	; 0
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	a9 01       	movw	r20, r18
     2c8:	60 e0       	ldi	r22, 0x00	; 0
     2ca:	70 e0       	ldi	r23, 0x00	; 0
     2cc:	cb 01       	movw	r24, r22
     2ce:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <async>
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <joyStickVerticalControll+0x94>
		}else{
			self->risingEdge = true;
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	8e 83       	std	Y+6, r24	; 0x06
		}
		//AFTER(MSEC(50), self->gui, press, 0);
	}
	return 0;
}
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	1f 91       	pop	r17
     2e2:	0f 91       	pop	r16
     2e4:	ff 90       	pop	r15
     2e6:	ef 90       	pop	r14
     2e8:	df 90       	pop	r13
     2ea:	cf 90       	pop	r12
     2ec:	08 95       	ret

000002ee <freqUp>:
#include "LCD_Driver.h"
#include "PulseGenerator.h"
#include <avr/io.h>
//TODO: Check every call if it should be SYNC or SYNC

int freqUp(GUI *self, int unUsed){
     2ee:	cf 92       	push	r12
     2f0:	df 92       	push	r13
     2f2:	ef 92       	push	r14
     2f4:	ff 92       	push	r15
     2f6:	0f 93       	push	r16
     2f8:	1f 93       	push	r17
	if(self->isLeft){
     2fa:	fc 01       	movw	r30, r24
     2fc:	24 81       	ldd	r18, Z+4	; 0x04
     2fe:	22 23       	and	r18, r18
     300:	99 f0       	breq	.+38     	; 0x328 <freqUp+0x3a>
		ASYNC(self->left, increase, 0);	
     302:	05 81       	ldd	r16, Z+5	; 0x05
     304:	16 81       	ldd	r17, Z+6	; 0x06
     306:	c1 2c       	mov	r12, r1
     308:	d1 2c       	mov	r13, r1
     30a:	0f 2e       	mov	r0, r31
     30c:	f7 ea       	ldi	r31, 0xA7	; 167
     30e:	ef 2e       	mov	r14, r31
     310:	f3 e0       	ldi	r31, 0x03	; 3
     312:	ff 2e       	mov	r15, r31
     314:	f0 2d       	mov	r31, r0
     316:	20 e0       	ldi	r18, 0x00	; 0
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	a9 01       	movw	r20, r18
     31c:	60 e0       	ldi	r22, 0x00	; 0
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	cb 01       	movw	r24, r22
     322:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <async>
     326:	13 c0       	rjmp	.+38     	; 0x34e <freqUp+0x60>
	}else{
		ASYNC(self->right, increase, 0);
     328:	fc 01       	movw	r30, r24
     32a:	07 81       	ldd	r16, Z+7	; 0x07
     32c:	10 85       	ldd	r17, Z+8	; 0x08
     32e:	c1 2c       	mov	r12, r1
     330:	d1 2c       	mov	r13, r1
     332:	0f 2e       	mov	r0, r31
     334:	f7 ea       	ldi	r31, 0xA7	; 167
     336:	ef 2e       	mov	r14, r31
     338:	f3 e0       	ldi	r31, 0x03	; 3
     33a:	ff 2e       	mov	r15, r31
     33c:	f0 2d       	mov	r31, r0
     33e:	20 e0       	ldi	r18, 0x00	; 0
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	a9 01       	movw	r20, r18
     344:	60 e0       	ldi	r22, 0x00	; 0
     346:	70 e0       	ldi	r23, 0x00	; 0
     348:	cb 01       	movw	r24, r22
     34a:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <async>
	}
	
	return 0;
}
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	1f 91       	pop	r17
     354:	0f 91       	pop	r16
     356:	ff 90       	pop	r15
     358:	ef 90       	pop	r14
     35a:	df 90       	pop	r13
     35c:	cf 90       	pop	r12
     35e:	08 95       	ret

00000360 <freqDown>:

int freqDown(GUI *self, int unUsed){
     360:	cf 92       	push	r12
     362:	df 92       	push	r13
     364:	ef 92       	push	r14
     366:	ff 92       	push	r15
     368:	0f 93       	push	r16
     36a:	1f 93       	push	r17
	if(self->isLeft){
     36c:	fc 01       	movw	r30, r24
     36e:	24 81       	ldd	r18, Z+4	; 0x04
     370:	22 23       	and	r18, r18
     372:	99 f0       	breq	.+38     	; 0x39a <freqDown+0x3a>
		ASYNC(self->left, decrease, 0);
     374:	05 81       	ldd	r16, Z+5	; 0x05
     376:	16 81       	ldd	r17, Z+6	; 0x06
     378:	c1 2c       	mov	r12, r1
     37a:	d1 2c       	mov	r13, r1
     37c:	0f 2e       	mov	r0, r31
     37e:	f5 ef       	ldi	r31, 0xF5	; 245
     380:	ef 2e       	mov	r14, r31
     382:	f3 e0       	ldi	r31, 0x03	; 3
     384:	ff 2e       	mov	r15, r31
     386:	f0 2d       	mov	r31, r0
     388:	20 e0       	ldi	r18, 0x00	; 0
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	a9 01       	movw	r20, r18
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	70 e0       	ldi	r23, 0x00	; 0
     392:	cb 01       	movw	r24, r22
     394:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <async>
     398:	13 c0       	rjmp	.+38     	; 0x3c0 <freqDown+0x60>
	}else{
		ASYNC(self->right, decrease, 0);
     39a:	fc 01       	movw	r30, r24
     39c:	07 81       	ldd	r16, Z+7	; 0x07
     39e:	10 85       	ldd	r17, Z+8	; 0x08
     3a0:	c1 2c       	mov	r12, r1
     3a2:	d1 2c       	mov	r13, r1
     3a4:	0f 2e       	mov	r0, r31
     3a6:	f5 ef       	ldi	r31, 0xF5	; 245
     3a8:	ef 2e       	mov	r14, r31
     3aa:	f3 e0       	ldi	r31, 0x03	; 3
     3ac:	ff 2e       	mov	r15, r31
     3ae:	f0 2d       	mov	r31, r0
     3b0:	20 e0       	ldi	r18, 0x00	; 0
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	a9 01       	movw	r20, r18
     3b6:	60 e0       	ldi	r22, 0x00	; 0
     3b8:	70 e0       	ldi	r23, 0x00	; 0
     3ba:	cb 01       	movw	r24, r22
     3bc:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <async>
	}
	return 0;
}
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	1f 91       	pop	r17
     3c6:	0f 91       	pop	r16
     3c8:	ff 90       	pop	r15
     3ca:	ef 90       	pop	r14
     3cc:	df 90       	pop	r13
     3ce:	cf 90       	pop	r12
     3d0:	08 95       	ret

000003d2 <switchState>:

int switchState(GUI *self, int unUsed){
	self->isLeft = self->isLeft ? false : true;
     3d2:	fc 01       	movw	r30, r24
     3d4:	24 81       	ldd	r18, Z+4	; 0x04
     3d6:	22 23       	and	r18, r18
     3d8:	11 f0       	breq	.+4      	; 0x3de <switchState+0xc>
     3da:	20 e0       	ldi	r18, 0x00	; 0
     3dc:	01 c0       	rjmp	.+2      	; 0x3e0 <switchState+0xe>
     3de:	21 e0       	ldi	r18, 0x01	; 1
     3e0:	fc 01       	movw	r30, r24
     3e2:	24 83       	std	Z+4, r18	; 0x04
	LCDDR13 ^= 1;
     3e4:	e9 ef       	ldi	r30, 0xF9	; 249
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	90 81       	ld	r25, Z
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	89 27       	eor	r24, r25
     3ee:	80 83       	st	Z, r24
	return 0;
}
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	08 95       	ret

000003f6 <press>:

int press(GUI *self, int unUsed){
     3f6:	cf 92       	push	r12
     3f8:	df 92       	push	r13
     3fa:	ef 92       	push	r14
     3fc:	ff 92       	push	r15
     3fe:	0f 93       	push	r16
     400:	1f 93       	push	r17
	if(self->isLeft){
     402:	fc 01       	movw	r30, r24
     404:	24 81       	ldd	r18, Z+4	; 0x04
     406:	22 23       	and	r18, r18
     408:	99 f0       	breq	.+38     	; 0x430 <__DATA_REGION_LENGTH__+0x30>
		ASYNC(self->left, reset, 0);  
     40a:	05 81       	ldd	r16, Z+5	; 0x05
     40c:	16 81       	ldd	r17, Z+6	; 0x06
     40e:	c1 2c       	mov	r12, r1
     410:	d1 2c       	mov	r13, r1
     412:	0f 2e       	mov	r0, r31
     414:	f3 e4       	ldi	r31, 0x43	; 67
     416:	ef 2e       	mov	r14, r31
     418:	f4 e0       	ldi	r31, 0x04	; 4
     41a:	ff 2e       	mov	r15, r31
     41c:	f0 2d       	mov	r31, r0
     41e:	20 e0       	ldi	r18, 0x00	; 0
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	a9 01       	movw	r20, r18
     424:	60 e0       	ldi	r22, 0x00	; 0
     426:	70 e0       	ldi	r23, 0x00	; 0
     428:	cb 01       	movw	r24, r22
     42a:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <async>
     42e:	13 c0       	rjmp	.+38     	; 0x456 <__DATA_REGION_LENGTH__+0x56>
	} else {
		ASYNC(self->right, reset, 0); 
     430:	fc 01       	movw	r30, r24
     432:	07 81       	ldd	r16, Z+7	; 0x07
     434:	10 85       	ldd	r17, Z+8	; 0x08
     436:	c1 2c       	mov	r12, r1
     438:	d1 2c       	mov	r13, r1
     43a:	0f 2e       	mov	r0, r31
     43c:	f3 e4       	ldi	r31, 0x43	; 67
     43e:	ef 2e       	mov	r14, r31
     440:	f4 e0       	ldi	r31, 0x04	; 4
     442:	ff 2e       	mov	r15, r31
     444:	f0 2d       	mov	r31, r0
     446:	20 e0       	ldi	r18, 0x00	; 0
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	a9 01       	movw	r20, r18
     44c:	60 e0       	ldi	r22, 0x00	; 0
     44e:	70 e0       	ldi	r23, 0x00	; 0
     450:	cb 01       	movw	r24, r22
     452:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <async>
	}
	return 0;
}
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	1f 91       	pop	r17
     45c:	0f 91       	pop	r16
     45e:	ff 90       	pop	r15
     460:	ef 90       	pop	r14
     462:	df 90       	pop	r13
     464:	cf 90       	pop	r12
     466:	08 95       	ret

00000468 <CPUCLK_Init>:
#include "LCD_Driver.h"
#include <avr/io.h>
#include <stdbool.h>

void CPUCLK_Init(void){
	CLKPR = 0x80;
     468:	e1 e6       	ldi	r30, 0x61	; 97
     46a:	f0 e0       	ldi	r31, 0x00	; 0
     46c:	80 e8       	ldi	r24, 0x80	; 128
     46e:	80 83       	st	Z, r24
	CLKPR = 0x00;
     470:	10 82       	st	Z, r1
     472:	08 95       	ret

00000474 <LCD_Init>:
}

void LCD_Init(void){
	//Use 32 kHz crystal oscillator
	//1/3 Bias and 1/4 duty, SEG0:SEG24 is used as port pins
	LCDCRB = (1<<LCDCS) | (1<<LCDMUX0)| (1<<LCDMUX1)|(1<<LCDPM0) |(1<<LCDPM1) |(1<<LCDPM2);
     474:	87 eb       	ldi	r24, 0xB7	; 183
     476:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	/* Using 16 as prescaler selection and 8 as LCD Clock Divide */
	/* gives a frame rate of 32 Hz */
	LCDFRR = (1<<LCDCD0) | (1<<LCDCD1) | (1<<LCDCD2);
     47a:	87 e0       	ldi	r24, 0x07	; 7
     47c:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
	/* Set segment drive time to 300 μs and output voltage to 3.35 V*/
	LCDCCR = (1<<LCDDC0) | (1<<LCDCC1) | (1<<LCDCC2) | (1<<LCDCC3);
     480:	8e e2       	ldi	r24, 0x2E	; 46
     482:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	/* Enable LCD, low power waveform and no interrupt enabled */
	LCDCRA = (1<<LCDEN);
     486:	80 e8       	ldi	r24, 0x80	; 128
     488:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>

	//Indicator bits 
	LCDDR13 ^= 1;
     48c:	e9 ef       	ldi	r30, 0xF9	; 249
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	90 81       	ld	r25, Z
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	89 27       	eor	r24, r25
     496:	80 83       	st	Z, r24
     498:	08 95       	ret

0000049a <CLK_Init>:
}

void CLK_Init(){
	// Timer
	DDRE |= (1 << PE4) | (1<< PE6) | (1<<PE5);
     49a:	8d b1       	in	r24, 0x0d	; 13
     49c:	80 67       	ori	r24, 0x70	; 112
     49e:	8d b9       	out	0x0d, r24	; 13
	PORTE |= (1<<PE5);
     4a0:	8e b1       	in	r24, 0x0e	; 14
     4a2:	80 62       	ori	r24, 0x20	; 32
     4a4:	8e b9       	out	0x0e, r24	; 14
     4a6:	08 95       	ret

000004a8 <BUTTON_Init>:
}

void BUTTON_Init(){
	PORTB |= (1 << 7) | (1 << 6) | (1 << 4);
     4a8:	85 b1       	in	r24, 0x05	; 5
     4aa:	80 6d       	ori	r24, 0xD0	; 208
     4ac:	85 b9       	out	0x05, r24	; 5
	PORTE |= (1 << 3) | (1 << 2);
     4ae:	8e b1       	in	r24, 0x0e	; 14
     4b0:	8c 60       	ori	r24, 0x0C	; 12
     4b2:	8e b9       	out	0x0e, r24	; 14

    //Interrupt enables
	EIMSK  |= (1 << PCIE1) | (1 << PCIE0);
     4b4:	8d b3       	in	r24, 0x1d	; 29
     4b6:	80 6c       	ori	r24, 0xC0	; 192
     4b8:	8d bb       	out	0x1d, r24	; 29
	PCMSK1 |= (1 << PCINT12) | (1 << PCINT14) | (1 << PCINT15);
     4ba:	ec e6       	ldi	r30, 0x6C	; 108
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	80 81       	ld	r24, Z
     4c0:	80 6d       	ori	r24, 0xD0	; 208
     4c2:	80 83       	st	Z, r24
	
	PCMSK0 |= (1 << PCINT2) | (1 << PCINT3);
     4c4:	eb e6       	ldi	r30, 0x6B	; 107
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	80 81       	ld	r24, Z
     4ca:	8c 60       	ori	r24, 0x0C	; 12
     4cc:	80 83       	st	Z, r24
     4ce:	08 95       	ret

000004d0 <INIT>:
}

void INIT(){
	CPUCLK_Init();
     4d0:	0e 94 34 02 	call	0x468	; 0x468 <CPUCLK_Init>
	LCD_Init();
     4d4:	0e 94 3a 02 	call	0x474	; 0x474 <LCD_Init>
	CLK_Init();
     4d8:	0e 94 4d 02 	call	0x49a	; 0x49a <CLK_Init>
	BUTTON_Init();
     4dc:	0e 94 54 02 	call	0x4a8	; 0x4a8 <BUTTON_Init>
     4e0:	08 95       	ret

000004e2 <writeChar>:
	LCDDR6 = data2;
}

void writeChar(char ch, int pos){
	/* Returns if given input is not possible to print */
	if(pos < 0 || pos > 5 || ch < 48 || ch > 57){
     4e2:	66 30       	cpi	r22, 0x06	; 6
     4e4:	71 05       	cpc	r23, r1
     4e6:	08 f0       	brcs	.+2      	; 0x4ea <writeChar+0x8>
     4e8:	6e c0       	rjmp	.+220    	; 0x5c6 <__stack+0xc7>
     4ea:	80 33       	cpi	r24, 0x30	; 48
     4ec:	08 f4       	brcc	.+2      	; 0x4f0 <writeChar+0xe>
     4ee:	6b c0       	rjmp	.+214    	; 0x5c6 <__stack+0xc7>
     4f0:	8a 33       	cpi	r24, 0x3A	; 58
     4f2:	08 f0       	brcs	.+2      	; 0x4f6 <writeChar+0x14>
     4f4:	68 c0       	rjmp	.+208    	; 0x5c6 <__stack+0xc7>
		return;
	}
	volatile uint8_t *lcd_base = &LCDDR0 + offsetPos[pos];
     4f6:	fb 01       	movw	r30, r22
     4f8:	e1 5c       	subi	r30, 0xC1	; 193
     4fa:	fe 4f       	sbci	r31, 0xFE	; 254
     4fc:	e0 81       	ld	r30, Z
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	e4 51       	subi	r30, 0x14	; 20
     502:	ff 4f       	sbci	r31, 0xFF	; 255
	
	int number = (int)ch - 48;
     504:	a8 2f       	mov	r26, r24
     506:	b0 e0       	ldi	r27, 0x00	; 0
     508:	d0 97       	sbiw	r26, 0x30	; 48
	int shift = 0;
	/*Clears the part of the display we want to write onto */
	if (pos % 2 == 1){
     50a:	61 70       	andi	r22, 0x01	; 1
     50c:	70 78       	andi	r23, 0x80	; 128
     50e:	77 23       	and	r23, r23
     510:	34 f4       	brge	.+12     	; 0x51e <__stack+0x1f>
     512:	61 50       	subi	r22, 0x01	; 1
     514:	71 09       	sbc	r23, r1
     516:	6e 6f       	ori	r22, 0xFE	; 254
     518:	7f 6f       	ori	r23, 0xFF	; 255
     51a:	6f 5f       	subi	r22, 0xFF	; 255
     51c:	7f 4f       	sbci	r23, 0xFF	; 255
     51e:	61 30       	cpi	r22, 0x01	; 1
     520:	71 05       	cpc	r23, r1
     522:	71 f4       	brne	.+28     	; 0x540 <__stack+0x41>
		shift = 4;
		lcd_base[0]  = lcd_base[0]  & 0x0F;
     524:	80 81       	ld	r24, Z
     526:	8f 70       	andi	r24, 0x0F	; 15
     528:	80 83       	st	Z, r24
		lcd_base[5]  = lcd_base[5]  & 0x0F;
     52a:	85 81       	ldd	r24, Z+5	; 0x05
     52c:	8f 70       	andi	r24, 0x0F	; 15
     52e:	85 83       	std	Z+5, r24	; 0x05
		lcd_base[10] = lcd_base[10] & 0x0F;
     530:	82 85       	ldd	r24, Z+10	; 0x0a
     532:	8f 70       	andi	r24, 0x0F	; 15
     534:	82 87       	std	Z+10, r24	; 0x0a
		lcd_base[15] = lcd_base[15] & 0x0F;
     536:	87 85       	ldd	r24, Z+15	; 0x0f
     538:	8f 70       	andi	r24, 0x0F	; 15
     53a:	87 87       	std	Z+15, r24	; 0x0f
	
	int number = (int)ch - 48;
	int shift = 0;
	/*Clears the part of the display we want to write onto */
	if (pos % 2 == 1){
		shift = 4;
     53c:	24 e0       	ldi	r18, 0x04	; 4
     53e:	0d c0       	rjmp	.+26     	; 0x55a <__stack+0x5b>
		lcd_base[0]  = lcd_base[0]  & 0x0F;
		lcd_base[5]  = lcd_base[5]  & 0x0F;
		lcd_base[10] = lcd_base[10] & 0x0F;
		lcd_base[15] = lcd_base[15] & 0x0F;
		}else{
		lcd_base[0]  = lcd_base[0]  & 0xF0;
     540:	80 81       	ld	r24, Z
     542:	80 7f       	andi	r24, 0xF0	; 240
     544:	80 83       	st	Z, r24
		lcd_base[5]  = lcd_base[5]  & 0xF0;
     546:	85 81       	ldd	r24, Z+5	; 0x05
     548:	80 7f       	andi	r24, 0xF0	; 240
     54a:	85 83       	std	Z+5, r24	; 0x05
		lcd_base[10] = lcd_base[10] & 0xF0;
     54c:	82 85       	ldd	r24, Z+10	; 0x0a
     54e:	80 7f       	andi	r24, 0xF0	; 240
     550:	82 87       	std	Z+10, r24	; 0x0a
		lcd_base[15] = lcd_base[15] & 0xF0;
     552:	87 85       	ldd	r24, Z+15	; 0x0f
     554:	80 7f       	andi	r24, 0xF0	; 240
     556:	87 87       	std	Z+15, r24	; 0x0f
		return;
	}
	volatile uint8_t *lcd_base = &LCDDR0 + offsetPos[pos];
	
	int number = (int)ch - 48;
	int shift = 0;
     558:	20 e0       	ldi	r18, 0x00	; 0
		lcd_base[5]  = lcd_base[5]  & 0xF0;
		lcd_base[10] = lcd_base[10] & 0xF0;
		lcd_base[15] = lcd_base[15] & 0xF0;
	}
	/*Writes to the display*/
	lcd_base[0]  = charCodes[number][0]<<shift | lcd_base[0] ;
     55a:	aa 0f       	add	r26, r26
     55c:	bb 1f       	adc	r27, r27
     55e:	aa 0f       	add	r26, r26
     560:	bb 1f       	adc	r27, r27
     562:	a9 5b       	subi	r26, 0xB9	; 185
     564:	be 4f       	sbci	r27, 0xFE	; 254
     566:	8c 91       	ld	r24, X
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	02 2e       	mov	r0, r18
     56c:	02 c0       	rjmp	.+4      	; 0x572 <__stack+0x73>
     56e:	88 0f       	add	r24, r24
     570:	99 1f       	adc	r25, r25
     572:	0a 94       	dec	r0
     574:	e2 f7       	brpl	.-8      	; 0x56e <__stack+0x6f>
     576:	90 81       	ld	r25, Z
     578:	89 2b       	or	r24, r25
     57a:	80 83       	st	Z, r24
	lcd_base[5]  = charCodes[number][1]<<shift | lcd_base[5] ;
     57c:	11 96       	adiw	r26, 0x01	; 1
     57e:	8c 91       	ld	r24, X
     580:	11 97       	sbiw	r26, 0x01	; 1
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	02 2e       	mov	r0, r18
     586:	02 c0       	rjmp	.+4      	; 0x58c <__stack+0x8d>
     588:	88 0f       	add	r24, r24
     58a:	99 1f       	adc	r25, r25
     58c:	0a 94       	dec	r0
     58e:	e2 f7       	brpl	.-8      	; 0x588 <__stack+0x89>
     590:	95 81       	ldd	r25, Z+5	; 0x05
     592:	89 2b       	or	r24, r25
     594:	85 83       	std	Z+5, r24	; 0x05
	lcd_base[10] = charCodes[number][2]<<shift | lcd_base[10];
     596:	12 96       	adiw	r26, 0x02	; 2
     598:	8c 91       	ld	r24, X
     59a:	12 97       	sbiw	r26, 0x02	; 2
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	02 2e       	mov	r0, r18
     5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <__stack+0xa7>
     5a2:	88 0f       	add	r24, r24
     5a4:	99 1f       	adc	r25, r25
     5a6:	0a 94       	dec	r0
     5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <__stack+0xa3>
     5aa:	92 85       	ldd	r25, Z+10	; 0x0a
     5ac:	89 2b       	or	r24, r25
     5ae:	82 87       	std	Z+10, r24	; 0x0a
	lcd_base[15] = charCodes[number][3]<<shift | lcd_base[15];
     5b0:	13 96       	adiw	r26, 0x03	; 3
     5b2:	8c 91       	ld	r24, X
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	02 c0       	rjmp	.+4      	; 0x5bc <__stack+0xbd>
     5b8:	88 0f       	add	r24, r24
     5ba:	99 1f       	adc	r25, r25
     5bc:	2a 95       	dec	r18
     5be:	e2 f7       	brpl	.-8      	; 0x5b8 <__stack+0xb9>
     5c0:	97 85       	ldd	r25, Z+15	; 0x0f
     5c2:	89 2b       	or	r24, r25
     5c4:	87 87       	std	Z+15, r24	; 0x0f
     5c6:	08 95       	ret

000005c8 <printAt>:
}
	
int printAt(LCD_Driver *self, const int map) {
     5c8:	ef 92       	push	r14
     5ca:	ff 92       	push	r15
     5cc:	0f 93       	push	r16
     5ce:	1f 93       	push	r17
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
	union PrintPun p = {.map = map};
	int pp;
	pp = p.args.pos;
     5d4:	c6 2f       	mov	r28, r22
     5d6:	cc 1f       	adc	r28, r28
     5d8:	cc 27       	eor	r28, r28
     5da:	cc 1f       	adc	r28, r28
     5dc:	73 70       	andi	r23, 0x03	; 3
     5de:	77 0f       	add	r23, r23
     5e0:	7c 2b       	or	r23, r28
     5e2:	c7 2f       	mov	r28, r23
     5e4:	d0 e0       	ldi	r29, 0x00	; 0
	int num = p.args.num;
     5e6:	6f 77       	andi	r22, 0x7F	; 127
     5e8:	06 2f       	mov	r16, r22
     5ea:	10 e0       	ldi	r17, 0x00	; 0
	writeChar( (num % 100) / 10 + '0', pp);
     5ec:	c8 01       	movw	r24, r16
     5ee:	64 e6       	ldi	r22, 0x64	; 100
     5f0:	70 e0       	ldi	r23, 0x00	; 0
     5f2:	0e 94 0b 11 	call	0x2216	; 0x2216 <__divmodhi4>
     5f6:	0f 2e       	mov	r0, r31
     5f8:	fa e0       	ldi	r31, 0x0A	; 10
     5fa:	ef 2e       	mov	r14, r31
     5fc:	f1 2c       	mov	r15, r1
     5fe:	f0 2d       	mov	r31, r0
     600:	b7 01       	movw	r22, r14
     602:	0e 94 0b 11 	call	0x2216	; 0x2216 <__divmodhi4>
     606:	86 2f       	mov	r24, r22
     608:	be 01       	movw	r22, r28
     60a:	80 5d       	subi	r24, 0xD0	; 208
     60c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <writeChar>
	pp++;
     610:	21 96       	adiw	r28, 0x01	; 1
	writeChar( num % 10 + '0', pp);
     612:	c8 01       	movw	r24, r16
     614:	b7 01       	movw	r22, r14
     616:	0e 94 0b 11 	call	0x2216	; 0x2216 <__divmodhi4>
     61a:	be 01       	movw	r22, r28
     61c:	80 5d       	subi	r24, 0xD0	; 208
     61e:	0e 94 71 02 	call	0x4e2	; 0x4e2 <writeChar>
	
	return 0;
}
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	1f 91       	pop	r17
     62c:	0f 91       	pop	r16
     62e:	ff 90       	pop	r15
     630:	ef 90       	pop	r14
     632:	08 95       	ret

00000634 <main>:
InterruptHandler inter = initInterruptHandler(&joy);


int main(void)
{    
	INIT();
     634:	0e 94 68 02 	call	0x4d0	; 0x4d0 <INIT>
	INSTALL(&inter, Switch, IRQ_PCINT0);
     638:	41 e0       	ldi	r20, 0x01	; 1
     63a:	6d e4       	ldi	r22, 0x4D	; 77
     63c:	70 e0       	ldi	r23, 0x00	; 0
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	91 e0       	ldi	r25, 0x01	; 1
     642:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <install>
	INSTALL(&inter, Change, IRQ_PCINT1);
     646:	42 e0       	ldi	r20, 0x02	; 2
     648:	65 e7       	ldi	r22, 0x75	; 117
     64a:	70 e0       	ldi	r23, 0x00	; 0
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	91 e0       	ldi	r25, 0x01	; 1
     650:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <install>
	return TINYTIMBER(NULL, NULL, NULL);
     654:	40 e0       	ldi	r20, 0x00	; 0
     656:	50 e0       	ldi	r21, 0x00	; 0
     658:	60 e0       	ldi	r22, 0x00	; 0
     65a:	70 e0       	ldi	r23, 0x00	; 0
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <tinytimber>
     664:	08 95       	ret

00000666 <sendSignal>:
#include "PulseController.h"
#include <avr/io.h>
#include "LCD_Driver.h"

int sendSignal(PulseController *self, int pin){
	if(pin == 1){
     666:	61 30       	cpi	r22, 0x01	; 1
     668:	71 05       	cpc	r23, r1
     66a:	29 f4       	brne	.+10     	; 0x676 <sendSignal+0x10>
		PORTE ^= (1 << PE4);
     66c:	9e b1       	in	r25, 0x0e	; 14
     66e:	80 e1       	ldi	r24, 0x10	; 16
     670:	89 27       	eor	r24, r25
     672:	8e b9       	out	0x0e, r24	; 14
     674:	07 c0       	rjmp	.+14     	; 0x684 <sendSignal+0x1e>
		}else if(pin == 3){
     676:	63 30       	cpi	r22, 0x03	; 3
     678:	71 05       	cpc	r23, r1
     67a:	21 f4       	brne	.+8      	; 0x684 <sendSignal+0x1e>
		PORTE ^= (1 << PE6);
     67c:	9e b1       	in	r25, 0x0e	; 14
     67e:	80 e4       	ldi	r24, 0x40	; 64
     680:	89 27       	eor	r24, r25
     682:	8e b9       	out	0x0e, r24	; 14
	}
	
	//LCDDR18 ^= 1;
	return 0;
}
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	08 95       	ret

0000068a <setLow>:

int setLow(PulseController *self, int pin){
	if(pin == 1){
     68a:	61 30       	cpi	r22, 0x01	; 1
     68c:	71 05       	cpc	r23, r1
     68e:	11 f4       	brne	.+4      	; 0x694 <setLow+0xa>
		PORTE = (0 << PE4);
     690:	1e b8       	out	0x0e, r1	; 14
     692:	04 c0       	rjmp	.+8      	; 0x69c <setLow+0x12>
		}else if(pin == 3){
     694:	63 30       	cpi	r22, 0x03	; 3
     696:	71 05       	cpc	r23, r1
     698:	09 f4       	brne	.+2      	; 0x69c <setLow+0x12>
		PORTE = (0 << PE6);
     69a:	1e b8       	out	0x0e, r1	; 14
	}
	return 0;
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	08 95       	ret

000006a2 <generator>:
	ASYNC(self->display, printAt, PACK_PRINT(self->currentFreq, self->pos));
	
	return 0;
}

int generator(PulseGenerator *self, int unused){
     6a2:	cf 92       	push	r12
     6a4:	df 92       	push	r13
     6a6:	ef 92       	push	r14
     6a8:	ff 92       	push	r15
     6aa:	0f 93       	push	r16
     6ac:	1f 93       	push	r17
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
	if(self->currentFreq){
     6b2:	fc 01       	movw	r30, r24
     6b4:	24 81       	ldd	r18, Z+4	; 0x04
     6b6:	35 81       	ldd	r19, Z+5	; 0x05
     6b8:	23 2b       	or	r18, r19
     6ba:	f1 f1       	breq	.+124    	; 0x738 <generator+0x96>
     6bc:	ec 01       	movw	r28, r24
		ASYNC(self->outPut, sendSignal, self->pin);
     6be:	04 85       	ldd	r16, Z+12	; 0x0c
     6c0:	15 85       	ldd	r17, Z+13	; 0x0d
     6c2:	c2 84       	ldd	r12, Z+10	; 0x0a
     6c4:	d3 84       	ldd	r13, Z+11	; 0x0b
     6c6:	0f 2e       	mov	r0, r31
     6c8:	f3 e3       	ldi	r31, 0x33	; 51
     6ca:	ef 2e       	mov	r14, r31
     6cc:	f3 e0       	ldi	r31, 0x03	; 3
     6ce:	ff 2e       	mov	r15, r31
     6d0:	f0 2d       	mov	r31, r0
     6d2:	20 e0       	ldi	r18, 0x00	; 0
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	a9 01       	movw	r20, r18
     6d8:	60 e0       	ldi	r22, 0x00	; 0
     6da:	70 e0       	ldi	r23, 0x00	; 0
     6dc:	cb 01       	movw	r24, r22
     6de:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <async>
		int fre = (500/self->currentFreq);
     6e2:	6c 81       	ldd	r22, Y+4	; 0x04
     6e4:	7d 81       	ldd	r23, Y+5	; 0x05
     6e6:	84 ef       	ldi	r24, 0xF4	; 244
     6e8:	91 e0       	ldi	r25, 0x01	; 1
     6ea:	0e 94 0b 11 	call	0x2216	; 0x2216 <__divmodhi4>
		AFTER(MSEC(fre), self, generator, 0);
     6ee:	2d e7       	ldi	r18, 0x7D	; 125
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	db 01       	movw	r26, r22
     6f4:	0e 94 1f 11 	call	0x223e	; 0x223e <__usmulhisi3>
     6f8:	8b 01       	movw	r16, r22
     6fa:	9c 01       	movw	r18, r24
     6fc:	99 23       	and	r25, r25
     6fe:	24 f4       	brge	.+8      	; 0x708 <generator+0x66>
     700:	0d 5f       	subi	r16, 0xFD	; 253
     702:	1f 4f       	sbci	r17, 0xFF	; 255
     704:	2f 4f       	sbci	r18, 0xFF	; 255
     706:	3f 4f       	sbci	r19, 0xFF	; 255
     708:	c9 01       	movw	r24, r18
     70a:	b8 01       	movw	r22, r16
     70c:	95 95       	asr	r25
     70e:	87 95       	ror	r24
     710:	77 95       	ror	r23
     712:	67 95       	ror	r22
     714:	95 95       	asr	r25
     716:	87 95       	ror	r24
     718:	77 95       	ror	r23
     71a:	67 95       	ror	r22
     71c:	c1 2c       	mov	r12, r1
     71e:	d1 2c       	mov	r13, r1
     720:	0f 2e       	mov	r0, r31
     722:	f1 e5       	ldi	r31, 0x51	; 81
     724:	ef 2e       	mov	r14, r31
     726:	f3 e0       	ldi	r31, 0x03	; 3
     728:	ff 2e       	mov	r15, r31
     72a:	f0 2d       	mov	r31, r0
     72c:	8e 01       	movw	r16, r28
     72e:	20 e0       	ldi	r18, 0x00	; 0
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	a9 01       	movw	r20, r18
     734:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <async>
	}

	return 0;
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	1f 91       	pop	r17
     742:	0f 91       	pop	r16
     744:	ff 90       	pop	r15
     746:	ef 90       	pop	r14
     748:	df 90       	pop	r13
     74a:	cf 90       	pop	r12
     74c:	08 95       	ret

0000074e <increase>:
#include "PulseGenerator.h"

int increase(PulseGenerator *self, int unused){
     74e:	cf 92       	push	r12
     750:	df 92       	push	r13
     752:	ef 92       	push	r14
     754:	ff 92       	push	r15
     756:	0f 93       	push	r16
     758:	1f 93       	push	r17
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	ec 01       	movw	r28, r24
	if (!(self->currentFreq >= 99)){
     760:	cc 80       	ldd	r12, Y+4	; 0x04
     762:	dd 80       	ldd	r13, Y+5	; 0x05
     764:	83 e6       	ldi	r24, 0x63	; 99
     766:	c8 16       	cp	r12, r24
     768:	d1 04       	cpc	r13, r1
     76a:	fc f4       	brge	.+62     	; 0x7aa <increase+0x5c>
		 self->currentFreq += 1;
     76c:	c6 01       	movw	r24, r12
     76e:	01 96       	adiw	r24, 0x01	; 1
     770:	9d 83       	std	Y+5, r25	; 0x05
     772:	8c 83       	std	Y+4, r24	; 0x04
		ASYNC(self->display, printAt, PACK_PRINT(self->currentFreq, self->pos));
     774:	d8 84       	ldd	r13, Y+8	; 0x08
     776:	cd 2c       	mov	r12, r13
     778:	c7 94       	ror	r12
     77a:	cc 24       	eor	r12, r12
     77c:	c7 94       	ror	r12
     77e:	8f 77       	andi	r24, 0x7F	; 127
     780:	c8 2a       	or	r12, r24
     782:	8d 2d       	mov	r24, r13
     784:	86 95       	lsr	r24
     786:	83 70       	andi	r24, 0x03	; 3
     788:	d8 2e       	mov	r13, r24
     78a:	0e 85       	ldd	r16, Y+14	; 0x0e
     78c:	1f 85       	ldd	r17, Y+15	; 0x0f
     78e:	0f 2e       	mov	r0, r31
     790:	f4 ee       	ldi	r31, 0xE4	; 228
     792:	ef 2e       	mov	r14, r31
     794:	f2 e0       	ldi	r31, 0x02	; 2
     796:	ff 2e       	mov	r15, r31
     798:	f0 2d       	mov	r31, r0
     79a:	20 e0       	ldi	r18, 0x00	; 0
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	a9 01       	movw	r20, r18
     7a0:	60 e0       	ldi	r22, 0x00	; 0
     7a2:	70 e0       	ldi	r23, 0x00	; 0
     7a4:	cb 01       	movw	r24, r22
     7a6:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <async>
	}
	if(self->currentFreq == 1){
     7aa:	8c 81       	ldd	r24, Y+4	; 0x04
     7ac:	9d 81       	ldd	r25, Y+5	; 0x05
     7ae:	01 97       	sbiw	r24, 0x01	; 1
     7b0:	89 f4       	brne	.+34     	; 0x7d4 <increase+0x86>
		ASYNC(self, generator, 0);
     7b2:	c1 2c       	mov	r12, r1
     7b4:	d1 2c       	mov	r13, r1
     7b6:	0f 2e       	mov	r0, r31
     7b8:	f1 e5       	ldi	r31, 0x51	; 81
     7ba:	ef 2e       	mov	r14, r31
     7bc:	f3 e0       	ldi	r31, 0x03	; 3
     7be:	ff 2e       	mov	r15, r31
     7c0:	f0 2d       	mov	r31, r0
     7c2:	8e 01       	movw	r16, r28
     7c4:	20 e0       	ldi	r18, 0x00	; 0
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	a9 01       	movw	r20, r18
     7ca:	60 e0       	ldi	r22, 0x00	; 0
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	cb 01       	movw	r24, r22
     7d0:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <async>
	}
	return 0;
}
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	1f 91       	pop	r17
     7de:	0f 91       	pop	r16
     7e0:	ff 90       	pop	r15
     7e2:	ef 90       	pop	r14
     7e4:	df 90       	pop	r13
     7e6:	cf 90       	pop	r12
     7e8:	08 95       	ret

000007ea <decrease>:

int decrease(PulseGenerator *self, int unused){
     7ea:	cf 92       	push	r12
     7ec:	df 92       	push	r13
     7ee:	ef 92       	push	r14
     7f0:	ff 92       	push	r15
     7f2:	0f 93       	push	r16
     7f4:	1f 93       	push	r17
     7f6:	cf 93       	push	r28
     7f8:	df 93       	push	r29
     7fa:	ec 01       	movw	r28, r24
	if (self->currentFreq > 0) self->currentFreq -= 1;
     7fc:	8c 81       	ldd	r24, Y+4	; 0x04
     7fe:	9d 81       	ldd	r25, Y+5	; 0x05
     800:	18 16       	cp	r1, r24
     802:	19 06       	cpc	r1, r25
     804:	1c f4       	brge	.+6      	; 0x80c <decrease+0x22>
     806:	01 97       	sbiw	r24, 0x01	; 1
     808:	9d 83       	std	Y+5, r25	; 0x05
     80a:	8c 83       	std	Y+4, r24	; 0x04
	
	if(self->currentFreq == 0){
     80c:	8c 81       	ldd	r24, Y+4	; 0x04
     80e:	9d 81       	ldd	r25, Y+5	; 0x05
     810:	89 2b       	or	r24, r25
     812:	89 f4       	brne	.+34     	; 0x836 <decrease+0x4c>
		ASYNC(self, setLow, self->pin);
     814:	ca 84       	ldd	r12, Y+10	; 0x0a
     816:	db 84       	ldd	r13, Y+11	; 0x0b
     818:	0f 2e       	mov	r0, r31
     81a:	f5 e4       	ldi	r31, 0x45	; 69
     81c:	ef 2e       	mov	r14, r31
     81e:	f3 e0       	ldi	r31, 0x03	; 3
     820:	ff 2e       	mov	r15, r31
     822:	f0 2d       	mov	r31, r0
     824:	8e 01       	movw	r16, r28
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	a9 01       	movw	r20, r18
     82c:	60 e0       	ldi	r22, 0x00	; 0
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	cb 01       	movw	r24, r22
     832:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <async>
		
	}
	ASYNC(self->display, printAt, PACK_PRINT(self->currentFreq, self->pos));
     836:	9c 81       	ldd	r25, Y+4	; 0x04
     838:	d8 84       	ldd	r13, Y+8	; 0x08
     83a:	8d 2d       	mov	r24, r13
     83c:	87 95       	ror	r24
     83e:	88 27       	eor	r24, r24
     840:	87 95       	ror	r24
     842:	9f 77       	andi	r25, 0x7F	; 127
     844:	c9 2e       	mov	r12, r25
     846:	c8 2a       	or	r12, r24
     848:	8d 2d       	mov	r24, r13
     84a:	86 95       	lsr	r24
     84c:	83 70       	andi	r24, 0x03	; 3
     84e:	d8 2e       	mov	r13, r24
     850:	0e 85       	ldd	r16, Y+14	; 0x0e
     852:	1f 85       	ldd	r17, Y+15	; 0x0f
     854:	0f 2e       	mov	r0, r31
     856:	f4 ee       	ldi	r31, 0xE4	; 228
     858:	ef 2e       	mov	r14, r31
     85a:	f2 e0       	ldi	r31, 0x02	; 2
     85c:	ff 2e       	mov	r15, r31
     85e:	f0 2d       	mov	r31, r0
     860:	20 e0       	ldi	r18, 0x00	; 0
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	a9 01       	movw	r20, r18
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	cb 01       	movw	r24, r22
     86c:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <async>
	
	return 0;
}
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	1f 91       	pop	r17
     87a:	0f 91       	pop	r16
     87c:	ff 90       	pop	r15
     87e:	ef 90       	pop	r14
     880:	df 90       	pop	r13
     882:	cf 90       	pop	r12
     884:	08 95       	ret

00000886 <reset>:

int reset(PulseGenerator *self, int unused){
     886:	cf 92       	push	r12
     888:	df 92       	push	r13
     88a:	ef 92       	push	r14
     88c:	ff 92       	push	r15
     88e:	0f 93       	push	r16
     890:	1f 93       	push	r17
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	ec 01       	movw	r28, r24
	if (self->currentFreq == 0){
     898:	8c 81       	ldd	r24, Y+4	; 0x04
     89a:	9d 81       	ldd	r25, Y+5	; 0x05
     89c:	00 97       	sbiw	r24, 0x00	; 0
     89e:	c1 f4       	brne	.+48     	; 0x8d0 <reset+0x4a>
		self->currentFreq = self->lastFreq;
     8a0:	8e 81       	ldd	r24, Y+6	; 0x06
     8a2:	9f 81       	ldd	r25, Y+7	; 0x07
     8a4:	9d 83       	std	Y+5, r25	; 0x05
     8a6:	8c 83       	std	Y+4, r24	; 0x04
		if(self->currentFreq != 0) ASYNC(self, generator, 0);
     8a8:	89 2b       	or	r24, r25
     8aa:	39 f1       	breq	.+78     	; 0x8fa <reset+0x74>
     8ac:	c1 2c       	mov	r12, r1
     8ae:	d1 2c       	mov	r13, r1
     8b0:	0f 2e       	mov	r0, r31
     8b2:	f1 e5       	ldi	r31, 0x51	; 81
     8b4:	ef 2e       	mov	r14, r31
     8b6:	f3 e0       	ldi	r31, 0x03	; 3
     8b8:	ff 2e       	mov	r15, r31
     8ba:	f0 2d       	mov	r31, r0
     8bc:	8e 01       	movw	r16, r28
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	a9 01       	movw	r20, r18
     8c4:	60 e0       	ldi	r22, 0x00	; 0
     8c6:	70 e0       	ldi	r23, 0x00	; 0
     8c8:	cb 01       	movw	r24, r22
     8ca:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <async>
     8ce:	15 c0       	rjmp	.+42     	; 0x8fa <reset+0x74>
	}
	else{
		self->lastFreq = self->currentFreq;
     8d0:	9f 83       	std	Y+7, r25	; 0x07
     8d2:	8e 83       	std	Y+6, r24	; 0x06
		self->currentFreq = 0;
     8d4:	1d 82       	std	Y+5, r1	; 0x05
     8d6:	1c 82       	std	Y+4, r1	; 0x04
		ASYNC(self, setLow, self->pin);
     8d8:	ca 84       	ldd	r12, Y+10	; 0x0a
     8da:	db 84       	ldd	r13, Y+11	; 0x0b
     8dc:	0f 2e       	mov	r0, r31
     8de:	f5 e4       	ldi	r31, 0x45	; 69
     8e0:	ef 2e       	mov	r14, r31
     8e2:	f3 e0       	ldi	r31, 0x03	; 3
     8e4:	ff 2e       	mov	r15, r31
     8e6:	f0 2d       	mov	r31, r0
     8e8:	8e 01       	movw	r16, r28
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	a9 01       	movw	r20, r18
     8f0:	60 e0       	ldi	r22, 0x00	; 0
     8f2:	70 e0       	ldi	r23, 0x00	; 0
     8f4:	cb 01       	movw	r24, r22
     8f6:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <async>
	}
	ASYNC(self->display, printAt, PACK_PRINT(self->currentFreq, self->pos));
     8fa:	9c 81       	ldd	r25, Y+4	; 0x04
     8fc:	d8 84       	ldd	r13, Y+8	; 0x08
     8fe:	8d 2d       	mov	r24, r13
     900:	87 95       	ror	r24
     902:	88 27       	eor	r24, r24
     904:	87 95       	ror	r24
     906:	9f 77       	andi	r25, 0x7F	; 127
     908:	c9 2e       	mov	r12, r25
     90a:	c8 2a       	or	r12, r24
     90c:	8d 2d       	mov	r24, r13
     90e:	86 95       	lsr	r24
     910:	83 70       	andi	r24, 0x03	; 3
     912:	d8 2e       	mov	r13, r24
     914:	0e 85       	ldd	r16, Y+14	; 0x0e
     916:	1f 85       	ldd	r17, Y+15	; 0x0f
     918:	0f 2e       	mov	r0, r31
     91a:	f4 ee       	ldi	r31, 0xE4	; 228
     91c:	ef 2e       	mov	r14, r31
     91e:	f2 e0       	ldi	r31, 0x02	; 2
     920:	ff 2e       	mov	r15, r31
     922:	f0 2d       	mov	r31, r0
     924:	20 e0       	ldi	r18, 0x00	; 0
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	a9 01       	movw	r20, r18
     92a:	60 e0       	ldi	r22, 0x00	; 0
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	cb 01       	movw	r24, r22
     930:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <async>
	
	return 0;
}
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	1f 91       	pop	r17
     93e:	0f 91       	pop	r16
     940:	ff 90       	pop	r15
     942:	ef 90       	pop	r14
     944:	df 90       	pop	r13
     946:	cf 90       	pop	r12
     948:	08 95       	ret

0000094a <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
     94e:	00 d0       	rcall	.+0      	; 0x950 <initialize+0x6>
     950:	00 d0       	rcall	.+0      	; 0x952 <initialize+0x8>
     952:	cd b7       	in	r28, 0x3d	; 61
     954:	de b7       	in	r29, 0x3e	; 62
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	18 c0       	rjmp	.+48     	; 0x98c <initialize+0x42>
     95c:	ac 01       	movw	r20, r24
     95e:	4f 5f       	subi	r20, 0xFF	; 255
     960:	5f 4f       	sbci	r21, 0xFF	; 255
     962:	9a 01       	movw	r18, r20
     964:	22 95       	swap	r18
     966:	32 95       	swap	r19
     968:	30 7f       	andi	r19, 0xF0	; 240
     96a:	32 27       	eor	r19, r18
     96c:	20 7f       	andi	r18, 0xF0	; 240
     96e:	32 27       	eor	r19, r18
     970:	25 5a       	subi	r18, 0xA5	; 165
     972:	3d 4f       	sbci	r19, 0xFD	; 253
     974:	82 95       	swap	r24
     976:	92 95       	swap	r25
     978:	90 7f       	andi	r25, 0xF0	; 240
     97a:	98 27       	eor	r25, r24
     97c:	80 7f       	andi	r24, 0xF0	; 240
     97e:	98 27       	eor	r25, r24
     980:	fc 01       	movw	r30, r24
     982:	e5 5a       	subi	r30, 0xA5	; 165
     984:	fd 4f       	sbci	r31, 0xFD	; 253
     986:	31 83       	std	Z+1, r19	; 0x01
     988:	20 83       	st	Z, r18
     98a:	ca 01       	movw	r24, r20
     98c:	8e 30       	cpi	r24, 0x0E	; 14
     98e:	91 05       	cpc	r25, r1
     990:	2c f3       	brlt	.-54     	; 0x95c <initialize+0x12>
     992:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <messages+0xe1>
     996:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <messages+0xe0>
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	15 c0       	rjmp	.+42     	; 0x9ca <initialize+0x80>
     9a0:	ac 01       	movw	r20, r24
     9a2:	4f 5f       	subi	r20, 0xFF	; 255
     9a4:	5f 4f       	sbci	r21, 0xFF	; 255
     9a6:	6d e1       	ldi	r22, 0x1D	; 29
     9a8:	64 9f       	mul	r22, r20
     9aa:	90 01       	movw	r18, r0
     9ac:	65 9f       	mul	r22, r21
     9ae:	30 0d       	add	r19, r0
     9b0:	11 24       	eor	r1, r1
     9b2:	2a 55       	subi	r18, 0x5A	; 90
     9b4:	3e 4f       	sbci	r19, 0xFE	; 254
     9b6:	68 9f       	mul	r22, r24
     9b8:	f0 01       	movw	r30, r0
     9ba:	69 9f       	mul	r22, r25
     9bc:	f0 0d       	add	r31, r0
     9be:	11 24       	eor	r1, r1
     9c0:	ea 55       	subi	r30, 0x5A	; 90
     9c2:	fe 4f       	sbci	r31, 0xFE	; 254
     9c4:	31 83       	std	Z+1, r19	; 0x01
     9c6:	20 83       	st	Z, r18
     9c8:	ca 01       	movw	r24, r20
     9ca:	83 30       	cpi	r24, 0x03	; 3
     9cc:	91 05       	cpc	r25, r1
     9ce:	44 f3       	brlt	.-48     	; 0x9a0 <initialize+0x56>
     9d0:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <threads+0x58>
     9d4:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <threads+0x57>
     9d8:	1a 82       	std	Y+2, r1	; 0x02
     9da:	19 82       	std	Y+1, r1	; 0x01
     9dc:	32 c0       	rjmp	.+100    	; 0xa42 <initialize+0xf8>
     9de:	2d e1       	ldi	r18, 0x1D	; 29
     9e0:	49 81       	ldd	r20, Y+1	; 0x01
     9e2:	5a 81       	ldd	r21, Y+2	; 0x02
     9e4:	24 9f       	mul	r18, r20
     9e6:	c0 01       	movw	r24, r0
     9e8:	25 9f       	mul	r18, r21
     9ea:	90 0d       	add	r25, r0
     9ec:	11 24       	eor	r1, r1
     9ee:	fc 01       	movw	r30, r24
     9f0:	e4 55       	subi	r30, 0x54	; 84
     9f2:	fe 4f       	sbci	r31, 0xFE	; 254
     9f4:	fc 83       	std	Y+4, r31	; 0x04
     9f6:	eb 83       	std	Y+3, r30	; 0x03
     9f8:	cf 01       	movw	r24, r30
     9fa:	0e 94 49 11 	call	0x2292	; 0x2292 <setjmp>
     9fe:	20 e6       	ldi	r18, 0x60	; 96
     a00:	49 81       	ldd	r20, Y+1	; 0x01
     a02:	5a 81       	ldd	r21, Y+2	; 0x02
     a04:	24 9f       	mul	r18, r20
     a06:	c0 01       	movw	r24, r0
     a08:	25 9f       	mul	r18, r21
     a0a:	90 0d       	add	r25, r0
     a0c:	11 24       	eor	r1, r1
     a0e:	89 55       	subi	r24, 0x59	; 89
     a10:	9c 4f       	sbci	r25, 0xFC	; 252
     a12:	eb 81       	ldd	r30, Y+3	; 0x03
     a14:	fc 81       	ldd	r31, Y+4	; 0x04
     a16:	91 8b       	std	Z+17, r25	; 0x11
     a18:	80 8b       	std	Z+16, r24	; 0x10
     a1a:	93 8b       	std	Z+19, r25	; 0x13
     a1c:	82 8b       	std	Z+18, r24	; 0x12
     a1e:	81 e8       	ldi	r24, 0x81	; 129
     a20:	90 e1       	ldi	r25, 0x10	; 16
     a22:	96 8b       	std	Z+22, r25	; 0x16
     a24:	85 8b       	std	Z+21, r24	; 0x15
     a26:	8d e1       	ldi	r24, 0x1D	; 29
     a28:	84 9f       	mul	r24, r20
     a2a:	f0 01       	movw	r30, r0
     a2c:	85 9f       	mul	r24, r21
     a2e:	f0 0d       	add	r31, r0
     a30:	11 24       	eor	r1, r1
     a32:	ea 55       	subi	r30, 0x5A	; 90
     a34:	fe 4f       	sbci	r31, 0xFE	; 254
     a36:	15 82       	std	Z+5, r1	; 0x05
     a38:	14 82       	std	Z+4, r1	; 0x04
     a3a:	4f 5f       	subi	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	5a 83       	std	Y+2, r21	; 0x02
     a40:	49 83       	std	Y+1, r20	; 0x01
     a42:	29 81       	ldd	r18, Y+1	; 0x01
     a44:	3a 81       	ldd	r19, Y+2	; 0x02
     a46:	24 30       	cpi	r18, 0x04	; 4
     a48:	31 05       	cpc	r19, r1
     a4a:	4c f2       	brlt	.-110    	; 0x9de <initialize+0x94>
     a4c:	ee e3       	ldi	r30, 0x3E	; 62
     a4e:	f2 e0       	ldi	r31, 0x02	; 2
     a50:	11 82       	std	Z+1, r1	; 0x01
     a52:	10 82       	st	Z, r1
     a54:	15 82       	std	Z+5, r1	; 0x05
     a56:	14 82       	std	Z+4, r1	; 0x04
     a58:	13 82       	std	Z+3, r1	; 0x03
     a5a:	12 82       	std	Z+2, r1	; 0x02
     a5c:	e1 e6       	ldi	r30, 0x61	; 97
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	80 e8       	ldi	r24, 0x80	; 128
     a62:	80 83       	st	Z, r24
     a64:	10 82       	st	Z, r1
     a66:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a6a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a6e:	84 e0       	ldi	r24, 0x04	; 4
     a70:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     a7a:	0f 90       	pop	r0
     a7c:	0f 90       	pop	r0
     a7e:	0f 90       	pop	r0
     a80:	0f 90       	pop	r0
     a82:	df 91       	pop	r29
     a84:	cf 91       	pop	r28
     a86:	08 95       	ret

00000a88 <dispatch>:
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	00 d0       	rcall	.+0      	; 0xa8e <dispatch+0x6>
     a8e:	cd b7       	in	r28, 0x3d	; 61
     a90:	de b7       	in	r29, 0x3e	; 62
     a92:	9a 83       	std	Y+2, r25	; 0x02
     a94:	89 83       	std	Y+1, r24	; 0x01
     a96:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <current>
     a9a:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <current+0x1>
     a9e:	06 96       	adiw	r24, 0x06	; 6
     aa0:	0e 94 49 11 	call	0x2292	; 0x2292 <setjmp>
     aa4:	89 2b       	or	r24, r25
     aa6:	59 f4       	brne	.+22     	; 0xabe <dispatch+0x36>
     aa8:	89 81       	ldd	r24, Y+1	; 0x01
     aaa:	9a 81       	ldd	r25, Y+2	; 0x02
     aac:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <current+0x1>
     ab0:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <current>
     ab4:	61 e0       	ldi	r22, 0x01	; 1
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	06 96       	adiw	r24, 0x06	; 6
     aba:	0e 94 69 11 	call	0x22d2	; 0x22d2 <longjmp>
     abe:	0f 90       	pop	r0
     ac0:	0f 90       	pop	r0
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	08 95       	ret

00000ac8 <enqueueByDeadline>:
     ac8:	0f 93       	push	r16
     aca:	1f 93       	push	r17
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	dc 01       	movw	r26, r24
     ad2:	cb 01       	movw	r24, r22
     ad4:	eb 01       	movw	r28, r22
     ad6:	e8 81       	ld	r30, Y
     ad8:	f9 81       	ldd	r31, Y+1	; 0x01
     ada:	c0 e0       	ldi	r28, 0x00	; 0
     adc:	d0 e0       	ldi	r29, 0x00	; 0
     ade:	04 c0       	rjmp	.+8      	; 0xae8 <enqueueByDeadline+0x20>
     ae0:	ef 01       	movw	r28, r30
     ae2:	01 90       	ld	r0, Z+
     ae4:	f0 81       	ld	r31, Z
     ae6:	e0 2d       	mov	r30, r0
     ae8:	30 97       	sbiw	r30, 0x00	; 0
     aea:	79 f0       	breq	.+30     	; 0xb0a <enqueueByDeadline+0x42>
     aec:	06 81       	ldd	r16, Z+6	; 0x06
     aee:	17 81       	ldd	r17, Z+7	; 0x07
     af0:	20 85       	ldd	r18, Z+8	; 0x08
     af2:	31 85       	ldd	r19, Z+9	; 0x09
     af4:	16 96       	adiw	r26, 0x06	; 6
     af6:	4d 91       	ld	r20, X+
     af8:	5d 91       	ld	r21, X+
     afa:	6d 91       	ld	r22, X+
     afc:	7c 91       	ld	r23, X
     afe:	19 97       	sbiw	r26, 0x09	; 9
     b00:	40 17       	cp	r20, r16
     b02:	51 07       	cpc	r21, r17
     b04:	62 07       	cpc	r22, r18
     b06:	73 07       	cpc	r23, r19
     b08:	5c f7       	brge	.-42     	; 0xae0 <enqueueByDeadline+0x18>
     b0a:	11 96       	adiw	r26, 0x01	; 1
     b0c:	fc 93       	st	X, r31
     b0e:	ee 93       	st	-X, r30
     b10:	20 97       	sbiw	r28, 0x00	; 0
     b12:	21 f4       	brne	.+8      	; 0xb1c <enqueueByDeadline+0x54>
     b14:	fc 01       	movw	r30, r24
     b16:	b1 83       	std	Z+1, r27	; 0x01
     b18:	a0 83       	st	Z, r26
     b1a:	02 c0       	rjmp	.+4      	; 0xb20 <enqueueByDeadline+0x58>
     b1c:	b9 83       	std	Y+1, r27	; 0x01
     b1e:	a8 83       	st	Y, r26
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	1f 91       	pop	r17
     b26:	0f 91       	pop	r16
     b28:	08 95       	ret

00000b2a <enqueueByBaseline>:
     b2a:	0f 93       	push	r16
     b2c:	1f 93       	push	r17
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
     b32:	dc 01       	movw	r26, r24
     b34:	cb 01       	movw	r24, r22
     b36:	eb 01       	movw	r28, r22
     b38:	e8 81       	ld	r30, Y
     b3a:	f9 81       	ldd	r31, Y+1	; 0x01
     b3c:	c0 e0       	ldi	r28, 0x00	; 0
     b3e:	d0 e0       	ldi	r29, 0x00	; 0
     b40:	04 c0       	rjmp	.+8      	; 0xb4a <enqueueByBaseline+0x20>
     b42:	ef 01       	movw	r28, r30
     b44:	01 90       	ld	r0, Z+
     b46:	f0 81       	ld	r31, Z
     b48:	e0 2d       	mov	r30, r0
     b4a:	30 97       	sbiw	r30, 0x00	; 0
     b4c:	79 f0       	breq	.+30     	; 0xb6c <enqueueByBaseline+0x42>
     b4e:	02 81       	ldd	r16, Z+2	; 0x02
     b50:	13 81       	ldd	r17, Z+3	; 0x03
     b52:	24 81       	ldd	r18, Z+4	; 0x04
     b54:	35 81       	ldd	r19, Z+5	; 0x05
     b56:	12 96       	adiw	r26, 0x02	; 2
     b58:	4d 91       	ld	r20, X+
     b5a:	5d 91       	ld	r21, X+
     b5c:	6d 91       	ld	r22, X+
     b5e:	7c 91       	ld	r23, X
     b60:	15 97       	sbiw	r26, 0x05	; 5
     b62:	40 17       	cp	r20, r16
     b64:	51 07       	cpc	r21, r17
     b66:	62 07       	cpc	r22, r18
     b68:	73 07       	cpc	r23, r19
     b6a:	5c f7       	brge	.-42     	; 0xb42 <enqueueByBaseline+0x18>
     b6c:	11 96       	adiw	r26, 0x01	; 1
     b6e:	fc 93       	st	X, r31
     b70:	ee 93       	st	-X, r30
     b72:	20 97       	sbiw	r28, 0x00	; 0
     b74:	21 f4       	brne	.+8      	; 0xb7e <enqueueByBaseline+0x54>
     b76:	fc 01       	movw	r30, r24
     b78:	b1 83       	std	Z+1, r27	; 0x01
     b7a:	a0 83       	st	Z, r26
     b7c:	02 c0       	rjmp	.+4      	; 0xb82 <enqueueByBaseline+0x58>
     b7e:	b9 83       	std	Y+1, r27	; 0x01
     b80:	a8 83       	st	Y, r26
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	1f 91       	pop	r17
     b88:	0f 91       	pop	r16
     b8a:	08 95       	ret

00000b8c <dequeue>:
     b8c:	dc 01       	movw	r26, r24
     b8e:	ed 91       	ld	r30, X+
     b90:	fc 91       	ld	r31, X
     b92:	11 97       	sbiw	r26, 0x01	; 1
     b94:	30 97       	sbiw	r30, 0x00	; 0
     b96:	59 f4       	brne	.+22     	; 0xbae <dequeue+0x22>
     b98:	8f ef       	ldi	r24, 0xFF	; 255
     b9a:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     b9e:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     ba2:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	83 bf       	out	0x33, r24	; 51
     baa:	88 95       	sleep
     bac:	fc cf       	rjmp	.-8      	; 0xba6 <dequeue+0x1a>
     bae:	20 81       	ld	r18, Z
     bb0:	31 81       	ldd	r19, Z+1	; 0x01
     bb2:	2d 93       	st	X+, r18
     bb4:	3c 93       	st	X, r19
     bb6:	cf 01       	movw	r24, r30
     bb8:	08 95       	ret

00000bba <insert>:
     bba:	fb 01       	movw	r30, r22
     bbc:	20 81       	ld	r18, Z
     bbe:	31 81       	ldd	r19, Z+1	; 0x01
     bc0:	fc 01       	movw	r30, r24
     bc2:	31 83       	std	Z+1, r19	; 0x01
     bc4:	20 83       	st	Z, r18
     bc6:	fb 01       	movw	r30, r22
     bc8:	91 83       	std	Z+1, r25	; 0x01
     bca:	80 83       	st	Z, r24
     bcc:	08 95       	ret

00000bce <push>:
     bce:	fb 01       	movw	r30, r22
     bd0:	20 81       	ld	r18, Z
     bd2:	31 81       	ldd	r19, Z+1	; 0x01
     bd4:	fc 01       	movw	r30, r24
     bd6:	31 83       	std	Z+1, r19	; 0x01
     bd8:	20 83       	st	Z, r18
     bda:	fb 01       	movw	r30, r22
     bdc:	91 83       	std	Z+1, r25	; 0x01
     bde:	80 83       	st	Z, r24
     be0:	08 95       	ret

00000be2 <pop>:
     be2:	dc 01       	movw	r26, r24
     be4:	ed 91       	ld	r30, X+
     be6:	fc 91       	ld	r31, X
     be8:	11 97       	sbiw	r26, 0x01	; 1
     bea:	20 81       	ld	r18, Z
     bec:	31 81       	ldd	r19, Z+1	; 0x01
     bee:	2d 93       	st	X+, r18
     bf0:	3c 93       	st	X, r19
     bf2:	cf 01       	movw	r24, r30
     bf4:	08 95       	ret

00000bf6 <schedule>:
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <activeStack>
     bfe:	f0 91 3a 01 	lds	r31, 0x013A	; 0x80013a <activeStack+0x1>
     c02:	c2 81       	ldd	r28, Z+2	; 0x02
     c04:	d3 81       	ldd	r29, Z+3	; 0x03
     c06:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <msgQ>
     c0a:	f0 91 81 01 	lds	r31, 0x0181	; 0x800181 <msgQ+0x1>
     c0e:	30 97       	sbiw	r30, 0x00	; 0
     c10:	19 f1       	breq	.+70     	; 0xc58 <schedule+0x62>
     c12:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <threadPool>
     c16:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <threadPool+0x1>
     c1a:	89 2b       	or	r24, r25
     c1c:	e9 f0       	breq	.+58     	; 0xc58 <schedule+0x62>
     c1e:	20 97       	sbiw	r28, 0x00	; 0
     c20:	69 f0       	breq	.+26     	; 0xc3c <schedule+0x46>
     c22:	86 81       	ldd	r24, Z+6	; 0x06
     c24:	97 81       	ldd	r25, Z+7	; 0x07
     c26:	a0 85       	ldd	r26, Z+8	; 0x08
     c28:	b1 85       	ldd	r27, Z+9	; 0x09
     c2a:	4e 81       	ldd	r20, Y+6	; 0x06
     c2c:	5f 81       	ldd	r21, Y+7	; 0x07
     c2e:	68 85       	ldd	r22, Y+8	; 0x08
     c30:	79 85       	ldd	r23, Y+9	; 0x09
     c32:	84 1b       	sub	r24, r20
     c34:	95 0b       	sbc	r25, r21
     c36:	a6 0b       	sbc	r26, r22
     c38:	b7 0b       	sbc	r27, r23
     c3a:	72 f4       	brpl	.+28     	; 0xc58 <schedule+0x62>
     c3c:	8b e3       	ldi	r24, 0x3B	; 59
     c3e:	91 e0       	ldi	r25, 0x01	; 1
     c40:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <pop>
     c44:	69 e3       	ldi	r22, 0x39	; 57
     c46:	71 e0       	ldi	r23, 0x01	; 1
     c48:	0e 94 e7 05 	call	0xbce	; 0xbce <push>
     c4c:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <activeStack>
     c50:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <activeStack+0x1>
     c54:	0e 94 44 05 	call	0xa88	; 0xa88 <dispatch>
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	08 95       	ret

00000c5e <__vector_1>:
     c5e:	1f 92       	push	r1
     c60:	0f 92       	push	r0
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	0f 92       	push	r0
     c66:	11 24       	eor	r1, r1
     c68:	0f 93       	push	r16
     c6a:	1f 93       	push	r17
     c6c:	2f 93       	push	r18
     c6e:	3f 93       	push	r19
     c70:	4f 93       	push	r20
     c72:	5f 93       	push	r21
     c74:	6f 93       	push	r22
     c76:	7f 93       	push	r23
     c78:	8f 93       	push	r24
     c7a:	9f 93       	push	r25
     c7c:	af 93       	push	r26
     c7e:	bf 93       	push	r27
     c80:	ef 93       	push	r30
     c82:	ff 93       	push	r31
     c84:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <overflows>
     c88:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <overflows+0x1>
     c8c:	ac 01       	movw	r20, r24
     c8e:	09 2e       	mov	r0, r25
     c90:	00 0c       	add	r0, r0
     c92:	66 0b       	sbc	r22, r22
     c94:	77 0b       	sbc	r23, r23
     c96:	9a 01       	movw	r18, r20
     c98:	11 27       	eor	r17, r17
     c9a:	00 27       	eor	r16, r16
     c9c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ca0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	70 e0       	ldi	r23, 0x00	; 0
     ca8:	40 2b       	or	r20, r16
     caa:	51 2b       	or	r21, r17
     cac:	62 2b       	or	r22, r18
     cae:	73 2b       	or	r23, r19
     cb0:	40 93 7a 01 	sts	0x017A, r20	; 0x80017a <timestamp>
     cb4:	50 93 7b 01 	sts	0x017B, r21	; 0x80017b <timestamp+0x1>
     cb8:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <timestamp+0x2>
     cbc:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <timestamp+0x3>
     cc0:	b0 9b       	sbis	0x16, 0	; 22
     cc2:	1a c0       	rjmp	.+52     	; 0xcf8 <__vector_1+0x9a>
     cc4:	01 96       	adiw	r24, 0x01	; 1
     cc6:	09 2e       	mov	r0, r25
     cc8:	00 0c       	add	r0, r0
     cca:	aa 0b       	sbc	r26, r26
     ccc:	bb 0b       	sbc	r27, r27
     cce:	bc 01       	movw	r22, r24
     cd0:	55 27       	eor	r21, r21
     cd2:	44 27       	eor	r20, r20
     cd4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cd8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	84 2b       	or	r24, r20
     ce2:	95 2b       	or	r25, r21
     ce4:	a6 2b       	or	r26, r22
     ce6:	b7 2b       	or	r27, r23
     ce8:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <timestamp>
     cec:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <timestamp+0x1>
     cf0:	a0 93 7c 01 	sts	0x017C, r26	; 0x80017c <timestamp+0x2>
     cf4:	b0 93 7d 01 	sts	0x017D, r27	; 0x80017d <timestamp+0x3>
     cf8:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <mtable>
     cfc:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <mtable+0x1>
     d00:	30 97       	sbiw	r30, 0x00	; 0
     d02:	39 f0       	breq	.+14     	; 0xd12 <__vector_1+0xb4>
     d04:	60 e0       	ldi	r22, 0x00	; 0
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <otable>
     d0c:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <otable+0x1>
     d10:	09 95       	icall
     d12:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <schedule>
     d16:	ff 91       	pop	r31
     d18:	ef 91       	pop	r30
     d1a:	bf 91       	pop	r27
     d1c:	af 91       	pop	r26
     d1e:	9f 91       	pop	r25
     d20:	8f 91       	pop	r24
     d22:	7f 91       	pop	r23
     d24:	6f 91       	pop	r22
     d26:	5f 91       	pop	r21
     d28:	4f 91       	pop	r20
     d2a:	3f 91       	pop	r19
     d2c:	2f 91       	pop	r18
     d2e:	1f 91       	pop	r17
     d30:	0f 91       	pop	r16
     d32:	0f 90       	pop	r0
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	0f 90       	pop	r0
     d38:	1f 90       	pop	r1
     d3a:	18 95       	reti

00000d3c <__vector_2>:
     d3c:	1f 92       	push	r1
     d3e:	0f 92       	push	r0
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	0f 92       	push	r0
     d44:	11 24       	eor	r1, r1
     d46:	0f 93       	push	r16
     d48:	1f 93       	push	r17
     d4a:	2f 93       	push	r18
     d4c:	3f 93       	push	r19
     d4e:	4f 93       	push	r20
     d50:	5f 93       	push	r21
     d52:	6f 93       	push	r22
     d54:	7f 93       	push	r23
     d56:	8f 93       	push	r24
     d58:	9f 93       	push	r25
     d5a:	af 93       	push	r26
     d5c:	bf 93       	push	r27
     d5e:	ef 93       	push	r30
     d60:	ff 93       	push	r31
     d62:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <overflows>
     d66:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <overflows+0x1>
     d6a:	ac 01       	movw	r20, r24
     d6c:	09 2e       	mov	r0, r25
     d6e:	00 0c       	add	r0, r0
     d70:	66 0b       	sbc	r22, r22
     d72:	77 0b       	sbc	r23, r23
     d74:	9a 01       	movw	r18, r20
     d76:	11 27       	eor	r17, r17
     d78:	00 27       	eor	r16, r16
     d7a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d7e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d82:	60 e0       	ldi	r22, 0x00	; 0
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	40 2b       	or	r20, r16
     d88:	51 2b       	or	r21, r17
     d8a:	62 2b       	or	r22, r18
     d8c:	73 2b       	or	r23, r19
     d8e:	40 93 7a 01 	sts	0x017A, r20	; 0x80017a <timestamp>
     d92:	50 93 7b 01 	sts	0x017B, r21	; 0x80017b <timestamp+0x1>
     d96:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <timestamp+0x2>
     d9a:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <timestamp+0x3>
     d9e:	b0 9b       	sbis	0x16, 0	; 22
     da0:	1a c0       	rjmp	.+52     	; 0xdd6 <__vector_2+0x9a>
     da2:	01 96       	adiw	r24, 0x01	; 1
     da4:	09 2e       	mov	r0, r25
     da6:	00 0c       	add	r0, r0
     da8:	aa 0b       	sbc	r26, r26
     daa:	bb 0b       	sbc	r27, r27
     dac:	bc 01       	movw	r22, r24
     dae:	55 27       	eor	r21, r21
     db0:	44 27       	eor	r20, r20
     db2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     db6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     dba:	a0 e0       	ldi	r26, 0x00	; 0
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	84 2b       	or	r24, r20
     dc0:	95 2b       	or	r25, r21
     dc2:	a6 2b       	or	r26, r22
     dc4:	b7 2b       	or	r27, r23
     dc6:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <timestamp>
     dca:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <timestamp+0x1>
     dce:	a0 93 7c 01 	sts	0x017C, r26	; 0x80017c <timestamp+0x2>
     dd2:	b0 93 7d 01 	sts	0x017D, r27	; 0x80017d <timestamp+0x3>
     dd6:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <mtable+0x2>
     dda:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <mtable+0x3>
     dde:	30 97       	sbiw	r30, 0x00	; 0
     de0:	39 f0       	breq	.+14     	; 0xdf0 <__vector_2+0xb4>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <otable+0x2>
     dea:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <otable+0x3>
     dee:	09 95       	icall
     df0:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <schedule>
     df4:	ff 91       	pop	r31
     df6:	ef 91       	pop	r30
     df8:	bf 91       	pop	r27
     dfa:	af 91       	pop	r26
     dfc:	9f 91       	pop	r25
     dfe:	8f 91       	pop	r24
     e00:	7f 91       	pop	r23
     e02:	6f 91       	pop	r22
     e04:	5f 91       	pop	r21
     e06:	4f 91       	pop	r20
     e08:	3f 91       	pop	r19
     e0a:	2f 91       	pop	r18
     e0c:	1f 91       	pop	r17
     e0e:	0f 91       	pop	r16
     e10:	0f 90       	pop	r0
     e12:	0f be       	out	0x3f, r0	; 63
     e14:	0f 90       	pop	r0
     e16:	1f 90       	pop	r1
     e18:	18 95       	reti

00000e1a <__vector_3>:
     e1a:	1f 92       	push	r1
     e1c:	0f 92       	push	r0
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	0f 92       	push	r0
     e22:	11 24       	eor	r1, r1
     e24:	0f 93       	push	r16
     e26:	1f 93       	push	r17
     e28:	2f 93       	push	r18
     e2a:	3f 93       	push	r19
     e2c:	4f 93       	push	r20
     e2e:	5f 93       	push	r21
     e30:	6f 93       	push	r22
     e32:	7f 93       	push	r23
     e34:	8f 93       	push	r24
     e36:	9f 93       	push	r25
     e38:	af 93       	push	r26
     e3a:	bf 93       	push	r27
     e3c:	ef 93       	push	r30
     e3e:	ff 93       	push	r31
     e40:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <overflows>
     e44:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <overflows+0x1>
     e48:	ac 01       	movw	r20, r24
     e4a:	09 2e       	mov	r0, r25
     e4c:	00 0c       	add	r0, r0
     e4e:	66 0b       	sbc	r22, r22
     e50:	77 0b       	sbc	r23, r23
     e52:	9a 01       	movw	r18, r20
     e54:	11 27       	eor	r17, r17
     e56:	00 27       	eor	r16, r16
     e58:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e5c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e60:	60 e0       	ldi	r22, 0x00	; 0
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	40 2b       	or	r20, r16
     e66:	51 2b       	or	r21, r17
     e68:	62 2b       	or	r22, r18
     e6a:	73 2b       	or	r23, r19
     e6c:	40 93 7a 01 	sts	0x017A, r20	; 0x80017a <timestamp>
     e70:	50 93 7b 01 	sts	0x017B, r21	; 0x80017b <timestamp+0x1>
     e74:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <timestamp+0x2>
     e78:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <timestamp+0x3>
     e7c:	b0 9b       	sbis	0x16, 0	; 22
     e7e:	1a c0       	rjmp	.+52     	; 0xeb4 <__vector_3+0x9a>
     e80:	01 96       	adiw	r24, 0x01	; 1
     e82:	09 2e       	mov	r0, r25
     e84:	00 0c       	add	r0, r0
     e86:	aa 0b       	sbc	r26, r26
     e88:	bb 0b       	sbc	r27, r27
     e8a:	bc 01       	movw	r22, r24
     e8c:	55 27       	eor	r21, r21
     e8e:	44 27       	eor	r20, r20
     e90:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e94:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e98:	a0 e0       	ldi	r26, 0x00	; 0
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	84 2b       	or	r24, r20
     e9e:	95 2b       	or	r25, r21
     ea0:	a6 2b       	or	r26, r22
     ea2:	b7 2b       	or	r27, r23
     ea4:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <timestamp>
     ea8:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <timestamp+0x1>
     eac:	a0 93 7c 01 	sts	0x017C, r26	; 0x80017c <timestamp+0x2>
     eb0:	b0 93 7d 01 	sts	0x017D, r27	; 0x80017d <timestamp+0x3>
     eb4:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <mtable+0x4>
     eb8:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <mtable+0x5>
     ebc:	30 97       	sbiw	r30, 0x00	; 0
     ebe:	39 f0       	breq	.+14     	; 0xece <__vector_3+0xb4>
     ec0:	62 e0       	ldi	r22, 0x02	; 2
     ec2:	70 e0       	ldi	r23, 0x00	; 0
     ec4:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <otable+0x4>
     ec8:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <otable+0x5>
     ecc:	09 95       	icall
     ece:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <schedule>
     ed2:	ff 91       	pop	r31
     ed4:	ef 91       	pop	r30
     ed6:	bf 91       	pop	r27
     ed8:	af 91       	pop	r26
     eda:	9f 91       	pop	r25
     edc:	8f 91       	pop	r24
     ede:	7f 91       	pop	r23
     ee0:	6f 91       	pop	r22
     ee2:	5f 91       	pop	r21
     ee4:	4f 91       	pop	r20
     ee6:	3f 91       	pop	r19
     ee8:	2f 91       	pop	r18
     eea:	1f 91       	pop	r17
     eec:	0f 91       	pop	r16
     eee:	0f 90       	pop	r0
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	0f 90       	pop	r0
     ef4:	1f 90       	pop	r1
     ef6:	18 95       	reti

00000ef8 <__vector_4>:
     ef8:	1f 92       	push	r1
     efa:	0f 92       	push	r0
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	0f 92       	push	r0
     f00:	11 24       	eor	r1, r1
     f02:	0f 93       	push	r16
     f04:	1f 93       	push	r17
     f06:	2f 93       	push	r18
     f08:	3f 93       	push	r19
     f0a:	4f 93       	push	r20
     f0c:	5f 93       	push	r21
     f0e:	6f 93       	push	r22
     f10:	7f 93       	push	r23
     f12:	8f 93       	push	r24
     f14:	9f 93       	push	r25
     f16:	af 93       	push	r26
     f18:	bf 93       	push	r27
     f1a:	ef 93       	push	r30
     f1c:	ff 93       	push	r31
     f1e:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <overflows>
     f22:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <overflows+0x1>
     f26:	ac 01       	movw	r20, r24
     f28:	09 2e       	mov	r0, r25
     f2a:	00 0c       	add	r0, r0
     f2c:	66 0b       	sbc	r22, r22
     f2e:	77 0b       	sbc	r23, r23
     f30:	9a 01       	movw	r18, r20
     f32:	11 27       	eor	r17, r17
     f34:	00 27       	eor	r16, r16
     f36:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f3a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	40 2b       	or	r20, r16
     f44:	51 2b       	or	r21, r17
     f46:	62 2b       	or	r22, r18
     f48:	73 2b       	or	r23, r19
     f4a:	40 93 7a 01 	sts	0x017A, r20	; 0x80017a <timestamp>
     f4e:	50 93 7b 01 	sts	0x017B, r21	; 0x80017b <timestamp+0x1>
     f52:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <timestamp+0x2>
     f56:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <timestamp+0x3>
     f5a:	b0 9b       	sbis	0x16, 0	; 22
     f5c:	1a c0       	rjmp	.+52     	; 0xf92 <__vector_4+0x9a>
     f5e:	01 96       	adiw	r24, 0x01	; 1
     f60:	09 2e       	mov	r0, r25
     f62:	00 0c       	add	r0, r0
     f64:	aa 0b       	sbc	r26, r26
     f66:	bb 0b       	sbc	r27, r27
     f68:	bc 01       	movw	r22, r24
     f6a:	55 27       	eor	r21, r21
     f6c:	44 27       	eor	r20, r20
     f6e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f72:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f76:	a0 e0       	ldi	r26, 0x00	; 0
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	84 2b       	or	r24, r20
     f7c:	95 2b       	or	r25, r21
     f7e:	a6 2b       	or	r26, r22
     f80:	b7 2b       	or	r27, r23
     f82:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <timestamp>
     f86:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <timestamp+0x1>
     f8a:	a0 93 7c 01 	sts	0x017C, r26	; 0x80017c <timestamp+0x2>
     f8e:	b0 93 7d 01 	sts	0x017D, r27	; 0x80017d <timestamp+0x3>
     f92:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <mtable+0x6>
     f96:	f0 91 21 02 	lds	r31, 0x0221	; 0x800221 <mtable+0x7>
     f9a:	30 97       	sbiw	r30, 0x00	; 0
     f9c:	39 f0       	breq	.+14     	; 0xfac <__vector_4+0xb4>
     f9e:	63 e0       	ldi	r22, 0x03	; 3
     fa0:	70 e0       	ldi	r23, 0x00	; 0
     fa2:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <otable+0x6>
     fa6:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <otable+0x7>
     faa:	09 95       	icall
     fac:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <schedule>
     fb0:	ff 91       	pop	r31
     fb2:	ef 91       	pop	r30
     fb4:	bf 91       	pop	r27
     fb6:	af 91       	pop	r26
     fb8:	9f 91       	pop	r25
     fba:	8f 91       	pop	r24
     fbc:	7f 91       	pop	r23
     fbe:	6f 91       	pop	r22
     fc0:	5f 91       	pop	r21
     fc2:	4f 91       	pop	r20
     fc4:	3f 91       	pop	r19
     fc6:	2f 91       	pop	r18
     fc8:	1f 91       	pop	r17
     fca:	0f 91       	pop	r16
     fcc:	0f 90       	pop	r0
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	0f 90       	pop	r0
     fd2:	1f 90       	pop	r1
     fd4:	18 95       	reti

00000fd6 <__vector_5>:
     fd6:	1f 92       	push	r1
     fd8:	0f 92       	push	r0
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	0f 92       	push	r0
     fde:	11 24       	eor	r1, r1
     fe0:	0f 93       	push	r16
     fe2:	1f 93       	push	r17
     fe4:	2f 93       	push	r18
     fe6:	3f 93       	push	r19
     fe8:	4f 93       	push	r20
     fea:	5f 93       	push	r21
     fec:	6f 93       	push	r22
     fee:	7f 93       	push	r23
     ff0:	8f 93       	push	r24
     ff2:	9f 93       	push	r25
     ff4:	af 93       	push	r26
     ff6:	bf 93       	push	r27
     ff8:	ef 93       	push	r30
     ffa:	ff 93       	push	r31
     ffc:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <overflows>
    1000:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <overflows+0x1>
    1004:	ac 01       	movw	r20, r24
    1006:	09 2e       	mov	r0, r25
    1008:	00 0c       	add	r0, r0
    100a:	66 0b       	sbc	r22, r22
    100c:	77 0b       	sbc	r23, r23
    100e:	9a 01       	movw	r18, r20
    1010:	11 27       	eor	r17, r17
    1012:	00 27       	eor	r16, r16
    1014:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1018:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    101c:	60 e0       	ldi	r22, 0x00	; 0
    101e:	70 e0       	ldi	r23, 0x00	; 0
    1020:	40 2b       	or	r20, r16
    1022:	51 2b       	or	r21, r17
    1024:	62 2b       	or	r22, r18
    1026:	73 2b       	or	r23, r19
    1028:	40 93 7a 01 	sts	0x017A, r20	; 0x80017a <timestamp>
    102c:	50 93 7b 01 	sts	0x017B, r21	; 0x80017b <timestamp+0x1>
    1030:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <timestamp+0x2>
    1034:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <timestamp+0x3>
    1038:	b0 9b       	sbis	0x16, 0	; 22
    103a:	1a c0       	rjmp	.+52     	; 0x1070 <__vector_5+0x9a>
    103c:	01 96       	adiw	r24, 0x01	; 1
    103e:	09 2e       	mov	r0, r25
    1040:	00 0c       	add	r0, r0
    1042:	aa 0b       	sbc	r26, r26
    1044:	bb 0b       	sbc	r27, r27
    1046:	bc 01       	movw	r22, r24
    1048:	55 27       	eor	r21, r21
    104a:	44 27       	eor	r20, r20
    104c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1050:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1054:	a0 e0       	ldi	r26, 0x00	; 0
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	84 2b       	or	r24, r20
    105a:	95 2b       	or	r25, r21
    105c:	a6 2b       	or	r26, r22
    105e:	b7 2b       	or	r27, r23
    1060:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <timestamp>
    1064:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <timestamp+0x1>
    1068:	a0 93 7c 01 	sts	0x017C, r26	; 0x80017c <timestamp+0x2>
    106c:	b0 93 7d 01 	sts	0x017D, r27	; 0x80017d <timestamp+0x3>
    1070:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <mtable+0x8>
    1074:	f0 91 23 02 	lds	r31, 0x0223	; 0x800223 <mtable+0x9>
    1078:	30 97       	sbiw	r30, 0x00	; 0
    107a:	39 f0       	breq	.+14     	; 0x108a <__vector_5+0xb4>
    107c:	64 e0       	ldi	r22, 0x04	; 4
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <otable+0x8>
    1084:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <otable+0x9>
    1088:	09 95       	icall
    108a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <schedule>
    108e:	ff 91       	pop	r31
    1090:	ef 91       	pop	r30
    1092:	bf 91       	pop	r27
    1094:	af 91       	pop	r26
    1096:	9f 91       	pop	r25
    1098:	8f 91       	pop	r24
    109a:	7f 91       	pop	r23
    109c:	6f 91       	pop	r22
    109e:	5f 91       	pop	r21
    10a0:	4f 91       	pop	r20
    10a2:	3f 91       	pop	r19
    10a4:	2f 91       	pop	r18
    10a6:	1f 91       	pop	r17
    10a8:	0f 91       	pop	r16
    10aa:	0f 90       	pop	r0
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	0f 90       	pop	r0
    10b0:	1f 90       	pop	r1
    10b2:	18 95       	reti

000010b4 <__vector_10>:
    10b4:	1f 92       	push	r1
    10b6:	0f 92       	push	r0
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	0f 92       	push	r0
    10bc:	11 24       	eor	r1, r1
    10be:	0f 93       	push	r16
    10c0:	1f 93       	push	r17
    10c2:	2f 93       	push	r18
    10c4:	3f 93       	push	r19
    10c6:	4f 93       	push	r20
    10c8:	5f 93       	push	r21
    10ca:	6f 93       	push	r22
    10cc:	7f 93       	push	r23
    10ce:	8f 93       	push	r24
    10d0:	9f 93       	push	r25
    10d2:	af 93       	push	r26
    10d4:	bf 93       	push	r27
    10d6:	ef 93       	push	r30
    10d8:	ff 93       	push	r31
    10da:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <overflows>
    10de:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <overflows+0x1>
    10e2:	ac 01       	movw	r20, r24
    10e4:	09 2e       	mov	r0, r25
    10e6:	00 0c       	add	r0, r0
    10e8:	66 0b       	sbc	r22, r22
    10ea:	77 0b       	sbc	r23, r23
    10ec:	9a 01       	movw	r18, r20
    10ee:	11 27       	eor	r17, r17
    10f0:	00 27       	eor	r16, r16
    10f2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10f6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10fa:	60 e0       	ldi	r22, 0x00	; 0
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	40 2b       	or	r20, r16
    1100:	51 2b       	or	r21, r17
    1102:	62 2b       	or	r22, r18
    1104:	73 2b       	or	r23, r19
    1106:	40 93 7a 01 	sts	0x017A, r20	; 0x80017a <timestamp>
    110a:	50 93 7b 01 	sts	0x017B, r21	; 0x80017b <timestamp+0x1>
    110e:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <timestamp+0x2>
    1112:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <timestamp+0x3>
    1116:	b0 9b       	sbis	0x16, 0	; 22
    1118:	1a c0       	rjmp	.+52     	; 0x114e <__vector_10+0x9a>
    111a:	01 96       	adiw	r24, 0x01	; 1
    111c:	09 2e       	mov	r0, r25
    111e:	00 0c       	add	r0, r0
    1120:	aa 0b       	sbc	r26, r26
    1122:	bb 0b       	sbc	r27, r27
    1124:	bc 01       	movw	r22, r24
    1126:	55 27       	eor	r21, r21
    1128:	44 27       	eor	r20, r20
    112a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    112e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1132:	a0 e0       	ldi	r26, 0x00	; 0
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	84 2b       	or	r24, r20
    1138:	95 2b       	or	r25, r21
    113a:	a6 2b       	or	r26, r22
    113c:	b7 2b       	or	r27, r23
    113e:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <timestamp>
    1142:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <timestamp+0x1>
    1146:	a0 93 7c 01 	sts	0x017C, r26	; 0x80017c <timestamp+0x2>
    114a:	b0 93 7d 01 	sts	0x017D, r27	; 0x80017d <timestamp+0x3>
    114e:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <mtable+0xa>
    1152:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <mtable+0xb>
    1156:	30 97       	sbiw	r30, 0x00	; 0
    1158:	39 f0       	breq	.+14     	; 0x1168 <__vector_10+0xb4>
    115a:	65 e0       	ldi	r22, 0x05	; 5
    115c:	70 e0       	ldi	r23, 0x00	; 0
    115e:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <otable+0xa>
    1162:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <otable+0xb>
    1166:	09 95       	icall
    1168:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <schedule>
    116c:	ff 91       	pop	r31
    116e:	ef 91       	pop	r30
    1170:	bf 91       	pop	r27
    1172:	af 91       	pop	r26
    1174:	9f 91       	pop	r25
    1176:	8f 91       	pop	r24
    1178:	7f 91       	pop	r23
    117a:	6f 91       	pop	r22
    117c:	5f 91       	pop	r21
    117e:	4f 91       	pop	r20
    1180:	3f 91       	pop	r19
    1182:	2f 91       	pop	r18
    1184:	1f 91       	pop	r17
    1186:	0f 91       	pop	r16
    1188:	0f 90       	pop	r0
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	0f 90       	pop	r0
    118e:	1f 90       	pop	r1
    1190:	18 95       	reti

00001192 <__vector_11>:
    1192:	1f 92       	push	r1
    1194:	0f 92       	push	r0
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	0f 92       	push	r0
    119a:	11 24       	eor	r1, r1
    119c:	0f 93       	push	r16
    119e:	1f 93       	push	r17
    11a0:	2f 93       	push	r18
    11a2:	3f 93       	push	r19
    11a4:	4f 93       	push	r20
    11a6:	5f 93       	push	r21
    11a8:	6f 93       	push	r22
    11aa:	7f 93       	push	r23
    11ac:	8f 93       	push	r24
    11ae:	9f 93       	push	r25
    11b0:	af 93       	push	r26
    11b2:	bf 93       	push	r27
    11b4:	ef 93       	push	r30
    11b6:	ff 93       	push	r31
    11b8:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <overflows>
    11bc:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <overflows+0x1>
    11c0:	ac 01       	movw	r20, r24
    11c2:	09 2e       	mov	r0, r25
    11c4:	00 0c       	add	r0, r0
    11c6:	66 0b       	sbc	r22, r22
    11c8:	77 0b       	sbc	r23, r23
    11ca:	9a 01       	movw	r18, r20
    11cc:	11 27       	eor	r17, r17
    11ce:	00 27       	eor	r16, r16
    11d0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11d4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11d8:	60 e0       	ldi	r22, 0x00	; 0
    11da:	70 e0       	ldi	r23, 0x00	; 0
    11dc:	40 2b       	or	r20, r16
    11de:	51 2b       	or	r21, r17
    11e0:	62 2b       	or	r22, r18
    11e2:	73 2b       	or	r23, r19
    11e4:	40 93 7a 01 	sts	0x017A, r20	; 0x80017a <timestamp>
    11e8:	50 93 7b 01 	sts	0x017B, r21	; 0x80017b <timestamp+0x1>
    11ec:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <timestamp+0x2>
    11f0:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <timestamp+0x3>
    11f4:	b0 9b       	sbis	0x16, 0	; 22
    11f6:	1a c0       	rjmp	.+52     	; 0x122c <__vector_11+0x9a>
    11f8:	01 96       	adiw	r24, 0x01	; 1
    11fa:	09 2e       	mov	r0, r25
    11fc:	00 0c       	add	r0, r0
    11fe:	aa 0b       	sbc	r26, r26
    1200:	bb 0b       	sbc	r27, r27
    1202:	bc 01       	movw	r22, r24
    1204:	55 27       	eor	r21, r21
    1206:	44 27       	eor	r20, r20
    1208:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    120c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1210:	a0 e0       	ldi	r26, 0x00	; 0
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	84 2b       	or	r24, r20
    1216:	95 2b       	or	r25, r21
    1218:	a6 2b       	or	r26, r22
    121a:	b7 2b       	or	r27, r23
    121c:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <timestamp>
    1220:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <timestamp+0x1>
    1224:	a0 93 7c 01 	sts	0x017C, r26	; 0x80017c <timestamp+0x2>
    1228:	b0 93 7d 01 	sts	0x017D, r27	; 0x80017d <timestamp+0x3>
    122c:	e0 91 26 02 	lds	r30, 0x0226	; 0x800226 <mtable+0xc>
    1230:	f0 91 27 02 	lds	r31, 0x0227	; 0x800227 <mtable+0xd>
    1234:	30 97       	sbiw	r30, 0x00	; 0
    1236:	39 f0       	breq	.+14     	; 0x1246 <__vector_11+0xb4>
    1238:	66 e0       	ldi	r22, 0x06	; 6
    123a:	70 e0       	ldi	r23, 0x00	; 0
    123c:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <otable+0xc>
    1240:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <otable+0xd>
    1244:	09 95       	icall
    1246:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <schedule>
    124a:	ff 91       	pop	r31
    124c:	ef 91       	pop	r30
    124e:	bf 91       	pop	r27
    1250:	af 91       	pop	r26
    1252:	9f 91       	pop	r25
    1254:	8f 91       	pop	r24
    1256:	7f 91       	pop	r23
    1258:	6f 91       	pop	r22
    125a:	5f 91       	pop	r21
    125c:	4f 91       	pop	r20
    125e:	3f 91       	pop	r19
    1260:	2f 91       	pop	r18
    1262:	1f 91       	pop	r17
    1264:	0f 91       	pop	r16
    1266:	0f 90       	pop	r0
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	0f 90       	pop	r0
    126c:	1f 90       	pop	r1
    126e:	18 95       	reti

00001270 <__vector_12>:
    1270:	1f 92       	push	r1
    1272:	0f 92       	push	r0
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	0f 92       	push	r0
    1278:	11 24       	eor	r1, r1
    127a:	0f 93       	push	r16
    127c:	1f 93       	push	r17
    127e:	2f 93       	push	r18
    1280:	3f 93       	push	r19
    1282:	4f 93       	push	r20
    1284:	5f 93       	push	r21
    1286:	6f 93       	push	r22
    1288:	7f 93       	push	r23
    128a:	8f 93       	push	r24
    128c:	9f 93       	push	r25
    128e:	af 93       	push	r26
    1290:	bf 93       	push	r27
    1292:	ef 93       	push	r30
    1294:	ff 93       	push	r31
    1296:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <overflows>
    129a:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <overflows+0x1>
    129e:	ac 01       	movw	r20, r24
    12a0:	09 2e       	mov	r0, r25
    12a2:	00 0c       	add	r0, r0
    12a4:	66 0b       	sbc	r22, r22
    12a6:	77 0b       	sbc	r23, r23
    12a8:	9a 01       	movw	r18, r20
    12aa:	11 27       	eor	r17, r17
    12ac:	00 27       	eor	r16, r16
    12ae:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12b2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12b6:	60 e0       	ldi	r22, 0x00	; 0
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	40 2b       	or	r20, r16
    12bc:	51 2b       	or	r21, r17
    12be:	62 2b       	or	r22, r18
    12c0:	73 2b       	or	r23, r19
    12c2:	40 93 7a 01 	sts	0x017A, r20	; 0x80017a <timestamp>
    12c6:	50 93 7b 01 	sts	0x017B, r21	; 0x80017b <timestamp+0x1>
    12ca:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <timestamp+0x2>
    12ce:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <timestamp+0x3>
    12d2:	b0 9b       	sbis	0x16, 0	; 22
    12d4:	1a c0       	rjmp	.+52     	; 0x130a <__vector_12+0x9a>
    12d6:	01 96       	adiw	r24, 0x01	; 1
    12d8:	09 2e       	mov	r0, r25
    12da:	00 0c       	add	r0, r0
    12dc:	aa 0b       	sbc	r26, r26
    12de:	bb 0b       	sbc	r27, r27
    12e0:	bc 01       	movw	r22, r24
    12e2:	55 27       	eor	r21, r21
    12e4:	44 27       	eor	r20, r20
    12e6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12ea:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12ee:	a0 e0       	ldi	r26, 0x00	; 0
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	84 2b       	or	r24, r20
    12f4:	95 2b       	or	r25, r21
    12f6:	a6 2b       	or	r26, r22
    12f8:	b7 2b       	or	r27, r23
    12fa:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <timestamp>
    12fe:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <timestamp+0x1>
    1302:	a0 93 7c 01 	sts	0x017C, r26	; 0x80017c <timestamp+0x2>
    1306:	b0 93 7d 01 	sts	0x017D, r27	; 0x80017d <timestamp+0x3>
    130a:	e0 91 28 02 	lds	r30, 0x0228	; 0x800228 <mtable+0xe>
    130e:	f0 91 29 02 	lds	r31, 0x0229	; 0x800229 <mtable+0xf>
    1312:	30 97       	sbiw	r30, 0x00	; 0
    1314:	39 f0       	breq	.+14     	; 0x1324 <__vector_12+0xb4>
    1316:	67 e0       	ldi	r22, 0x07	; 7
    1318:	70 e0       	ldi	r23, 0x00	; 0
    131a:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <otable+0xe>
    131e:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <otable+0xf>
    1322:	09 95       	icall
    1324:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <schedule>
    1328:	ff 91       	pop	r31
    132a:	ef 91       	pop	r30
    132c:	bf 91       	pop	r27
    132e:	af 91       	pop	r26
    1330:	9f 91       	pop	r25
    1332:	8f 91       	pop	r24
    1334:	7f 91       	pop	r23
    1336:	6f 91       	pop	r22
    1338:	5f 91       	pop	r21
    133a:	4f 91       	pop	r20
    133c:	3f 91       	pop	r19
    133e:	2f 91       	pop	r18
    1340:	1f 91       	pop	r17
    1342:	0f 91       	pop	r16
    1344:	0f 90       	pop	r0
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	0f 90       	pop	r0
    134a:	1f 90       	pop	r1
    134c:	18 95       	reti

0000134e <__vector_13>:
    134e:	1f 92       	push	r1
    1350:	0f 92       	push	r0
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	0f 92       	push	r0
    1356:	11 24       	eor	r1, r1
    1358:	0f 93       	push	r16
    135a:	1f 93       	push	r17
    135c:	2f 93       	push	r18
    135e:	3f 93       	push	r19
    1360:	4f 93       	push	r20
    1362:	5f 93       	push	r21
    1364:	6f 93       	push	r22
    1366:	7f 93       	push	r23
    1368:	8f 93       	push	r24
    136a:	9f 93       	push	r25
    136c:	af 93       	push	r26
    136e:	bf 93       	push	r27
    1370:	ef 93       	push	r30
    1372:	ff 93       	push	r31
    1374:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <overflows>
    1378:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <overflows+0x1>
    137c:	ac 01       	movw	r20, r24
    137e:	09 2e       	mov	r0, r25
    1380:	00 0c       	add	r0, r0
    1382:	66 0b       	sbc	r22, r22
    1384:	77 0b       	sbc	r23, r23
    1386:	9a 01       	movw	r18, r20
    1388:	11 27       	eor	r17, r17
    138a:	00 27       	eor	r16, r16
    138c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1390:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	70 e0       	ldi	r23, 0x00	; 0
    1398:	40 2b       	or	r20, r16
    139a:	51 2b       	or	r21, r17
    139c:	62 2b       	or	r22, r18
    139e:	73 2b       	or	r23, r19
    13a0:	40 93 7a 01 	sts	0x017A, r20	; 0x80017a <timestamp>
    13a4:	50 93 7b 01 	sts	0x017B, r21	; 0x80017b <timestamp+0x1>
    13a8:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <timestamp+0x2>
    13ac:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <timestamp+0x3>
    13b0:	b0 9b       	sbis	0x16, 0	; 22
    13b2:	1a c0       	rjmp	.+52     	; 0x13e8 <__vector_13+0x9a>
    13b4:	01 96       	adiw	r24, 0x01	; 1
    13b6:	09 2e       	mov	r0, r25
    13b8:	00 0c       	add	r0, r0
    13ba:	aa 0b       	sbc	r26, r26
    13bc:	bb 0b       	sbc	r27, r27
    13be:	bc 01       	movw	r22, r24
    13c0:	55 27       	eor	r21, r21
    13c2:	44 27       	eor	r20, r20
    13c4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13c8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13cc:	a0 e0       	ldi	r26, 0x00	; 0
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	84 2b       	or	r24, r20
    13d2:	95 2b       	or	r25, r21
    13d4:	a6 2b       	or	r26, r22
    13d6:	b7 2b       	or	r27, r23
    13d8:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <timestamp>
    13dc:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <timestamp+0x1>
    13e0:	a0 93 7c 01 	sts	0x017C, r26	; 0x80017c <timestamp+0x2>
    13e4:	b0 93 7d 01 	sts	0x017D, r27	; 0x80017d <timestamp+0x3>
    13e8:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <mtable+0x10>
    13ec:	f0 91 2b 02 	lds	r31, 0x022B	; 0x80022b <mtable+0x11>
    13f0:	30 97       	sbiw	r30, 0x00	; 0
    13f2:	39 f0       	breq	.+14     	; 0x1402 <__vector_13+0xb4>
    13f4:	68 e0       	ldi	r22, 0x08	; 8
    13f6:	70 e0       	ldi	r23, 0x00	; 0
    13f8:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <otable+0x10>
    13fc:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <otable+0x11>
    1400:	09 95       	icall
    1402:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <schedule>
    1406:	ff 91       	pop	r31
    1408:	ef 91       	pop	r30
    140a:	bf 91       	pop	r27
    140c:	af 91       	pop	r26
    140e:	9f 91       	pop	r25
    1410:	8f 91       	pop	r24
    1412:	7f 91       	pop	r23
    1414:	6f 91       	pop	r22
    1416:	5f 91       	pop	r21
    1418:	4f 91       	pop	r20
    141a:	3f 91       	pop	r19
    141c:	2f 91       	pop	r18
    141e:	1f 91       	pop	r17
    1420:	0f 91       	pop	r16
    1422:	0f 90       	pop	r0
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	0f 90       	pop	r0
    1428:	1f 90       	pop	r1
    142a:	18 95       	reti

0000142c <__vector_14>:
    142c:	1f 92       	push	r1
    142e:	0f 92       	push	r0
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	0f 92       	push	r0
    1434:	11 24       	eor	r1, r1
    1436:	0f 93       	push	r16
    1438:	1f 93       	push	r17
    143a:	2f 93       	push	r18
    143c:	3f 93       	push	r19
    143e:	4f 93       	push	r20
    1440:	5f 93       	push	r21
    1442:	6f 93       	push	r22
    1444:	7f 93       	push	r23
    1446:	8f 93       	push	r24
    1448:	9f 93       	push	r25
    144a:	af 93       	push	r26
    144c:	bf 93       	push	r27
    144e:	ef 93       	push	r30
    1450:	ff 93       	push	r31
    1452:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <overflows>
    1456:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <overflows+0x1>
    145a:	ac 01       	movw	r20, r24
    145c:	09 2e       	mov	r0, r25
    145e:	00 0c       	add	r0, r0
    1460:	66 0b       	sbc	r22, r22
    1462:	77 0b       	sbc	r23, r23
    1464:	9a 01       	movw	r18, r20
    1466:	11 27       	eor	r17, r17
    1468:	00 27       	eor	r16, r16
    146a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    146e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1472:	60 e0       	ldi	r22, 0x00	; 0
    1474:	70 e0       	ldi	r23, 0x00	; 0
    1476:	40 2b       	or	r20, r16
    1478:	51 2b       	or	r21, r17
    147a:	62 2b       	or	r22, r18
    147c:	73 2b       	or	r23, r19
    147e:	40 93 7a 01 	sts	0x017A, r20	; 0x80017a <timestamp>
    1482:	50 93 7b 01 	sts	0x017B, r21	; 0x80017b <timestamp+0x1>
    1486:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <timestamp+0x2>
    148a:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <timestamp+0x3>
    148e:	b0 9b       	sbis	0x16, 0	; 22
    1490:	1a c0       	rjmp	.+52     	; 0x14c6 <__vector_14+0x9a>
    1492:	01 96       	adiw	r24, 0x01	; 1
    1494:	09 2e       	mov	r0, r25
    1496:	00 0c       	add	r0, r0
    1498:	aa 0b       	sbc	r26, r26
    149a:	bb 0b       	sbc	r27, r27
    149c:	bc 01       	movw	r22, r24
    149e:	55 27       	eor	r21, r21
    14a0:	44 27       	eor	r20, r20
    14a2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14a6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14aa:	a0 e0       	ldi	r26, 0x00	; 0
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	84 2b       	or	r24, r20
    14b0:	95 2b       	or	r25, r21
    14b2:	a6 2b       	or	r26, r22
    14b4:	b7 2b       	or	r27, r23
    14b6:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <timestamp>
    14ba:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <timestamp+0x1>
    14be:	a0 93 7c 01 	sts	0x017C, r26	; 0x80017c <timestamp+0x2>
    14c2:	b0 93 7d 01 	sts	0x017D, r27	; 0x80017d <timestamp+0x3>
    14c6:	e0 91 2c 02 	lds	r30, 0x022C	; 0x80022c <mtable+0x12>
    14ca:	f0 91 2d 02 	lds	r31, 0x022D	; 0x80022d <mtable+0x13>
    14ce:	30 97       	sbiw	r30, 0x00	; 0
    14d0:	39 f0       	breq	.+14     	; 0x14e0 <__vector_14+0xb4>
    14d2:	69 e0       	ldi	r22, 0x09	; 9
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <otable+0x12>
    14da:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <otable+0x13>
    14de:	09 95       	icall
    14e0:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <schedule>
    14e4:	ff 91       	pop	r31
    14e6:	ef 91       	pop	r30
    14e8:	bf 91       	pop	r27
    14ea:	af 91       	pop	r26
    14ec:	9f 91       	pop	r25
    14ee:	8f 91       	pop	r24
    14f0:	7f 91       	pop	r23
    14f2:	6f 91       	pop	r22
    14f4:	5f 91       	pop	r21
    14f6:	4f 91       	pop	r20
    14f8:	3f 91       	pop	r19
    14fa:	2f 91       	pop	r18
    14fc:	1f 91       	pop	r17
    14fe:	0f 91       	pop	r16
    1500:	0f 90       	pop	r0
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	0f 90       	pop	r0
    1506:	1f 90       	pop	r1
    1508:	18 95       	reti

0000150a <__vector_15>:
    150a:	1f 92       	push	r1
    150c:	0f 92       	push	r0
    150e:	0f b6       	in	r0, 0x3f	; 63
    1510:	0f 92       	push	r0
    1512:	11 24       	eor	r1, r1
    1514:	0f 93       	push	r16
    1516:	1f 93       	push	r17
    1518:	2f 93       	push	r18
    151a:	3f 93       	push	r19
    151c:	4f 93       	push	r20
    151e:	5f 93       	push	r21
    1520:	6f 93       	push	r22
    1522:	7f 93       	push	r23
    1524:	8f 93       	push	r24
    1526:	9f 93       	push	r25
    1528:	af 93       	push	r26
    152a:	bf 93       	push	r27
    152c:	ef 93       	push	r30
    152e:	ff 93       	push	r31
    1530:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <overflows>
    1534:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <overflows+0x1>
    1538:	ac 01       	movw	r20, r24
    153a:	09 2e       	mov	r0, r25
    153c:	00 0c       	add	r0, r0
    153e:	66 0b       	sbc	r22, r22
    1540:	77 0b       	sbc	r23, r23
    1542:	9a 01       	movw	r18, r20
    1544:	11 27       	eor	r17, r17
    1546:	00 27       	eor	r16, r16
    1548:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    154c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1550:	60 e0       	ldi	r22, 0x00	; 0
    1552:	70 e0       	ldi	r23, 0x00	; 0
    1554:	40 2b       	or	r20, r16
    1556:	51 2b       	or	r21, r17
    1558:	62 2b       	or	r22, r18
    155a:	73 2b       	or	r23, r19
    155c:	40 93 7a 01 	sts	0x017A, r20	; 0x80017a <timestamp>
    1560:	50 93 7b 01 	sts	0x017B, r21	; 0x80017b <timestamp+0x1>
    1564:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <timestamp+0x2>
    1568:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <timestamp+0x3>
    156c:	b0 9b       	sbis	0x16, 0	; 22
    156e:	1a c0       	rjmp	.+52     	; 0x15a4 <__vector_15+0x9a>
    1570:	01 96       	adiw	r24, 0x01	; 1
    1572:	09 2e       	mov	r0, r25
    1574:	00 0c       	add	r0, r0
    1576:	aa 0b       	sbc	r26, r26
    1578:	bb 0b       	sbc	r27, r27
    157a:	bc 01       	movw	r22, r24
    157c:	55 27       	eor	r21, r21
    157e:	44 27       	eor	r20, r20
    1580:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1584:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1588:	a0 e0       	ldi	r26, 0x00	; 0
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	84 2b       	or	r24, r20
    158e:	95 2b       	or	r25, r21
    1590:	a6 2b       	or	r26, r22
    1592:	b7 2b       	or	r27, r23
    1594:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <timestamp>
    1598:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <timestamp+0x1>
    159c:	a0 93 7c 01 	sts	0x017C, r26	; 0x80017c <timestamp+0x2>
    15a0:	b0 93 7d 01 	sts	0x017D, r27	; 0x80017d <timestamp+0x3>
    15a4:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <mtable+0x14>
    15a8:	f0 91 2f 02 	lds	r31, 0x022F	; 0x80022f <mtable+0x15>
    15ac:	30 97       	sbiw	r30, 0x00	; 0
    15ae:	39 f0       	breq	.+14     	; 0x15be <__vector_15+0xb4>
    15b0:	6a e0       	ldi	r22, 0x0A	; 10
    15b2:	70 e0       	ldi	r23, 0x00	; 0
    15b4:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <otable+0x14>
    15b8:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <otable+0x15>
    15bc:	09 95       	icall
    15be:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <schedule>
    15c2:	ff 91       	pop	r31
    15c4:	ef 91       	pop	r30
    15c6:	bf 91       	pop	r27
    15c8:	af 91       	pop	r26
    15ca:	9f 91       	pop	r25
    15cc:	8f 91       	pop	r24
    15ce:	7f 91       	pop	r23
    15d0:	6f 91       	pop	r22
    15d2:	5f 91       	pop	r21
    15d4:	4f 91       	pop	r20
    15d6:	3f 91       	pop	r19
    15d8:	2f 91       	pop	r18
    15da:	1f 91       	pop	r17
    15dc:	0f 91       	pop	r16
    15de:	0f 90       	pop	r0
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	0f 90       	pop	r0
    15e4:	1f 90       	pop	r1
    15e6:	18 95       	reti

000015e8 <__vector_16>:
    15e8:	1f 92       	push	r1
    15ea:	0f 92       	push	r0
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	0f 92       	push	r0
    15f0:	11 24       	eor	r1, r1
    15f2:	0f 93       	push	r16
    15f4:	1f 93       	push	r17
    15f6:	2f 93       	push	r18
    15f8:	3f 93       	push	r19
    15fa:	4f 93       	push	r20
    15fc:	5f 93       	push	r21
    15fe:	6f 93       	push	r22
    1600:	7f 93       	push	r23
    1602:	8f 93       	push	r24
    1604:	9f 93       	push	r25
    1606:	af 93       	push	r26
    1608:	bf 93       	push	r27
    160a:	ef 93       	push	r30
    160c:	ff 93       	push	r31
    160e:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <overflows>
    1612:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <overflows+0x1>
    1616:	ac 01       	movw	r20, r24
    1618:	09 2e       	mov	r0, r25
    161a:	00 0c       	add	r0, r0
    161c:	66 0b       	sbc	r22, r22
    161e:	77 0b       	sbc	r23, r23
    1620:	9a 01       	movw	r18, r20
    1622:	11 27       	eor	r17, r17
    1624:	00 27       	eor	r16, r16
    1626:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    162a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    162e:	60 e0       	ldi	r22, 0x00	; 0
    1630:	70 e0       	ldi	r23, 0x00	; 0
    1632:	40 2b       	or	r20, r16
    1634:	51 2b       	or	r21, r17
    1636:	62 2b       	or	r22, r18
    1638:	73 2b       	or	r23, r19
    163a:	40 93 7a 01 	sts	0x017A, r20	; 0x80017a <timestamp>
    163e:	50 93 7b 01 	sts	0x017B, r21	; 0x80017b <timestamp+0x1>
    1642:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <timestamp+0x2>
    1646:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <timestamp+0x3>
    164a:	b0 9b       	sbis	0x16, 0	; 22
    164c:	1a c0       	rjmp	.+52     	; 0x1682 <__vector_16+0x9a>
    164e:	01 96       	adiw	r24, 0x01	; 1
    1650:	09 2e       	mov	r0, r25
    1652:	00 0c       	add	r0, r0
    1654:	aa 0b       	sbc	r26, r26
    1656:	bb 0b       	sbc	r27, r27
    1658:	bc 01       	movw	r22, r24
    165a:	55 27       	eor	r21, r21
    165c:	44 27       	eor	r20, r20
    165e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1662:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1666:	a0 e0       	ldi	r26, 0x00	; 0
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	84 2b       	or	r24, r20
    166c:	95 2b       	or	r25, r21
    166e:	a6 2b       	or	r26, r22
    1670:	b7 2b       	or	r27, r23
    1672:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <timestamp>
    1676:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <timestamp+0x1>
    167a:	a0 93 7c 01 	sts	0x017C, r26	; 0x80017c <timestamp+0x2>
    167e:	b0 93 7d 01 	sts	0x017D, r27	; 0x80017d <timestamp+0x3>
    1682:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <mtable+0x16>
    1686:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <mtable+0x17>
    168a:	30 97       	sbiw	r30, 0x00	; 0
    168c:	39 f0       	breq	.+14     	; 0x169c <__vector_16+0xb4>
    168e:	6b e0       	ldi	r22, 0x0B	; 11
    1690:	70 e0       	ldi	r23, 0x00	; 0
    1692:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <otable+0x16>
    1696:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <otable+0x17>
    169a:	09 95       	icall
    169c:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <schedule>
    16a0:	ff 91       	pop	r31
    16a2:	ef 91       	pop	r30
    16a4:	bf 91       	pop	r27
    16a6:	af 91       	pop	r26
    16a8:	9f 91       	pop	r25
    16aa:	8f 91       	pop	r24
    16ac:	7f 91       	pop	r23
    16ae:	6f 91       	pop	r22
    16b0:	5f 91       	pop	r21
    16b2:	4f 91       	pop	r20
    16b4:	3f 91       	pop	r19
    16b6:	2f 91       	pop	r18
    16b8:	1f 91       	pop	r17
    16ba:	0f 91       	pop	r16
    16bc:	0f 90       	pop	r0
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	0f 90       	pop	r0
    16c2:	1f 90       	pop	r1
    16c4:	18 95       	reti

000016c6 <__vector_17>:
    16c6:	1f 92       	push	r1
    16c8:	0f 92       	push	r0
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	0f 92       	push	r0
    16ce:	11 24       	eor	r1, r1
    16d0:	0f 93       	push	r16
    16d2:	1f 93       	push	r17
    16d4:	2f 93       	push	r18
    16d6:	3f 93       	push	r19
    16d8:	4f 93       	push	r20
    16da:	5f 93       	push	r21
    16dc:	6f 93       	push	r22
    16de:	7f 93       	push	r23
    16e0:	8f 93       	push	r24
    16e2:	9f 93       	push	r25
    16e4:	af 93       	push	r26
    16e6:	bf 93       	push	r27
    16e8:	ef 93       	push	r30
    16ea:	ff 93       	push	r31
    16ec:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <overflows>
    16f0:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <overflows+0x1>
    16f4:	ac 01       	movw	r20, r24
    16f6:	09 2e       	mov	r0, r25
    16f8:	00 0c       	add	r0, r0
    16fa:	66 0b       	sbc	r22, r22
    16fc:	77 0b       	sbc	r23, r23
    16fe:	9a 01       	movw	r18, r20
    1700:	11 27       	eor	r17, r17
    1702:	00 27       	eor	r16, r16
    1704:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1708:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    170c:	60 e0       	ldi	r22, 0x00	; 0
    170e:	70 e0       	ldi	r23, 0x00	; 0
    1710:	40 2b       	or	r20, r16
    1712:	51 2b       	or	r21, r17
    1714:	62 2b       	or	r22, r18
    1716:	73 2b       	or	r23, r19
    1718:	40 93 7a 01 	sts	0x017A, r20	; 0x80017a <timestamp>
    171c:	50 93 7b 01 	sts	0x017B, r21	; 0x80017b <timestamp+0x1>
    1720:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <timestamp+0x2>
    1724:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <timestamp+0x3>
    1728:	b0 9b       	sbis	0x16, 0	; 22
    172a:	1a c0       	rjmp	.+52     	; 0x1760 <__vector_17+0x9a>
    172c:	01 96       	adiw	r24, 0x01	; 1
    172e:	09 2e       	mov	r0, r25
    1730:	00 0c       	add	r0, r0
    1732:	aa 0b       	sbc	r26, r26
    1734:	bb 0b       	sbc	r27, r27
    1736:	bc 01       	movw	r22, r24
    1738:	55 27       	eor	r21, r21
    173a:	44 27       	eor	r20, r20
    173c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1740:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1744:	a0 e0       	ldi	r26, 0x00	; 0
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	84 2b       	or	r24, r20
    174a:	95 2b       	or	r25, r21
    174c:	a6 2b       	or	r26, r22
    174e:	b7 2b       	or	r27, r23
    1750:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <timestamp>
    1754:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <timestamp+0x1>
    1758:	a0 93 7c 01 	sts	0x017C, r26	; 0x80017c <timestamp+0x2>
    175c:	b0 93 7d 01 	sts	0x017D, r27	; 0x80017d <timestamp+0x3>
    1760:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <mtable+0x18>
    1764:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <mtable+0x19>
    1768:	30 97       	sbiw	r30, 0x00	; 0
    176a:	39 f0       	breq	.+14     	; 0x177a <__vector_17+0xb4>
    176c:	6c e0       	ldi	r22, 0x0C	; 12
    176e:	70 e0       	ldi	r23, 0x00	; 0
    1770:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <otable+0x18>
    1774:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <otable+0x19>
    1778:	09 95       	icall
    177a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <schedule>
    177e:	ff 91       	pop	r31
    1780:	ef 91       	pop	r30
    1782:	bf 91       	pop	r27
    1784:	af 91       	pop	r26
    1786:	9f 91       	pop	r25
    1788:	8f 91       	pop	r24
    178a:	7f 91       	pop	r23
    178c:	6f 91       	pop	r22
    178e:	5f 91       	pop	r21
    1790:	4f 91       	pop	r20
    1792:	3f 91       	pop	r19
    1794:	2f 91       	pop	r18
    1796:	1f 91       	pop	r17
    1798:	0f 91       	pop	r16
    179a:	0f 90       	pop	r0
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	0f 90       	pop	r0
    17a0:	1f 90       	pop	r1
    17a2:	18 95       	reti

000017a4 <__vector_18>:
    17a4:	1f 92       	push	r1
    17a6:	0f 92       	push	r0
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	0f 92       	push	r0
    17ac:	11 24       	eor	r1, r1
    17ae:	0f 93       	push	r16
    17b0:	1f 93       	push	r17
    17b2:	2f 93       	push	r18
    17b4:	3f 93       	push	r19
    17b6:	4f 93       	push	r20
    17b8:	5f 93       	push	r21
    17ba:	6f 93       	push	r22
    17bc:	7f 93       	push	r23
    17be:	8f 93       	push	r24
    17c0:	9f 93       	push	r25
    17c2:	af 93       	push	r26
    17c4:	bf 93       	push	r27
    17c6:	ef 93       	push	r30
    17c8:	ff 93       	push	r31
    17ca:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <overflows>
    17ce:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <overflows+0x1>
    17d2:	ac 01       	movw	r20, r24
    17d4:	09 2e       	mov	r0, r25
    17d6:	00 0c       	add	r0, r0
    17d8:	66 0b       	sbc	r22, r22
    17da:	77 0b       	sbc	r23, r23
    17dc:	9a 01       	movw	r18, r20
    17de:	11 27       	eor	r17, r17
    17e0:	00 27       	eor	r16, r16
    17e2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17e6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17ea:	60 e0       	ldi	r22, 0x00	; 0
    17ec:	70 e0       	ldi	r23, 0x00	; 0
    17ee:	40 2b       	or	r20, r16
    17f0:	51 2b       	or	r21, r17
    17f2:	62 2b       	or	r22, r18
    17f4:	73 2b       	or	r23, r19
    17f6:	40 93 7a 01 	sts	0x017A, r20	; 0x80017a <timestamp>
    17fa:	50 93 7b 01 	sts	0x017B, r21	; 0x80017b <timestamp+0x1>
    17fe:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <timestamp+0x2>
    1802:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <timestamp+0x3>
    1806:	b0 9b       	sbis	0x16, 0	; 22
    1808:	1a c0       	rjmp	.+52     	; 0x183e <__vector_18+0x9a>
    180a:	01 96       	adiw	r24, 0x01	; 1
    180c:	09 2e       	mov	r0, r25
    180e:	00 0c       	add	r0, r0
    1810:	aa 0b       	sbc	r26, r26
    1812:	bb 0b       	sbc	r27, r27
    1814:	bc 01       	movw	r22, r24
    1816:	55 27       	eor	r21, r21
    1818:	44 27       	eor	r20, r20
    181a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    181e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1822:	a0 e0       	ldi	r26, 0x00	; 0
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	84 2b       	or	r24, r20
    1828:	95 2b       	or	r25, r21
    182a:	a6 2b       	or	r26, r22
    182c:	b7 2b       	or	r27, r23
    182e:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <timestamp>
    1832:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <timestamp+0x1>
    1836:	a0 93 7c 01 	sts	0x017C, r26	; 0x80017c <timestamp+0x2>
    183a:	b0 93 7d 01 	sts	0x017D, r27	; 0x80017d <timestamp+0x3>
    183e:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <mtable+0x1a>
    1842:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <mtable+0x1b>
    1846:	30 97       	sbiw	r30, 0x00	; 0
    1848:	39 f0       	breq	.+14     	; 0x1858 <__vector_18+0xb4>
    184a:	6d e0       	ldi	r22, 0x0D	; 13
    184c:	70 e0       	ldi	r23, 0x00	; 0
    184e:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <otable+0x1a>
    1852:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <otable+0x1b>
    1856:	09 95       	icall
    1858:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <schedule>
    185c:	ff 91       	pop	r31
    185e:	ef 91       	pop	r30
    1860:	bf 91       	pop	r27
    1862:	af 91       	pop	r26
    1864:	9f 91       	pop	r25
    1866:	8f 91       	pop	r24
    1868:	7f 91       	pop	r23
    186a:	6f 91       	pop	r22
    186c:	5f 91       	pop	r21
    186e:	4f 91       	pop	r20
    1870:	3f 91       	pop	r19
    1872:	2f 91       	pop	r18
    1874:	1f 91       	pop	r17
    1876:	0f 91       	pop	r16
    1878:	0f 90       	pop	r0
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	0f 90       	pop	r0
    187e:	1f 90       	pop	r1
    1880:	18 95       	reti

00001882 <__vector_19>:
    1882:	1f 92       	push	r1
    1884:	0f 92       	push	r0
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	0f 92       	push	r0
    188a:	11 24       	eor	r1, r1
    188c:	0f 93       	push	r16
    188e:	1f 93       	push	r17
    1890:	2f 93       	push	r18
    1892:	3f 93       	push	r19
    1894:	4f 93       	push	r20
    1896:	5f 93       	push	r21
    1898:	6f 93       	push	r22
    189a:	7f 93       	push	r23
    189c:	8f 93       	push	r24
    189e:	9f 93       	push	r25
    18a0:	af 93       	push	r26
    18a2:	bf 93       	push	r27
    18a4:	ef 93       	push	r30
    18a6:	ff 93       	push	r31
    18a8:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <overflows>
    18ac:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <overflows+0x1>
    18b0:	ac 01       	movw	r20, r24
    18b2:	09 2e       	mov	r0, r25
    18b4:	00 0c       	add	r0, r0
    18b6:	66 0b       	sbc	r22, r22
    18b8:	77 0b       	sbc	r23, r23
    18ba:	9a 01       	movw	r18, r20
    18bc:	11 27       	eor	r17, r17
    18be:	00 27       	eor	r16, r16
    18c0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18c4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18c8:	60 e0       	ldi	r22, 0x00	; 0
    18ca:	70 e0       	ldi	r23, 0x00	; 0
    18cc:	40 2b       	or	r20, r16
    18ce:	51 2b       	or	r21, r17
    18d0:	62 2b       	or	r22, r18
    18d2:	73 2b       	or	r23, r19
    18d4:	40 93 7a 01 	sts	0x017A, r20	; 0x80017a <timestamp>
    18d8:	50 93 7b 01 	sts	0x017B, r21	; 0x80017b <timestamp+0x1>
    18dc:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <timestamp+0x2>
    18e0:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <timestamp+0x3>
    18e4:	b0 9b       	sbis	0x16, 0	; 22
    18e6:	1a c0       	rjmp	.+52     	; 0x191c <__vector_19+0x9a>
    18e8:	01 96       	adiw	r24, 0x01	; 1
    18ea:	09 2e       	mov	r0, r25
    18ec:	00 0c       	add	r0, r0
    18ee:	aa 0b       	sbc	r26, r26
    18f0:	bb 0b       	sbc	r27, r27
    18f2:	bc 01       	movw	r22, r24
    18f4:	55 27       	eor	r21, r21
    18f6:	44 27       	eor	r20, r20
    18f8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18fc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1900:	a0 e0       	ldi	r26, 0x00	; 0
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	84 2b       	or	r24, r20
    1906:	95 2b       	or	r25, r21
    1908:	a6 2b       	or	r26, r22
    190a:	b7 2b       	or	r27, r23
    190c:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <timestamp>
    1910:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <timestamp+0x1>
    1914:	a0 93 7c 01 	sts	0x017C, r26	; 0x80017c <timestamp+0x2>
    1918:	b0 93 7d 01 	sts	0x017D, r27	; 0x80017d <timestamp+0x3>
    191c:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <mtable+0x1c>
    1920:	f0 91 37 02 	lds	r31, 0x0237	; 0x800237 <mtable+0x1d>
    1924:	30 97       	sbiw	r30, 0x00	; 0
    1926:	39 f0       	breq	.+14     	; 0x1936 <__vector_19+0xb4>
    1928:	6e e0       	ldi	r22, 0x0E	; 14
    192a:	70 e0       	ldi	r23, 0x00	; 0
    192c:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <otable+0x1c>
    1930:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <otable+0x1d>
    1934:	09 95       	icall
    1936:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <schedule>
    193a:	ff 91       	pop	r31
    193c:	ef 91       	pop	r30
    193e:	bf 91       	pop	r27
    1940:	af 91       	pop	r26
    1942:	9f 91       	pop	r25
    1944:	8f 91       	pop	r24
    1946:	7f 91       	pop	r23
    1948:	6f 91       	pop	r22
    194a:	5f 91       	pop	r21
    194c:	4f 91       	pop	r20
    194e:	3f 91       	pop	r19
    1950:	2f 91       	pop	r18
    1952:	1f 91       	pop	r17
    1954:	0f 91       	pop	r16
    1956:	0f 90       	pop	r0
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	0f 90       	pop	r0
    195c:	1f 90       	pop	r1
    195e:	18 95       	reti

00001960 <__vector_20>:
    1960:	1f 92       	push	r1
    1962:	0f 92       	push	r0
    1964:	0f b6       	in	r0, 0x3f	; 63
    1966:	0f 92       	push	r0
    1968:	11 24       	eor	r1, r1
    196a:	0f 93       	push	r16
    196c:	1f 93       	push	r17
    196e:	2f 93       	push	r18
    1970:	3f 93       	push	r19
    1972:	4f 93       	push	r20
    1974:	5f 93       	push	r21
    1976:	6f 93       	push	r22
    1978:	7f 93       	push	r23
    197a:	8f 93       	push	r24
    197c:	9f 93       	push	r25
    197e:	af 93       	push	r26
    1980:	bf 93       	push	r27
    1982:	ef 93       	push	r30
    1984:	ff 93       	push	r31
    1986:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <overflows>
    198a:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <overflows+0x1>
    198e:	ac 01       	movw	r20, r24
    1990:	09 2e       	mov	r0, r25
    1992:	00 0c       	add	r0, r0
    1994:	66 0b       	sbc	r22, r22
    1996:	77 0b       	sbc	r23, r23
    1998:	9a 01       	movw	r18, r20
    199a:	11 27       	eor	r17, r17
    199c:	00 27       	eor	r16, r16
    199e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19a2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19a6:	60 e0       	ldi	r22, 0x00	; 0
    19a8:	70 e0       	ldi	r23, 0x00	; 0
    19aa:	40 2b       	or	r20, r16
    19ac:	51 2b       	or	r21, r17
    19ae:	62 2b       	or	r22, r18
    19b0:	73 2b       	or	r23, r19
    19b2:	40 93 7a 01 	sts	0x017A, r20	; 0x80017a <timestamp>
    19b6:	50 93 7b 01 	sts	0x017B, r21	; 0x80017b <timestamp+0x1>
    19ba:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <timestamp+0x2>
    19be:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <timestamp+0x3>
    19c2:	b0 9b       	sbis	0x16, 0	; 22
    19c4:	1a c0       	rjmp	.+52     	; 0x19fa <__vector_20+0x9a>
    19c6:	01 96       	adiw	r24, 0x01	; 1
    19c8:	09 2e       	mov	r0, r25
    19ca:	00 0c       	add	r0, r0
    19cc:	aa 0b       	sbc	r26, r26
    19ce:	bb 0b       	sbc	r27, r27
    19d0:	bc 01       	movw	r22, r24
    19d2:	55 27       	eor	r21, r21
    19d4:	44 27       	eor	r20, r20
    19d6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19da:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19de:	a0 e0       	ldi	r26, 0x00	; 0
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	84 2b       	or	r24, r20
    19e4:	95 2b       	or	r25, r21
    19e6:	a6 2b       	or	r26, r22
    19e8:	b7 2b       	or	r27, r23
    19ea:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <timestamp>
    19ee:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <timestamp+0x1>
    19f2:	a0 93 7c 01 	sts	0x017C, r26	; 0x80017c <timestamp+0x2>
    19f6:	b0 93 7d 01 	sts	0x017D, r27	; 0x80017d <timestamp+0x3>
    19fa:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <mtable+0x1e>
    19fe:	f0 91 39 02 	lds	r31, 0x0239	; 0x800239 <mtable+0x1f>
    1a02:	30 97       	sbiw	r30, 0x00	; 0
    1a04:	39 f0       	breq	.+14     	; 0x1a14 <__vector_20+0xb4>
    1a06:	6f e0       	ldi	r22, 0x0F	; 15
    1a08:	70 e0       	ldi	r23, 0x00	; 0
    1a0a:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <otable+0x1e>
    1a0e:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <otable+0x1f>
    1a12:	09 95       	icall
    1a14:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <schedule>
    1a18:	ff 91       	pop	r31
    1a1a:	ef 91       	pop	r30
    1a1c:	bf 91       	pop	r27
    1a1e:	af 91       	pop	r26
    1a20:	9f 91       	pop	r25
    1a22:	8f 91       	pop	r24
    1a24:	7f 91       	pop	r23
    1a26:	6f 91       	pop	r22
    1a28:	5f 91       	pop	r21
    1a2a:	4f 91       	pop	r20
    1a2c:	3f 91       	pop	r19
    1a2e:	2f 91       	pop	r18
    1a30:	1f 91       	pop	r17
    1a32:	0f 91       	pop	r16
    1a34:	0f 90       	pop	r0
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	0f 90       	pop	r0
    1a3a:	1f 90       	pop	r1
    1a3c:	18 95       	reti

00001a3e <__vector_21>:
    1a3e:	1f 92       	push	r1
    1a40:	0f 92       	push	r0
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	0f 92       	push	r0
    1a46:	11 24       	eor	r1, r1
    1a48:	0f 93       	push	r16
    1a4a:	1f 93       	push	r17
    1a4c:	2f 93       	push	r18
    1a4e:	3f 93       	push	r19
    1a50:	4f 93       	push	r20
    1a52:	5f 93       	push	r21
    1a54:	6f 93       	push	r22
    1a56:	7f 93       	push	r23
    1a58:	8f 93       	push	r24
    1a5a:	9f 93       	push	r25
    1a5c:	af 93       	push	r26
    1a5e:	bf 93       	push	r27
    1a60:	ef 93       	push	r30
    1a62:	ff 93       	push	r31
    1a64:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <overflows>
    1a68:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <overflows+0x1>
    1a6c:	ac 01       	movw	r20, r24
    1a6e:	09 2e       	mov	r0, r25
    1a70:	00 0c       	add	r0, r0
    1a72:	66 0b       	sbc	r22, r22
    1a74:	77 0b       	sbc	r23, r23
    1a76:	9a 01       	movw	r18, r20
    1a78:	11 27       	eor	r17, r17
    1a7a:	00 27       	eor	r16, r16
    1a7c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a80:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a84:	60 e0       	ldi	r22, 0x00	; 0
    1a86:	70 e0       	ldi	r23, 0x00	; 0
    1a88:	40 2b       	or	r20, r16
    1a8a:	51 2b       	or	r21, r17
    1a8c:	62 2b       	or	r22, r18
    1a8e:	73 2b       	or	r23, r19
    1a90:	40 93 7a 01 	sts	0x017A, r20	; 0x80017a <timestamp>
    1a94:	50 93 7b 01 	sts	0x017B, r21	; 0x80017b <timestamp+0x1>
    1a98:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <timestamp+0x2>
    1a9c:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <timestamp+0x3>
    1aa0:	b0 9b       	sbis	0x16, 0	; 22
    1aa2:	1a c0       	rjmp	.+52     	; 0x1ad8 <__vector_21+0x9a>
    1aa4:	01 96       	adiw	r24, 0x01	; 1
    1aa6:	09 2e       	mov	r0, r25
    1aa8:	00 0c       	add	r0, r0
    1aaa:	aa 0b       	sbc	r26, r26
    1aac:	bb 0b       	sbc	r27, r27
    1aae:	bc 01       	movw	r22, r24
    1ab0:	55 27       	eor	r21, r21
    1ab2:	44 27       	eor	r20, r20
    1ab4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ab8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1abc:	a0 e0       	ldi	r26, 0x00	; 0
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	84 2b       	or	r24, r20
    1ac2:	95 2b       	or	r25, r21
    1ac4:	a6 2b       	or	r26, r22
    1ac6:	b7 2b       	or	r27, r23
    1ac8:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <timestamp>
    1acc:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <timestamp+0x1>
    1ad0:	a0 93 7c 01 	sts	0x017C, r26	; 0x80017c <timestamp+0x2>
    1ad4:	b0 93 7d 01 	sts	0x017D, r27	; 0x80017d <timestamp+0x3>
    1ad8:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <mtable+0x20>
    1adc:	f0 91 3b 02 	lds	r31, 0x023B	; 0x80023b <mtable+0x21>
    1ae0:	30 97       	sbiw	r30, 0x00	; 0
    1ae2:	39 f0       	breq	.+14     	; 0x1af2 <__vector_21+0xb4>
    1ae4:	60 e1       	ldi	r22, 0x10	; 16
    1ae6:	70 e0       	ldi	r23, 0x00	; 0
    1ae8:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <otable+0x20>
    1aec:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <otable+0x21>
    1af0:	09 95       	icall
    1af2:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <schedule>
    1af6:	ff 91       	pop	r31
    1af8:	ef 91       	pop	r30
    1afa:	bf 91       	pop	r27
    1afc:	af 91       	pop	r26
    1afe:	9f 91       	pop	r25
    1b00:	8f 91       	pop	r24
    1b02:	7f 91       	pop	r23
    1b04:	6f 91       	pop	r22
    1b06:	5f 91       	pop	r21
    1b08:	4f 91       	pop	r20
    1b0a:	3f 91       	pop	r19
    1b0c:	2f 91       	pop	r18
    1b0e:	1f 91       	pop	r17
    1b10:	0f 91       	pop	r16
    1b12:	0f 90       	pop	r0
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	0f 90       	pop	r0
    1b18:	1f 90       	pop	r1
    1b1a:	18 95       	reti

00001b1c <__vector_22>:
    1b1c:	1f 92       	push	r1
    1b1e:	0f 92       	push	r0
    1b20:	0f b6       	in	r0, 0x3f	; 63
    1b22:	0f 92       	push	r0
    1b24:	11 24       	eor	r1, r1
    1b26:	0f 93       	push	r16
    1b28:	1f 93       	push	r17
    1b2a:	2f 93       	push	r18
    1b2c:	3f 93       	push	r19
    1b2e:	4f 93       	push	r20
    1b30:	5f 93       	push	r21
    1b32:	6f 93       	push	r22
    1b34:	7f 93       	push	r23
    1b36:	8f 93       	push	r24
    1b38:	9f 93       	push	r25
    1b3a:	af 93       	push	r26
    1b3c:	bf 93       	push	r27
    1b3e:	ef 93       	push	r30
    1b40:	ff 93       	push	r31
    1b42:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <overflows>
    1b46:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <overflows+0x1>
    1b4a:	ac 01       	movw	r20, r24
    1b4c:	09 2e       	mov	r0, r25
    1b4e:	00 0c       	add	r0, r0
    1b50:	66 0b       	sbc	r22, r22
    1b52:	77 0b       	sbc	r23, r23
    1b54:	9a 01       	movw	r18, r20
    1b56:	11 27       	eor	r17, r17
    1b58:	00 27       	eor	r16, r16
    1b5a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b5e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b62:	60 e0       	ldi	r22, 0x00	; 0
    1b64:	70 e0       	ldi	r23, 0x00	; 0
    1b66:	40 2b       	or	r20, r16
    1b68:	51 2b       	or	r21, r17
    1b6a:	62 2b       	or	r22, r18
    1b6c:	73 2b       	or	r23, r19
    1b6e:	40 93 7a 01 	sts	0x017A, r20	; 0x80017a <timestamp>
    1b72:	50 93 7b 01 	sts	0x017B, r21	; 0x80017b <timestamp+0x1>
    1b76:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <timestamp+0x2>
    1b7a:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <timestamp+0x3>
    1b7e:	b0 9b       	sbis	0x16, 0	; 22
    1b80:	1a c0       	rjmp	.+52     	; 0x1bb6 <__vector_22+0x9a>
    1b82:	01 96       	adiw	r24, 0x01	; 1
    1b84:	09 2e       	mov	r0, r25
    1b86:	00 0c       	add	r0, r0
    1b88:	aa 0b       	sbc	r26, r26
    1b8a:	bb 0b       	sbc	r27, r27
    1b8c:	bc 01       	movw	r22, r24
    1b8e:	55 27       	eor	r21, r21
    1b90:	44 27       	eor	r20, r20
    1b92:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b96:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b9a:	a0 e0       	ldi	r26, 0x00	; 0
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	84 2b       	or	r24, r20
    1ba0:	95 2b       	or	r25, r21
    1ba2:	a6 2b       	or	r26, r22
    1ba4:	b7 2b       	or	r27, r23
    1ba6:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <timestamp>
    1baa:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <timestamp+0x1>
    1bae:	a0 93 7c 01 	sts	0x017C, r26	; 0x80017c <timestamp+0x2>
    1bb2:	b0 93 7d 01 	sts	0x017D, r27	; 0x80017d <timestamp+0x3>
    1bb6:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <mtable+0x22>
    1bba:	f0 91 3d 02 	lds	r31, 0x023D	; 0x80023d <mtable+0x23>
    1bbe:	30 97       	sbiw	r30, 0x00	; 0
    1bc0:	39 f0       	breq	.+14     	; 0x1bd0 <__vector_22+0xb4>
    1bc2:	61 e1       	ldi	r22, 0x11	; 17
    1bc4:	70 e0       	ldi	r23, 0x00	; 0
    1bc6:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <otable+0x22>
    1bca:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <otable+0x23>
    1bce:	09 95       	icall
    1bd0:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <schedule>
    1bd4:	ff 91       	pop	r31
    1bd6:	ef 91       	pop	r30
    1bd8:	bf 91       	pop	r27
    1bda:	af 91       	pop	r26
    1bdc:	9f 91       	pop	r25
    1bde:	8f 91       	pop	r24
    1be0:	7f 91       	pop	r23
    1be2:	6f 91       	pop	r22
    1be4:	5f 91       	pop	r21
    1be6:	4f 91       	pop	r20
    1be8:	3f 91       	pop	r19
    1bea:	2f 91       	pop	r18
    1bec:	1f 91       	pop	r17
    1bee:	0f 91       	pop	r16
    1bf0:	0f 90       	pop	r0
    1bf2:	0f be       	out	0x3f, r0	; 63
    1bf4:	0f 90       	pop	r0
    1bf6:	1f 90       	pop	r1
    1bf8:	18 95       	reti

00001bfa <idle>:
    1bfa:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <schedule>
    1bfe:	78 94       	sei
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	83 bf       	out	0x33, r24	; 51
    1c04:	88 95       	sleep
    1c06:	fc cf       	rjmp	.-8      	; 0x1c00 <idle+0x6>

00001c08 <__vector_9>:
    1c08:	1f 92       	push	r1
    1c0a:	0f 92       	push	r0
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	0f 92       	push	r0
    1c10:	11 24       	eor	r1, r1
    1c12:	2f 93       	push	r18
    1c14:	3f 93       	push	r19
    1c16:	4f 93       	push	r20
    1c18:	5f 93       	push	r21
    1c1a:	6f 93       	push	r22
    1c1c:	7f 93       	push	r23
    1c1e:	8f 93       	push	r24
    1c20:	9f 93       	push	r25
    1c22:	ef 93       	push	r30
    1c24:	ff 93       	push	r31
    1c26:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <overflows>
    1c2a:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <overflows+0x1>
    1c2e:	01 96       	adiw	r24, 0x01	; 1
    1c30:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <overflows+0x1>
    1c34:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <overflows>
    1c38:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <timerQ>
    1c3c:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <timerQ+0x1>
    1c40:	30 97       	sbiw	r30, 0x00	; 0
    1c42:	01 f1       	breq	.+64     	; 0x1c84 <__vector_9+0x7c>
    1c44:	42 81       	ldd	r20, Z+2	; 0x02
    1c46:	53 81       	ldd	r21, Z+3	; 0x03
    1c48:	64 81       	ldd	r22, Z+4	; 0x04
    1c4a:	75 81       	ldd	r23, Z+5	; 0x05
    1c4c:	86 17       	cp	r24, r22
    1c4e:	97 07       	cpc	r25, r23
    1c50:	c9 f4       	brne	.+50     	; 0x1c84 <__vector_9+0x7c>
    1c52:	ca 01       	movw	r24, r20
    1c54:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c58:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c5c:	42 1b       	sub	r20, r18
    1c5e:	53 0b       	sbc	r21, r19
    1c60:	41 30       	cpi	r20, 0x01	; 1
    1c62:	51 05       	cpc	r21, r1
    1c64:	29 f4       	brne	.+10     	; 0x1c70 <__vector_9+0x68>
    1c66:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c6a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c6e:	01 96       	adiw	r24, 0x01	; 1
    1c70:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1c74:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1c78:	ef e6       	ldi	r30, 0x6F	; 111
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	82 60       	ori	r24, 0x02	; 2
    1c80:	80 83       	st	Z, r24
    1c82:	05 c0       	rjmp	.+10     	; 0x1c8e <__vector_9+0x86>
    1c84:	ef e6       	ldi	r30, 0x6F	; 111
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	8d 7f       	andi	r24, 0xFD	; 253
    1c8c:	80 83       	st	Z, r24
    1c8e:	ff 91       	pop	r31
    1c90:	ef 91       	pop	r30
    1c92:	9f 91       	pop	r25
    1c94:	8f 91       	pop	r24
    1c96:	7f 91       	pop	r23
    1c98:	6f 91       	pop	r22
    1c9a:	5f 91       	pop	r21
    1c9c:	4f 91       	pop	r20
    1c9e:	3f 91       	pop	r19
    1ca0:	2f 91       	pop	r18
    1ca2:	0f 90       	pop	r0
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	0f 90       	pop	r0
    1ca8:	1f 90       	pop	r1
    1caa:	18 95       	reti

00001cac <__vector_7>:
    1cac:	1f 92       	push	r1
    1cae:	0f 92       	push	r0
    1cb0:	0f b6       	in	r0, 0x3f	; 63
    1cb2:	0f 92       	push	r0
    1cb4:	11 24       	eor	r1, r1
    1cb6:	cf 92       	push	r12
    1cb8:	df 92       	push	r13
    1cba:	ef 92       	push	r14
    1cbc:	ff 92       	push	r15
    1cbe:	2f 93       	push	r18
    1cc0:	3f 93       	push	r19
    1cc2:	4f 93       	push	r20
    1cc4:	5f 93       	push	r21
    1cc6:	6f 93       	push	r22
    1cc8:	7f 93       	push	r23
    1cca:	8f 93       	push	r24
    1ccc:	9f 93       	push	r25
    1cce:	af 93       	push	r26
    1cd0:	bf 93       	push	r27
    1cd2:	ef 93       	push	r30
    1cd4:	ff 93       	push	r31
    1cd6:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <overflows>
    1cda:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <overflows+0x1>
    1cde:	6c 01       	movw	r12, r24
    1ce0:	09 2e       	mov	r0, r25
    1ce2:	00 0c       	add	r0, r0
    1ce4:	ee 08       	sbc	r14, r14
    1ce6:	ff 08       	sbc	r15, r15
    1ce8:	76 01       	movw	r14, r12
    1cea:	dd 24       	eor	r13, r13
    1cec:	cc 24       	eor	r12, r12
    1cee:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1cf2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1cf6:	60 e0       	ldi	r22, 0x00	; 0
    1cf8:	70 e0       	ldi	r23, 0x00	; 0
    1cfa:	c4 2a       	or	r12, r20
    1cfc:	d5 2a       	or	r13, r21
    1cfe:	e6 2a       	or	r14, r22
    1d00:	f7 2a       	or	r15, r23
    1d02:	b0 9b       	sbis	0x16, 0	; 22
    1d04:	1e c0       	rjmp	.+60     	; 0x1d42 <__vector_7+0x96>
    1d06:	6c 01       	movw	r12, r24
    1d08:	2f ef       	ldi	r18, 0xFF	; 255
    1d0a:	c2 1a       	sub	r12, r18
    1d0c:	d2 0a       	sbc	r13, r18
    1d0e:	0d 2c       	mov	r0, r13
    1d10:	00 0c       	add	r0, r0
    1d12:	ee 08       	sbc	r14, r14
    1d14:	ff 08       	sbc	r15, r15
    1d16:	d6 01       	movw	r26, r12
    1d18:	99 27       	eor	r25, r25
    1d1a:	88 27       	eor	r24, r24
    1d1c:	c0 90 84 00 	lds	r12, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d20:	d0 90 85 00 	lds	r13, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d24:	e1 2c       	mov	r14, r1
    1d26:	f1 2c       	mov	r15, r1
    1d28:	c8 2a       	or	r12, r24
    1d2a:	d9 2a       	or	r13, r25
    1d2c:	ea 2a       	or	r14, r26
    1d2e:	fb 2a       	or	r15, r27
    1d30:	08 c0       	rjmp	.+16     	; 0x1d42 <__vector_7+0x96>
    1d32:	8e e7       	ldi	r24, 0x7E	; 126
    1d34:	91 e0       	ldi	r25, 0x01	; 1
    1d36:	0e 94 c6 05 	call	0xb8c	; 0xb8c <dequeue>
    1d3a:	60 e8       	ldi	r22, 0x80	; 128
    1d3c:	71 e0       	ldi	r23, 0x01	; 1
    1d3e:	0e 94 64 05 	call	0xac8	; 0xac8 <enqueueByDeadline>
    1d42:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <timerQ>
    1d46:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <timerQ+0x1>
    1d4a:	30 97       	sbiw	r30, 0x00	; 0
    1d4c:	69 f0       	breq	.+26     	; 0x1d68 <__vector_7+0xbc>
    1d4e:	82 81       	ldd	r24, Z+2	; 0x02
    1d50:	93 81       	ldd	r25, Z+3	; 0x03
    1d52:	a4 81       	ldd	r26, Z+4	; 0x04
    1d54:	b5 81       	ldd	r27, Z+5	; 0x05
    1d56:	8c 19       	sub	r24, r12
    1d58:	9d 09       	sbc	r25, r13
    1d5a:	ae 09       	sbc	r26, r14
    1d5c:	bf 09       	sbc	r27, r15
    1d5e:	18 16       	cp	r1, r24
    1d60:	19 06       	cpc	r1, r25
    1d62:	1a 06       	cpc	r1, r26
    1d64:	1b 06       	cpc	r1, r27
    1d66:	2c f7       	brge	.-54     	; 0x1d32 <__vector_7+0x86>
    1d68:	30 97       	sbiw	r30, 0x00	; 0
    1d6a:	21 f1       	breq	.+72     	; 0x1db4 <__vector_7+0x108>
    1d6c:	82 81       	ldd	r24, Z+2	; 0x02
    1d6e:	93 81       	ldd	r25, Z+3	; 0x03
    1d70:	a4 81       	ldd	r26, Z+4	; 0x04
    1d72:	b5 81       	ldd	r27, Z+5	; 0x05
    1d74:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <overflows>
    1d78:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <overflows+0x1>
    1d7c:	2a 17       	cp	r18, r26
    1d7e:	3b 07       	cpc	r19, r27
    1d80:	c9 f4       	brne	.+50     	; 0x1db4 <__vector_7+0x108>
    1d82:	9c 01       	movw	r18, r24
    1d84:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d88:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d8c:	84 1b       	sub	r24, r20
    1d8e:	95 0b       	sbc	r25, r21
    1d90:	01 97       	sbiw	r24, 0x01	; 1
    1d92:	31 f4       	brne	.+12     	; 0x1da0 <__vector_7+0xf4>
    1d94:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d98:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d9c:	2f 5f       	subi	r18, 0xFF	; 255
    1d9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1da0:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1da4:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1da8:	ef e6       	ldi	r30, 0x6F	; 111
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	82 60       	ori	r24, 0x02	; 2
    1db0:	80 83       	st	Z, r24
    1db2:	05 c0       	rjmp	.+10     	; 0x1dbe <__vector_7+0x112>
    1db4:	ef e6       	ldi	r30, 0x6F	; 111
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	8d 7f       	andi	r24, 0xFD	; 253
    1dbc:	80 83       	st	Z, r24
    1dbe:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <schedule>
    1dc2:	ff 91       	pop	r31
    1dc4:	ef 91       	pop	r30
    1dc6:	bf 91       	pop	r27
    1dc8:	af 91       	pop	r26
    1dca:	9f 91       	pop	r25
    1dcc:	8f 91       	pop	r24
    1dce:	7f 91       	pop	r23
    1dd0:	6f 91       	pop	r22
    1dd2:	5f 91       	pop	r21
    1dd4:	4f 91       	pop	r20
    1dd6:	3f 91       	pop	r19
    1dd8:	2f 91       	pop	r18
    1dda:	ff 90       	pop	r15
    1ddc:	ef 90       	pop	r14
    1dde:	df 90       	pop	r13
    1de0:	cf 90       	pop	r12
    1de2:	0f 90       	pop	r0
    1de4:	0f be       	out	0x3f, r0	; 63
    1de6:	0f 90       	pop	r0
    1de8:	1f 90       	pop	r1
    1dea:	18 95       	reti

00001dec <async>:
    1dec:	3f 92       	push	r3
    1dee:	4f 92       	push	r4
    1df0:	5f 92       	push	r5
    1df2:	6f 92       	push	r6
    1df4:	7f 92       	push	r7
    1df6:	8f 92       	push	r8
    1df8:	9f 92       	push	r9
    1dfa:	af 92       	push	r10
    1dfc:	bf 92       	push	r11
    1dfe:	cf 92       	push	r12
    1e00:	df 92       	push	r13
    1e02:	ef 92       	push	r14
    1e04:	ff 92       	push	r15
    1e06:	0f 93       	push	r16
    1e08:	1f 93       	push	r17
    1e0a:	cf 93       	push	r28
    1e0c:	df 93       	push	r29
    1e0e:	2b 01       	movw	r4, r22
    1e10:	3c 01       	movw	r6, r24
    1e12:	49 01       	movw	r8, r18
    1e14:	5a 01       	movw	r10, r20
    1e16:	8f b7       	in	r24, 0x3f	; 63
    1e18:	80 78       	andi	r24, 0x80	; 128
    1e1a:	38 2e       	mov	r3, r24
    1e1c:	f8 94       	cli
    1e1e:	8d e3       	ldi	r24, 0x3D	; 61
    1e20:	91 e0       	ldi	r25, 0x01	; 1
    1e22:	0e 94 c6 05 	call	0xb8c	; 0xb8c <dequeue>
    1e26:	ec 01       	movw	r28, r24
    1e28:	1b 87       	std	Y+11, r17	; 0x0b
    1e2a:	0a 87       	std	Y+10, r16	; 0x0a
    1e2c:	fd 86       	std	Y+13, r15	; 0x0d
    1e2e:	ec 86       	std	Y+12, r14	; 0x0c
    1e30:	df 86       	std	Y+15, r13	; 0x0f
    1e32:	ce 86       	std	Y+14, r12	; 0x0e
    1e34:	33 20       	and	r3, r3
    1e36:	61 f0       	breq	.+24     	; 0x1e50 <async+0x64>
    1e38:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <current>
    1e3c:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <current+0x1>
    1e40:	02 80       	ldd	r0, Z+2	; 0x02
    1e42:	f3 81       	ldd	r31, Z+3	; 0x03
    1e44:	e0 2d       	mov	r30, r0
    1e46:	82 81       	ldd	r24, Z+2	; 0x02
    1e48:	93 81       	ldd	r25, Z+3	; 0x03
    1e4a:	a4 81       	ldd	r26, Z+4	; 0x04
    1e4c:	b5 81       	ldd	r27, Z+5	; 0x05
    1e4e:	08 c0       	rjmp	.+16     	; 0x1e60 <async+0x74>
    1e50:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <timestamp>
    1e54:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <timestamp+0x1>
    1e58:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <timestamp+0x2>
    1e5c:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <timestamp+0x3>
    1e60:	48 0e       	add	r4, r24
    1e62:	59 1e       	adc	r5, r25
    1e64:	6a 1e       	adc	r6, r26
    1e66:	7b 1e       	adc	r7, r27
    1e68:	4a 82       	std	Y+2, r4	; 0x02
    1e6a:	5b 82       	std	Y+3, r5	; 0x03
    1e6c:	6c 82       	std	Y+4, r6	; 0x04
    1e6e:	7d 82       	std	Y+5, r7	; 0x05
    1e70:	18 14       	cp	r1, r8
    1e72:	19 04       	cpc	r1, r9
    1e74:	1a 04       	cpc	r1, r10
    1e76:	1b 04       	cpc	r1, r11
    1e78:	44 f0       	brlt	.+16     	; 0x1e8a <async+0x9e>
    1e7a:	0f 2e       	mov	r0, r31
    1e7c:	88 24       	eor	r8, r8
    1e7e:	8a 94       	dec	r8
    1e80:	98 2c       	mov	r9, r8
    1e82:	a8 2c       	mov	r10, r8
    1e84:	ff e7       	ldi	r31, 0x7F	; 127
    1e86:	bf 2e       	mov	r11, r31
    1e88:	f0 2d       	mov	r31, r0
    1e8a:	84 0c       	add	r8, r4
    1e8c:	95 1c       	adc	r9, r5
    1e8e:	a6 1c       	adc	r10, r6
    1e90:	b7 1c       	adc	r11, r7
    1e92:	8e 82       	std	Y+6, r8	; 0x06
    1e94:	9f 82       	std	Y+7, r9	; 0x07
    1e96:	a8 86       	std	Y+8, r10	; 0x08
    1e98:	b9 86       	std	Y+9, r11	; 0x09
    1e9a:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <overflows>
    1e9e:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <overflows+0x1>
    1ea2:	c9 01       	movw	r24, r18
    1ea4:	03 2e       	mov	r0, r19
    1ea6:	00 0c       	add	r0, r0
    1ea8:	aa 0b       	sbc	r26, r26
    1eaa:	bb 0b       	sbc	r27, r27
    1eac:	dc 01       	movw	r26, r24
    1eae:	99 27       	eor	r25, r25
    1eb0:	88 27       	eor	r24, r24
    1eb2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1eb6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1eba:	60 e0       	ldi	r22, 0x00	; 0
    1ebc:	70 e0       	ldi	r23, 0x00	; 0
    1ebe:	84 2b       	or	r24, r20
    1ec0:	95 2b       	or	r25, r21
    1ec2:	a6 2b       	or	r26, r22
    1ec4:	b7 2b       	or	r27, r23
    1ec6:	b0 9b       	sbis	0x16, 0	; 22
    1ec8:	13 c0       	rjmp	.+38     	; 0x1ef0 <async+0x104>
    1eca:	c9 01       	movw	r24, r18
    1ecc:	01 96       	adiw	r24, 0x01	; 1
    1ece:	09 2e       	mov	r0, r25
    1ed0:	00 0c       	add	r0, r0
    1ed2:	aa 0b       	sbc	r26, r26
    1ed4:	bb 0b       	sbc	r27, r27
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	99 27       	eor	r25, r25
    1eda:	88 27       	eor	r24, r24
    1edc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ee0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ee4:	60 e0       	ldi	r22, 0x00	; 0
    1ee6:	70 e0       	ldi	r23, 0x00	; 0
    1ee8:	84 2b       	or	r24, r20
    1eea:	95 2b       	or	r25, r21
    1eec:	a6 2b       	or	r26, r22
    1eee:	b7 2b       	or	r27, r23
    1ef0:	48 1a       	sub	r4, r24
    1ef2:	59 0a       	sbc	r5, r25
    1ef4:	6a 0a       	sbc	r6, r26
    1ef6:	7b 0a       	sbc	r7, r27
    1ef8:	14 14       	cp	r1, r4
    1efa:	15 04       	cpc	r1, r5
    1efc:	16 04       	cpc	r1, r6
    1efe:	17 04       	cpc	r1, r7
    1f00:	ac f5       	brge	.+106    	; 0x1f6c <async+0x180>
    1f02:	6e e7       	ldi	r22, 0x7E	; 126
    1f04:	71 e0       	ldi	r23, 0x01	; 1
    1f06:	ce 01       	movw	r24, r28
    1f08:	0e 94 95 05 	call	0xb2a	; 0xb2a <enqueueByBaseline>
    1f0c:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <timerQ>
    1f10:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <timerQ+0x1>
    1f14:	30 97       	sbiw	r30, 0x00	; 0
    1f16:	21 f1       	breq	.+72     	; 0x1f60 <async+0x174>
    1f18:	82 81       	ldd	r24, Z+2	; 0x02
    1f1a:	93 81       	ldd	r25, Z+3	; 0x03
    1f1c:	a4 81       	ldd	r26, Z+4	; 0x04
    1f1e:	b5 81       	ldd	r27, Z+5	; 0x05
    1f20:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <overflows>
    1f24:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <overflows+0x1>
    1f28:	2a 17       	cp	r18, r26
    1f2a:	3b 07       	cpc	r19, r27
    1f2c:	c9 f4       	brne	.+50     	; 0x1f60 <async+0x174>
    1f2e:	9c 01       	movw	r18, r24
    1f30:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1f34:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1f38:	84 1b       	sub	r24, r20
    1f3a:	95 0b       	sbc	r25, r21
    1f3c:	01 97       	sbiw	r24, 0x01	; 1
    1f3e:	31 f4       	brne	.+12     	; 0x1f4c <async+0x160>
    1f40:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1f44:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1f48:	2f 5f       	subi	r18, 0xFF	; 255
    1f4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f4c:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1f50:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1f54:	ef e6       	ldi	r30, 0x6F	; 111
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	82 60       	ori	r24, 0x02	; 2
    1f5c:	80 83       	st	Z, r24
    1f5e:	39 c0       	rjmp	.+114    	; 0x1fd2 <async+0x1e6>
    1f60:	ef e6       	ldi	r30, 0x6F	; 111
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	8d 7f       	andi	r24, 0xFD	; 253
    1f68:	80 83       	st	Z, r24
    1f6a:	33 c0       	rjmp	.+102    	; 0x1fd2 <async+0x1e6>
    1f6c:	60 e8       	ldi	r22, 0x80	; 128
    1f6e:	71 e0       	ldi	r23, 0x01	; 1
    1f70:	ce 01       	movw	r24, r28
    1f72:	0e 94 64 05 	call	0xac8	; 0xac8 <enqueueByDeadline>
    1f76:	33 20       	and	r3, r3
    1f78:	61 f1       	breq	.+88     	; 0x1fd2 <async+0x1e6>
    1f7a:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <threadPool>
    1f7e:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <threadPool+0x1>
    1f82:	89 2b       	or	r24, r25
    1f84:	31 f1       	breq	.+76     	; 0x1fd2 <async+0x1e6>
    1f86:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <msgQ>
    1f8a:	f0 91 81 01 	lds	r31, 0x0181	; 0x800181 <msgQ+0x1>
    1f8e:	86 81       	ldd	r24, Z+6	; 0x06
    1f90:	97 81       	ldd	r25, Z+7	; 0x07
    1f92:	a0 85       	ldd	r26, Z+8	; 0x08
    1f94:	b1 85       	ldd	r27, Z+9	; 0x09
    1f96:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <activeStack>
    1f9a:	f0 91 3a 01 	lds	r31, 0x013A	; 0x80013a <activeStack+0x1>
    1f9e:	02 80       	ldd	r0, Z+2	; 0x02
    1fa0:	f3 81       	ldd	r31, Z+3	; 0x03
    1fa2:	e0 2d       	mov	r30, r0
    1fa4:	46 81       	ldd	r20, Z+6	; 0x06
    1fa6:	57 81       	ldd	r21, Z+7	; 0x07
    1fa8:	60 85       	ldd	r22, Z+8	; 0x08
    1faa:	71 85       	ldd	r23, Z+9	; 0x09
    1fac:	84 1b       	sub	r24, r20
    1fae:	95 0b       	sbc	r25, r21
    1fb0:	a6 0b       	sbc	r26, r22
    1fb2:	b7 0b       	sbc	r27, r23
    1fb4:	72 f4       	brpl	.+28     	; 0x1fd2 <async+0x1e6>
    1fb6:	8b e3       	ldi	r24, 0x3B	; 59
    1fb8:	91 e0       	ldi	r25, 0x01	; 1
    1fba:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <pop>
    1fbe:	69 e3       	ldi	r22, 0x39	; 57
    1fc0:	71 e0       	ldi	r23, 0x01	; 1
    1fc2:	0e 94 e7 05 	call	0xbce	; 0xbce <push>
    1fc6:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <activeStack>
    1fca:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <activeStack+0x1>
    1fce:	0e 94 44 05 	call	0xa88	; 0xa88 <dispatch>
    1fd2:	33 20       	and	r3, r3
    1fd4:	09 f0       	breq	.+2      	; 0x1fd8 <async+0x1ec>
    1fd6:	78 94       	sei
    1fd8:	ce 01       	movw	r24, r28
    1fda:	df 91       	pop	r29
    1fdc:	cf 91       	pop	r28
    1fde:	1f 91       	pop	r17
    1fe0:	0f 91       	pop	r16
    1fe2:	ff 90       	pop	r15
    1fe4:	ef 90       	pop	r14
    1fe6:	df 90       	pop	r13
    1fe8:	cf 90       	pop	r12
    1fea:	bf 90       	pop	r11
    1fec:	af 90       	pop	r10
    1fee:	9f 90       	pop	r9
    1ff0:	8f 90       	pop	r8
    1ff2:	7f 90       	pop	r7
    1ff4:	6f 90       	pop	r6
    1ff6:	5f 90       	pop	r5
    1ff8:	4f 90       	pop	r4
    1ffa:	3f 90       	pop	r3
    1ffc:	08 95       	ret

00001ffe <sync>:
    1ffe:	cf 92       	push	r12
    2000:	df 92       	push	r13
    2002:	ef 92       	push	r14
    2004:	ff 92       	push	r15
    2006:	0f 93       	push	r16
    2008:	1f 93       	push	r17
    200a:	cf 93       	push	r28
    200c:	df 93       	push	r29
    200e:	ec 01       	movw	r28, r24
    2010:	7b 01       	movw	r14, r22
    2012:	6a 01       	movw	r12, r20
    2014:	1f b7       	in	r17, 0x3f	; 63
    2016:	10 78       	andi	r17, 0x80	; 128
    2018:	f8 94       	cli
    201a:	a8 81       	ld	r26, Y
    201c:	b9 81       	ldd	r27, Y+1	; 0x01
    201e:	10 97       	sbiw	r26, 0x00	; 0
    2020:	19 f4       	brne	.+6      	; 0x2028 <sync+0x2a>
    2022:	35 c0       	rjmp	.+106    	; 0x208e <sync+0x90>
    2024:	a0 81       	ld	r26, Z
    2026:	b1 81       	ldd	r27, Z+1	; 0x01
    2028:	14 96       	adiw	r26, 0x04	; 4
    202a:	ed 91       	ld	r30, X+
    202c:	fc 91       	ld	r31, X
    202e:	15 97       	sbiw	r26, 0x05	; 5
    2030:	30 97       	sbiw	r30, 0x00	; 0
    2032:	c1 f7       	brne	.-16     	; 0x2024 <sync+0x26>
    2034:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <current>
    2038:	30 91 38 01 	lds	r19, 0x0138	; 0x800138 <current+0x1>
    203c:	a2 17       	cp	r26, r18
    203e:	b3 07       	cpc	r27, r19
    2040:	11 f0       	breq	.+4      	; 0x2046 <sync+0x48>
    2042:	11 11       	cpse	r17, r1
    2044:	07 c0       	rjmp	.+14     	; 0x2054 <sync+0x56>
    2046:	11 23       	and	r17, r17
    2048:	09 f4       	brne	.+2      	; 0x204c <sync+0x4e>
    204a:	4a c0       	rjmp	.+148    	; 0x20e0 <sync+0xe2>
    204c:	78 94       	sei
    204e:	8f ef       	ldi	r24, 0xFF	; 255
    2050:	9f ef       	ldi	r25, 0xFF	; 255
    2052:	4e c0       	rjmp	.+156    	; 0x20f0 <sync+0xf2>
    2054:	8a 81       	ldd	r24, Y+2	; 0x02
    2056:	9b 81       	ldd	r25, Y+3	; 0x03
    2058:	00 97       	sbiw	r24, 0x00	; 0
    205a:	19 f0       	breq	.+6      	; 0x2062 <sync+0x64>
    205c:	fc 01       	movw	r30, r24
    205e:	15 82       	std	Z+5, r1	; 0x05
    2060:	14 82       	std	Z+4, r1	; 0x04
    2062:	3b 83       	std	Y+3, r19	; 0x03
    2064:	2a 83       	std	Y+2, r18	; 0x02
    2066:	f9 01       	movw	r30, r18
    2068:	d5 83       	std	Z+5, r29	; 0x05
    206a:	c4 83       	std	Z+4, r28	; 0x04
    206c:	cd 01       	movw	r24, r26
    206e:	0e 94 44 05 	call	0xa88	; 0xa88 <dispatch>
    2072:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <current>
    2076:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <current+0x1>
    207a:	82 81       	ldd	r24, Z+2	; 0x02
    207c:	93 81       	ldd	r25, Z+3	; 0x03
    207e:	89 2b       	or	r24, r25
    2080:	31 f4       	brne	.+12     	; 0x208e <sync+0x90>
    2082:	11 23       	and	r17, r17
    2084:	81 f1       	breq	.+96     	; 0x20e6 <sync+0xe8>
    2086:	78 94       	sei
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	31 c0       	rjmp	.+98     	; 0x20f0 <sync+0xf2>
    208e:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <current>
    2092:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <current+0x1>
    2096:	99 83       	std	Y+1, r25	; 0x01
    2098:	88 83       	st	Y, r24
    209a:	11 23       	and	r17, r17
    209c:	29 f0       	breq	.+10     	; 0x20a8 <sync+0xaa>
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	9b 81       	ldd	r25, Y+3	; 0x03
    20a2:	01 97       	sbiw	r24, 0x01	; 1
    20a4:	09 f0       	breq	.+2      	; 0x20a8 <sync+0xaa>
    20a6:	78 94       	sei
    20a8:	b6 01       	movw	r22, r12
    20aa:	ce 01       	movw	r24, r28
    20ac:	f7 01       	movw	r30, r14
    20ae:	09 95       	icall
    20b0:	f8 2e       	mov	r15, r24
    20b2:	09 2f       	mov	r16, r25
    20b4:	8f b7       	in	r24, 0x3f	; 63
    20b6:	f8 94       	cli
    20b8:	19 82       	std	Y+1, r1	; 0x01
    20ba:	18 82       	st	Y, r1
    20bc:	8a 81       	ldd	r24, Y+2	; 0x02
    20be:	9b 81       	ldd	r25, Y+3	; 0x03
    20c0:	82 30       	cpi	r24, 0x02	; 2
    20c2:	91 05       	cpc	r25, r1
    20c4:	38 f0       	brcs	.+14     	; 0x20d4 <sync+0xd6>
    20c6:	1b 82       	std	Y+3, r1	; 0x03
    20c8:	1a 82       	std	Y+2, r1	; 0x02
    20ca:	fc 01       	movw	r30, r24
    20cc:	15 82       	std	Z+5, r1	; 0x05
    20ce:	14 82       	std	Z+4, r1	; 0x04
    20d0:	0e 94 44 05 	call	0xa88	; 0xa88 <dispatch>
    20d4:	11 23       	and	r17, r17
    20d6:	51 f0       	breq	.+20     	; 0x20ec <sync+0xee>
    20d8:	78 94       	sei
    20da:	8f 2d       	mov	r24, r15
    20dc:	90 2f       	mov	r25, r16
    20de:	08 c0       	rjmp	.+16     	; 0x20f0 <sync+0xf2>
    20e0:	8f ef       	ldi	r24, 0xFF	; 255
    20e2:	9f ef       	ldi	r25, 0xFF	; 255
    20e4:	05 c0       	rjmp	.+10     	; 0x20f0 <sync+0xf2>
    20e6:	80 e0       	ldi	r24, 0x00	; 0
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	02 c0       	rjmp	.+4      	; 0x20f0 <sync+0xf2>
    20ec:	8f 2d       	mov	r24, r15
    20ee:	90 2f       	mov	r25, r16
    20f0:	df 91       	pop	r29
    20f2:	cf 91       	pop	r28
    20f4:	1f 91       	pop	r17
    20f6:	0f 91       	pop	r16
    20f8:	ff 90       	pop	r15
    20fa:	ef 90       	pop	r14
    20fc:	df 90       	pop	r13
    20fe:	cf 90       	pop	r12
    2100:	08 95       	ret

00002102 <run>:
    2102:	00 91 37 01 	lds	r16, 0x0137	; 0x800137 <current>
    2106:	10 91 38 01 	lds	r17, 0x0138	; 0x800138 <current+0x1>
    210a:	80 e8       	ldi	r24, 0x80	; 128
    210c:	91 e0       	ldi	r25, 0x01	; 1
    210e:	0e 94 c6 05 	call	0xb8c	; 0xb8c <dequeue>
    2112:	ec 01       	movw	r28, r24
    2114:	f8 01       	movw	r30, r16
    2116:	93 83       	std	Z+3, r25	; 0x03
    2118:	82 83       	std	Z+2, r24	; 0x02
    211a:	78 94       	sei
    211c:	6c 85       	ldd	r22, Y+12	; 0x0c
    211e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2120:	4e 85       	ldd	r20, Y+14	; 0x0e
    2122:	5f 85       	ldd	r21, Y+15	; 0x0f
    2124:	8a 85       	ldd	r24, Y+10	; 0x0a
    2126:	9b 85       	ldd	r25, Y+11	; 0x0b
    2128:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <sync>
    212c:	8f b7       	in	r24, 0x3f	; 63
    212e:	f8 94       	cli
    2130:	6d e3       	ldi	r22, 0x3D	; 61
    2132:	71 e0       	ldi	r23, 0x01	; 1
    2134:	ce 01       	movw	r24, r28
    2136:	0e 94 dd 05 	call	0xbba	; 0xbba <insert>
    213a:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <activeStack>
    213e:	f0 91 3a 01 	lds	r31, 0x013A	; 0x80013a <activeStack+0x1>
    2142:	01 90       	ld	r0, Z+
    2144:	f0 81       	ld	r31, Z
    2146:	e0 2d       	mov	r30, r0
    2148:	c2 81       	ldd	r28, Z+2	; 0x02
    214a:	d3 81       	ldd	r29, Z+3	; 0x03
    214c:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <msgQ>
    2150:	f0 91 81 01 	lds	r31, 0x0181	; 0x800181 <msgQ+0x1>
    2154:	30 97       	sbiw	r30, 0x00	; 0
    2156:	a1 f0       	breq	.+40     	; 0x2180 <run+0x7e>
    2158:	20 97       	sbiw	r28, 0x00	; 0
    215a:	99 f2       	breq	.-90     	; 0x2102 <run>
    215c:	86 81       	ldd	r24, Z+6	; 0x06
    215e:	97 81       	ldd	r25, Z+7	; 0x07
    2160:	a0 85       	ldd	r26, Z+8	; 0x08
    2162:	b1 85       	ldd	r27, Z+9	; 0x09
    2164:	4e 81       	ldd	r20, Y+6	; 0x06
    2166:	5f 81       	ldd	r21, Y+7	; 0x07
    2168:	68 85       	ldd	r22, Y+8	; 0x08
    216a:	79 85       	ldd	r23, Y+9	; 0x09
    216c:	84 1b       	sub	r24, r20
    216e:	95 0b       	sbc	r25, r21
    2170:	a6 0b       	sbc	r26, r22
    2172:	b7 0b       	sbc	r27, r23
    2174:	18 16       	cp	r1, r24
    2176:	19 06       	cpc	r1, r25
    2178:	1a 06       	cpc	r1, r26
    217a:	1b 06       	cpc	r1, r27
    217c:	0c f0       	brlt	.+2      	; 0x2180 <run+0x7e>
    217e:	c1 cf       	rjmp	.-126    	; 0x2102 <run>
    2180:	89 e3       	ldi	r24, 0x39	; 57
    2182:	91 e0       	ldi	r25, 0x01	; 1
    2184:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <pop>
    2188:	6b e3       	ldi	r22, 0x3B	; 59
    218a:	71 e0       	ldi	r23, 0x01	; 1
    218c:	0e 94 e7 05 	call	0xbce	; 0xbce <push>
    2190:	a0 91 39 01 	lds	r26, 0x0139	; 0x800139 <activeStack>
    2194:	b0 91 3a 01 	lds	r27, 0x013A	; 0x80013a <activeStack+0x1>
    2198:	02 c0       	rjmp	.+4      	; 0x219e <run+0x9c>
    219a:	a0 81       	ld	r26, Z
    219c:	b1 81       	ldd	r27, Z+1	; 0x01
    219e:	14 96       	adiw	r26, 0x04	; 4
    21a0:	ed 91       	ld	r30, X+
    21a2:	fc 91       	ld	r31, X
    21a4:	15 97       	sbiw	r26, 0x05	; 5
    21a6:	30 97       	sbiw	r30, 0x00	; 0
    21a8:	c1 f7       	brne	.-16     	; 0x219a <run+0x98>
    21aa:	cd 01       	movw	r24, r26
    21ac:	0e 94 44 05 	call	0xa88	; 0xa88 <dispatch>
    21b0:	a8 cf       	rjmp	.-176    	; 0x2102 <run>

000021b2 <install>:
    thread0.msg = NULL;
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    21b2:	fc 01       	movw	r30, r24
    if (i >= 0 && i < N_VECTORS) {
    21b4:	42 31       	cpi	r20, 0x12	; 18
    21b6:	b8 f4       	brcc	.+46     	; 0x21e6 <install+0x34>
        char status;
        DISABLE(status);
    21b8:	9f b7       	in	r25, 0x3f	; 63
    21ba:	90 78       	andi	r25, 0x80	; 128
    21bc:	f8 94       	cli
        otable[i] = obj;
    21be:	50 e0       	ldi	r21, 0x00	; 0
    21c0:	44 0f       	add	r20, r20
    21c2:	55 1f       	adc	r21, r21
    21c4:	da 01       	movw	r26, r20
    21c6:	ae 57       	subi	r26, 0x7E	; 126
    21c8:	be 4f       	sbci	r27, 0xFE	; 254
    21ca:	ed 93       	st	X+, r30
    21cc:	fc 93       	st	X, r31
        mtable[i] = m;
    21ce:	da 01       	movw	r26, r20
    21d0:	a6 5e       	subi	r26, 0xE6	; 230
    21d2:	bd 4f       	sbci	r27, 0xFD	; 253
    21d4:	6d 93       	st	X+, r22
    21d6:	7c 93       	st	X, r23
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    21d8:	21 e0       	ldi	r18, 0x01	; 1
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	33 83       	std	Z+3, r19	; 0x03
    21de:	22 83       	std	Z+2, r18	; 0x02
        ENABLE(status);
    21e0:	99 23       	and	r25, r25
    21e2:	09 f0       	breq	.+2      	; 0x21e6 <install+0x34>
    21e4:	78 94       	sei
    21e6:	08 95       	ret

000021e8 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    21e8:	8c 01       	movw	r16, r24
    21ea:	7b 01       	movw	r14, r22
    21ec:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    21ee:	8f b7       	in	r24, 0x3f	; 63
    21f0:	f8 94       	cli
    initialize();
    21f2:	0e 94 a5 04 	call	0x94a	; 0x94a <initialize>
    ENABLE(1);
    21f6:	78 94       	sei
    if (m != NULL)
    21f8:	e1 14       	cp	r14, r1
    21fa:	f1 04       	cpc	r15, r1
    21fc:	41 f0       	breq	.+16     	; 0x220e <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	a9 01       	movw	r20, r18
    2204:	60 e0       	ldi	r22, 0x00	; 0
    2206:	70 e0       	ldi	r23, 0x00	; 0
    2208:	cb 01       	movw	r24, r22
    220a:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <async>
    DISABLE(status);
    220e:	8f b7       	in	r24, 0x3f	; 63
    2210:	f8 94       	cli
    idle();
    2212:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <idle>

00002216 <__divmodhi4>:
    2216:	97 fb       	bst	r25, 7
    2218:	07 2e       	mov	r0, r23
    221a:	16 f4       	brtc	.+4      	; 0x2220 <__divmodhi4+0xa>
    221c:	00 94       	com	r0
    221e:	07 d0       	rcall	.+14     	; 0x222e <__divmodhi4_neg1>
    2220:	77 fd       	sbrc	r23, 7
    2222:	09 d0       	rcall	.+18     	; 0x2236 <__divmodhi4_neg2>
    2224:	0e 94 26 11 	call	0x224c	; 0x224c <__udivmodhi4>
    2228:	07 fc       	sbrc	r0, 7
    222a:	05 d0       	rcall	.+10     	; 0x2236 <__divmodhi4_neg2>
    222c:	3e f4       	brtc	.+14     	; 0x223c <__divmodhi4_exit>

0000222e <__divmodhi4_neg1>:
    222e:	90 95       	com	r25
    2230:	81 95       	neg	r24
    2232:	9f 4f       	sbci	r25, 0xFF	; 255
    2234:	08 95       	ret

00002236 <__divmodhi4_neg2>:
    2236:	70 95       	com	r23
    2238:	61 95       	neg	r22
    223a:	7f 4f       	sbci	r23, 0xFF	; 255

0000223c <__divmodhi4_exit>:
    223c:	08 95       	ret

0000223e <__usmulhisi3>:
    223e:	0e 94 3a 11 	call	0x2274	; 0x2274 <__umulhisi3>

00002242 <__usmulhisi3_tail>:
    2242:	b7 ff       	sbrs	r27, 7
    2244:	08 95       	ret
    2246:	82 1b       	sub	r24, r18
    2248:	93 0b       	sbc	r25, r19
    224a:	08 95       	ret

0000224c <__udivmodhi4>:
    224c:	aa 1b       	sub	r26, r26
    224e:	bb 1b       	sub	r27, r27
    2250:	51 e1       	ldi	r21, 0x11	; 17
    2252:	07 c0       	rjmp	.+14     	; 0x2262 <__udivmodhi4_ep>

00002254 <__udivmodhi4_loop>:
    2254:	aa 1f       	adc	r26, r26
    2256:	bb 1f       	adc	r27, r27
    2258:	a6 17       	cp	r26, r22
    225a:	b7 07       	cpc	r27, r23
    225c:	10 f0       	brcs	.+4      	; 0x2262 <__udivmodhi4_ep>
    225e:	a6 1b       	sub	r26, r22
    2260:	b7 0b       	sbc	r27, r23

00002262 <__udivmodhi4_ep>:
    2262:	88 1f       	adc	r24, r24
    2264:	99 1f       	adc	r25, r25
    2266:	5a 95       	dec	r21
    2268:	a9 f7       	brne	.-22     	; 0x2254 <__udivmodhi4_loop>
    226a:	80 95       	com	r24
    226c:	90 95       	com	r25
    226e:	bc 01       	movw	r22, r24
    2270:	cd 01       	movw	r24, r26
    2272:	08 95       	ret

00002274 <__umulhisi3>:
    2274:	a2 9f       	mul	r26, r18
    2276:	b0 01       	movw	r22, r0
    2278:	b3 9f       	mul	r27, r19
    227a:	c0 01       	movw	r24, r0
    227c:	a3 9f       	mul	r26, r19
    227e:	70 0d       	add	r23, r0
    2280:	81 1d       	adc	r24, r1
    2282:	11 24       	eor	r1, r1
    2284:	91 1d       	adc	r25, r1
    2286:	b2 9f       	mul	r27, r18
    2288:	70 0d       	add	r23, r0
    228a:	81 1d       	adc	r24, r1
    228c:	11 24       	eor	r1, r1
    228e:	91 1d       	adc	r25, r1
    2290:	08 95       	ret

00002292 <setjmp>:
    2292:	dc 01       	movw	r26, r24
    2294:	2d 92       	st	X+, r2
    2296:	3d 92       	st	X+, r3
    2298:	4d 92       	st	X+, r4
    229a:	5d 92       	st	X+, r5
    229c:	6d 92       	st	X+, r6
    229e:	7d 92       	st	X+, r7
    22a0:	8d 92       	st	X+, r8
    22a2:	9d 92       	st	X+, r9
    22a4:	ad 92       	st	X+, r10
    22a6:	bd 92       	st	X+, r11
    22a8:	cd 92       	st	X+, r12
    22aa:	dd 92       	st	X+, r13
    22ac:	ed 92       	st	X+, r14
    22ae:	fd 92       	st	X+, r15
    22b0:	0d 93       	st	X+, r16
    22b2:	1d 93       	st	X+, r17
    22b4:	cd 93       	st	X+, r28
    22b6:	dd 93       	st	X+, r29
    22b8:	ff 91       	pop	r31
    22ba:	ef 91       	pop	r30
    22bc:	8d b7       	in	r24, 0x3d	; 61
    22be:	8d 93       	st	X+, r24
    22c0:	8e b7       	in	r24, 0x3e	; 62
    22c2:	8d 93       	st	X+, r24
    22c4:	8f b7       	in	r24, 0x3f	; 63
    22c6:	8d 93       	st	X+, r24
    22c8:	ed 93       	st	X+, r30
    22ca:	fd 93       	st	X+, r31
    22cc:	88 27       	eor	r24, r24
    22ce:	99 27       	eor	r25, r25
    22d0:	09 94       	ijmp

000022d2 <longjmp>:
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	81 30       	cpi	r24, 0x01	; 1
    22d8:	91 05       	cpc	r25, r1
    22da:	81 1d       	adc	r24, r1
    22dc:	2d 90       	ld	r2, X+
    22de:	3d 90       	ld	r3, X+
    22e0:	4d 90       	ld	r4, X+
    22e2:	5d 90       	ld	r5, X+
    22e4:	6d 90       	ld	r6, X+
    22e6:	7d 90       	ld	r7, X+
    22e8:	8d 90       	ld	r8, X+
    22ea:	9d 90       	ld	r9, X+
    22ec:	ad 90       	ld	r10, X+
    22ee:	bd 90       	ld	r11, X+
    22f0:	cd 90       	ld	r12, X+
    22f2:	dd 90       	ld	r13, X+
    22f4:	ed 90       	ld	r14, X+
    22f6:	fd 90       	ld	r15, X+
    22f8:	0d 91       	ld	r16, X+
    22fa:	1d 91       	ld	r17, X+
    22fc:	cd 91       	ld	r28, X+
    22fe:	dd 91       	ld	r29, X+
    2300:	ed 91       	ld	r30, X+
    2302:	fd 91       	ld	r31, X+
    2304:	0d 90       	ld	r0, X+
    2306:	f8 94       	cli
    2308:	fe bf       	out	0x3e, r31	; 62
    230a:	0f be       	out	0x3f, r0	; 63
    230c:	ed bf       	out	0x3d, r30	; 61
    230e:	ed 91       	ld	r30, X+
    2310:	fd 91       	ld	r31, X+
    2312:	09 94       	ijmp

00002314 <_exit>:
    2314:	f8 94       	cli

00002316 <__stop_program>:
    2316:	ff cf       	rjmp	.-2      	; 0x2316 <__stop_program>
