
Lab4-Proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  0000232e  000023c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000232e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  00800138  00800138  000023fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000023fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000242c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  0000246c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000035e7  00000000  00000000  00002744  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001340  00000000  00000000  00005d2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001925  00000000  00000000  0000706b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000dd0  00000000  00000000  00008990  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a6d  00000000  00000000  00009760  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b45  00000000  00000000  0000a1cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000248  00000000  00000000  0000cd12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <__vector_1>
       8:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__vector_2>
       c:	0c 94 18 07 	jmp	0xe30	; 0xe30 <__vector_3>
      10:	0c 94 87 07 	jmp	0xf0e	; 0xf0e <__vector_4>
      14:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 0f 0e 	jmp	0x1c1e	; 0x1c1e <__vector_9>
      28:	0c 94 65 08 	jmp	0x10ca	; 0x10ca <__vector_10>
      2c:	0c 94 d4 08 	jmp	0x11a8	; 0x11a8 <__vector_11>
      30:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__vector_12>
      34:	0c 94 b2 09 	jmp	0x1364	; 0x1364 <__vector_13>
      38:	0c 94 21 0a 	jmp	0x1442	; 0x1442 <__vector_14>
      3c:	0c 94 90 0a 	jmp	0x1520	; 0x1520 <__vector_15>
      40:	0c 94 ff 0a 	jmp	0x15fe	; 0x15fe <__vector_16>
      44:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <__vector_17>
      48:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__vector_18>
      4c:	0c 94 4c 0c 	jmp	0x1898	; 0x1898 <__vector_19>
      50:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <__vector_20>
      54:	0c 94 2a 0d 	jmp	0x1a54	; 0x1a54 <__vector_21>
      58:	0c 94 99 0d 	jmp	0x1b32	; 0x1b32 <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	ee e2       	ldi	r30, 0x2E	; 46
      70:	f3 e2       	ldi	r31, 0x23	; 35
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a8 33       	cpi	r26, 0x38	; 56
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	a8 e3       	ldi	r26, 0x38	; 56
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	ab 38       	cpi	r26, 0x8B	; 139
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 c0 02 	call	0x580	; 0x580 <main>
      92:	0c 94 95 11 	jmp	0x232a	; 0x232a <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <Switch>:
#include "Joystick.h"
#include "TinyTimber.h"



void Switch(InterruptHandler *self, int arg) {
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
	if (self->risingEdge){
      a6:	fc 01       	movw	r30, r24
      a8:	26 81       	ldd	r18, Z+6	; 0x06
      aa:	22 23       	and	r18, r18
      ac:	a1 f0       	breq	.+40     	; 0xd6 <Switch+0x3c>
		self->risingEdge = false;
      ae:	16 82       	std	Z+6, r1	; 0x06
		ASYNC(self->joystick, joyStickHorizontalControll, 0);		
      b0:	04 81       	ldd	r16, Z+4	; 0x04
      b2:	15 81       	ldd	r17, Z+5	; 0x05
      b4:	c1 2c       	mov	r12, r1
      b6:	d1 2c       	mov	r13, r1
      b8:	0f 2e       	mov	r0, r31
      ba:	f5 e9       	ldi	r31, 0x95	; 149
      bc:	ef 2e       	mov	r14, r31
      be:	f0 e0       	ldi	r31, 0x00	; 0
      c0:	ff 2e       	mov	r15, r31
      c2:	f0 2d       	mov	r31, r0
      c4:	20 e0       	ldi	r18, 0x00	; 0
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	a9 01       	movw	r20, r18
      ca:	60 e0       	ldi	r22, 0x00	; 0
      cc:	70 e0       	ldi	r23, 0x00	; 0
      ce:	cb 01       	movw	r24, r22
      d0:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <async>
      d4:	03 c0       	rjmp	.+6      	; 0xdc <Switch+0x42>
	}else{
		self->risingEdge = true;
      d6:	21 e0       	ldi	r18, 0x01	; 1
      d8:	fc 01       	movw	r30, r24
      da:	26 83       	std	Z+6, r18	; 0x06
	}
}
      dc:	1f 91       	pop	r17
      de:	0f 91       	pop	r16
      e0:	ff 90       	pop	r15
      e2:	ef 90       	pop	r14
      e4:	df 90       	pop	r13
      e6:	cf 90       	pop	r12
      e8:	08 95       	ret

000000ea <Change>:

void Change(InterruptHandler *self, int arg) {
      ea:	cf 92       	push	r12
      ec:	df 92       	push	r13
      ee:	ef 92       	push	r14
      f0:	ff 92       	push	r15
      f2:	0f 93       	push	r16
      f4:	1f 93       	push	r17
	ASYNC(self->joystick, joyStickVerticalControll, 0);
      f6:	fc 01       	movw	r30, r24
      f8:	04 81       	ldd	r16, Z+4	; 0x04
      fa:	15 81       	ldd	r17, Z+5	; 0x05
      fc:	c1 2c       	mov	r12, r1
      fe:	d1 2c       	mov	r13, r1
     100:	0f 2e       	mov	r0, r31
     102:	f6 ec       	ldi	r31, 0xC6	; 198
     104:	ef 2e       	mov	r14, r31
     106:	f0 e0       	ldi	r31, 0x00	; 0
     108:	ff 2e       	mov	r15, r31
     10a:	f0 2d       	mov	r31, r0
     10c:	20 e0       	ldi	r18, 0x00	; 0
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	a9 01       	movw	r20, r18
     112:	60 e0       	ldi	r22, 0x00	; 0
     114:	70 e0       	ldi	r23, 0x00	; 0
     116:	cb 01       	movw	r24, r22
     118:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <async>
     11c:	1f 91       	pop	r17
     11e:	0f 91       	pop	r16
     120:	ff 90       	pop	r15
     122:	ef 90       	pop	r14
     124:	df 90       	pop	r13
     126:	cf 90       	pop	r12
     128:	08 95       	ret

0000012a <joyStickHorizontalControll>:
		AFTER(MSEC(50), self, holdJoyStick, 0);
	}
	return 0;
}

int joyStickHorizontalControll(Joystick *self, int unUsed){
     12a:	cf 92       	push	r12
     12c:	df 92       	push	r13
     12e:	ef 92       	push	r14
     130:	ff 92       	push	r15
     132:	0f 93       	push	r16
     134:	1f 93       	push	r17
     136:	ac 01       	movw	r20, r24
	if((!(PINE & (1 << PE1)) | !(PINE & (1 << PE6)))){
     138:	2c b1       	in	r18, 0x0c	; 12
     13a:	3c b1       	in	r19, 0x0c	; 12
     13c:	26 95       	lsr	r18
     13e:	91 e0       	ldi	r25, 0x01	; 1
     140:	29 27       	eor	r18, r25
     142:	21 70       	andi	r18, 0x01	; 1
     144:	32 95       	swap	r19
     146:	36 95       	lsr	r19
     148:	36 95       	lsr	r19
     14a:	33 70       	andi	r19, 0x03	; 3
     14c:	93 27       	eor	r25, r19
     14e:	91 70       	andi	r25, 0x01	; 1
     150:	92 2b       	or	r25, r18
     152:	99 f0       	breq	.+38     	; 0x17a <joyStickHorizontalControll+0x50>
     154:	fa 01       	movw	r30, r20
		ASYNC(self->gui, switchState,0);
     156:	04 81       	ldd	r16, Z+4	; 0x04
     158:	15 81       	ldd	r17, Z+5	; 0x05
     15a:	c1 2c       	mov	r12, r1
     15c:	d1 2c       	mov	r13, r1
     15e:	0f 2e       	mov	r0, r31
     160:	ff e8       	ldi	r31, 0x8F	; 143
     162:	ef 2e       	mov	r14, r31
     164:	f1 e0       	ldi	r31, 0x01	; 1
     166:	ff 2e       	mov	r15, r31
     168:	f0 2d       	mov	r31, r0
     16a:	20 e0       	ldi	r18, 0x00	; 0
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	a9 01       	movw	r20, r18
     170:	60 e0       	ldi	r22, 0x00	; 0
     172:	70 e0       	ldi	r23, 0x00	; 0
     174:	cb 01       	movw	r24, r22
     176:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <async>
	}
	return 0;
}
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	1f 91       	pop	r17
     180:	0f 91       	pop	r16
     182:	ff 90       	pop	r15
     184:	ef 90       	pop	r14
     186:	df 90       	pop	r13
     188:	cf 90       	pop	r12
     18a:	08 95       	ret

0000018c <joyStickVerticalControll>:

int joyStickVerticalControll(Joystick *self, int unUsed){
     18c:	cf 92       	push	r12
     18e:	df 92       	push	r13
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	cf 93       	push	r28
     19a:	df 93       	push	r29
     19c:	ec 01       	movw	r28, r24
	if (!(PINB & (1 << PB7))) { //DOWN
     19e:	1f 99       	sbic	0x03, 7	; 3
     1a0:	12 c0       	rjmp	.+36     	; 0x1c6 <joyStickVerticalControll+0x3a>
		//ASYNC(self, holdJoyStick, 0);
		ASYNC(self->gui, freqDown, 0);
     1a2:	0c 81       	ldd	r16, Y+4	; 0x04
     1a4:	1d 81       	ldd	r17, Y+5	; 0x05
     1a6:	c1 2c       	mov	r12, r1
     1a8:	d1 2c       	mov	r13, r1
     1aa:	0f 2e       	mov	r0, r31
     1ac:	f6 e5       	ldi	r31, 0x56	; 86
     1ae:	ef 2e       	mov	r14, r31
     1b0:	f1 e0       	ldi	r31, 0x01	; 1
     1b2:	ff 2e       	mov	r15, r31
     1b4:	f0 2d       	mov	r31, r0
     1b6:	20 e0       	ldi	r18, 0x00	; 0
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	a9 01       	movw	r20, r18
     1bc:	60 e0       	ldi	r22, 0x00	; 0
     1be:	70 e0       	ldi	r23, 0x00	; 0
     1c0:	cb 01       	movw	r24, r22
     1c2:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <async>
		
	}
	if (!(PINB & (1 << PB6))) { //UP
     1c6:	1e 99       	sbic	0x03, 6	; 3
     1c8:	12 c0       	rjmp	.+36     	; 0x1ee <joyStickVerticalControll+0x62>
		//ASYNC(self, holdJoyStick, 0);
		ASYNC(self->gui, freqUp, 0);
     1ca:	0c 81       	ldd	r16, Y+4	; 0x04
     1cc:	1d 81       	ldd	r17, Y+5	; 0x05
     1ce:	c1 2c       	mov	r12, r1
     1d0:	d1 2c       	mov	r13, r1
     1d2:	0f 2e       	mov	r0, r31
     1d4:	fd e1       	ldi	r31, 0x1D	; 29
     1d6:	ef 2e       	mov	r14, r31
     1d8:	f1 e0       	ldi	r31, 0x01	; 1
     1da:	ff 2e       	mov	r15, r31
     1dc:	f0 2d       	mov	r31, r0
     1de:	20 e0       	ldi	r18, 0x00	; 0
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	a9 01       	movw	r20, r18
     1e4:	60 e0       	ldi	r22, 0x00	; 0
     1e6:	70 e0       	ldi	r23, 0x00	; 0
     1e8:	cb 01       	movw	r24, r22
     1ea:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <async>
	}
	if (!(PINB & (1 << PB4))) { //PRESS
     1ee:	1c 99       	sbic	0x03, 4	; 3
     1f0:	19 c0       	rjmp	.+50     	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
		if (self->risingEdge){
     1f2:	8e 81       	ldd	r24, Y+6	; 0x06
     1f4:	88 23       	and	r24, r24
     1f6:	a1 f0       	breq	.+40     	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
			self->risingEdge = false;
     1f8:	1e 82       	std	Y+6, r1	; 0x06
			ASYNC(self->gui, press, 0);	
     1fa:	0c 81       	ldd	r16, Y+4	; 0x04
     1fc:	1d 81       	ldd	r17, Y+5	; 0x05
     1fe:	c1 2c       	mov	r12, r1
     200:	d1 2c       	mov	r13, r1
     202:	0f 2e       	mov	r0, r31
     204:	f1 ea       	ldi	r31, 0xA1	; 161
     206:	ef 2e       	mov	r14, r31
     208:	f1 e0       	ldi	r31, 0x01	; 1
     20a:	ff 2e       	mov	r15, r31
     20c:	f0 2d       	mov	r31, r0
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	30 e0       	ldi	r19, 0x00	; 0
     212:	a9 01       	movw	r20, r18
     214:	60 e0       	ldi	r22, 0x00	; 0
     216:	70 e0       	ldi	r23, 0x00	; 0
     218:	cb 01       	movw	r24, r22
     21a:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <async>
     21e:	02 c0       	rjmp	.+4      	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
		}else{
			self->risingEdge = true;
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	8e 83       	std	Y+6, r24	; 0x06
		}
	}
	return 0;
}
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	df 91       	pop	r29
     22a:	cf 91       	pop	r28
     22c:	1f 91       	pop	r17
     22e:	0f 91       	pop	r16
     230:	ff 90       	pop	r15
     232:	ef 90       	pop	r14
     234:	df 90       	pop	r13
     236:	cf 90       	pop	r12
     238:	08 95       	ret

0000023a <freqUp>:
#include "LCD_Driver.h"
#include "PulseGenerator.h"
#include <avr/io.h>
//TODO: Check every call if it should be SYNC or SYNC

int freqUp(GUI *self, int unUsed){
     23a:	cf 92       	push	r12
     23c:	df 92       	push	r13
     23e:	ef 92       	push	r14
     240:	ff 92       	push	r15
     242:	0f 93       	push	r16
     244:	1f 93       	push	r17
	if(self->isLeft){
     246:	fc 01       	movw	r30, r24
     248:	24 81       	ldd	r18, Z+4	; 0x04
     24a:	22 23       	and	r18, r18
     24c:	99 f0       	breq	.+38     	; 0x274 <freqUp+0x3a>
		ASYNC(self->left, increase, 0);	
     24e:	05 81       	ldd	r16, Z+5	; 0x05
     250:	16 81       	ldd	r17, Z+6	; 0x06
     252:	c1 2c       	mov	r12, r1
     254:	d1 2c       	mov	r13, r1
     256:	0f 2e       	mov	r0, r31
     258:	f2 eb       	ldi	r31, 0xB2	; 178
     25a:	ef 2e       	mov	r14, r31
     25c:	f3 e0       	ldi	r31, 0x03	; 3
     25e:	ff 2e       	mov	r15, r31
     260:	f0 2d       	mov	r31, r0
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	a9 01       	movw	r20, r18
     268:	60 e0       	ldi	r22, 0x00	; 0
     26a:	70 e0       	ldi	r23, 0x00	; 0
     26c:	cb 01       	movw	r24, r22
     26e:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <async>
     272:	13 c0       	rjmp	.+38     	; 0x29a <freqUp+0x60>
	}else{
		ASYNC(self->right, increase, 0);
     274:	fc 01       	movw	r30, r24
     276:	07 81       	ldd	r16, Z+7	; 0x07
     278:	10 85       	ldd	r17, Z+8	; 0x08
     27a:	c1 2c       	mov	r12, r1
     27c:	d1 2c       	mov	r13, r1
     27e:	0f 2e       	mov	r0, r31
     280:	f2 eb       	ldi	r31, 0xB2	; 178
     282:	ef 2e       	mov	r14, r31
     284:	f3 e0       	ldi	r31, 0x03	; 3
     286:	ff 2e       	mov	r15, r31
     288:	f0 2d       	mov	r31, r0
     28a:	20 e0       	ldi	r18, 0x00	; 0
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	a9 01       	movw	r20, r18
     290:	60 e0       	ldi	r22, 0x00	; 0
     292:	70 e0       	ldi	r23, 0x00	; 0
     294:	cb 01       	movw	r24, r22
     296:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <async>
	}
	
	return 0;
}
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	1f 91       	pop	r17
     2a0:	0f 91       	pop	r16
     2a2:	ff 90       	pop	r15
     2a4:	ef 90       	pop	r14
     2a6:	df 90       	pop	r13
     2a8:	cf 90       	pop	r12
     2aa:	08 95       	ret

000002ac <freqDown>:

int freqDown(GUI *self, int unUsed){
     2ac:	cf 92       	push	r12
     2ae:	df 92       	push	r13
     2b0:	ef 92       	push	r14
     2b2:	ff 92       	push	r15
     2b4:	0f 93       	push	r16
     2b6:	1f 93       	push	r17
	if(self->isLeft){
     2b8:	fc 01       	movw	r30, r24
     2ba:	24 81       	ldd	r18, Z+4	; 0x04
     2bc:	22 23       	and	r18, r18
     2be:	99 f0       	breq	.+38     	; 0x2e6 <freqDown+0x3a>
		ASYNC(self->left, decrease, 0);
     2c0:	05 81       	ldd	r16, Z+5	; 0x05
     2c2:	16 81       	ldd	r17, Z+6	; 0x06
     2c4:	c1 2c       	mov	r12, r1
     2c6:	d1 2c       	mov	r13, r1
     2c8:	0f 2e       	mov	r0, r31
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	ef 2e       	mov	r14, r31
     2ce:	f4 e0       	ldi	r31, 0x04	; 4
     2d0:	ff 2e       	mov	r15, r31
     2d2:	f0 2d       	mov	r31, r0
     2d4:	20 e0       	ldi	r18, 0x00	; 0
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	a9 01       	movw	r20, r18
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	cb 01       	movw	r24, r22
     2e0:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <async>
     2e4:	13 c0       	rjmp	.+38     	; 0x30c <freqDown+0x60>
	}else{
		ASYNC(self->right, decrease, 0);
     2e6:	fc 01       	movw	r30, r24
     2e8:	07 81       	ldd	r16, Z+7	; 0x07
     2ea:	10 85       	ldd	r17, Z+8	; 0x08
     2ec:	c1 2c       	mov	r12, r1
     2ee:	d1 2c       	mov	r13, r1
     2f0:	0f 2e       	mov	r0, r31
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	ef 2e       	mov	r14, r31
     2f6:	f4 e0       	ldi	r31, 0x04	; 4
     2f8:	ff 2e       	mov	r15, r31
     2fa:	f0 2d       	mov	r31, r0
     2fc:	20 e0       	ldi	r18, 0x00	; 0
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	a9 01       	movw	r20, r18
     302:	60 e0       	ldi	r22, 0x00	; 0
     304:	70 e0       	ldi	r23, 0x00	; 0
     306:	cb 01       	movw	r24, r22
     308:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <async>
	}
	return 0;
}
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	1f 91       	pop	r17
     312:	0f 91       	pop	r16
     314:	ff 90       	pop	r15
     316:	ef 90       	pop	r14
     318:	df 90       	pop	r13
     31a:	cf 90       	pop	r12
     31c:	08 95       	ret

0000031e <switchState>:

int switchState(GUI *self, int unUsed){
	self->isLeft = self->isLeft ? false : true;
     31e:	fc 01       	movw	r30, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	22 23       	and	r18, r18
     324:	11 f0       	breq	.+4      	; 0x32a <switchState+0xc>
     326:	20 e0       	ldi	r18, 0x00	; 0
     328:	01 c0       	rjmp	.+2      	; 0x32c <switchState+0xe>
     32a:	21 e0       	ldi	r18, 0x01	; 1
     32c:	fc 01       	movw	r30, r24
     32e:	24 83       	std	Z+4, r18	; 0x04
	LCDDR13 ^= 1;
     330:	e9 ef       	ldi	r30, 0xF9	; 249
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	90 81       	ld	r25, Z
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	89 27       	eor	r24, r25
     33a:	80 83       	st	Z, r24
	return 0;
}
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	08 95       	ret

00000342 <press>:

int press(GUI *self, int unUsed){
     342:	cf 92       	push	r12
     344:	df 92       	push	r13
     346:	ef 92       	push	r14
     348:	ff 92       	push	r15
     34a:	0f 93       	push	r16
     34c:	1f 93       	push	r17
	if(self->isLeft){
     34e:	fc 01       	movw	r30, r24
     350:	24 81       	ldd	r18, Z+4	; 0x04
     352:	22 23       	and	r18, r18
     354:	99 f0       	breq	.+38     	; 0x37c <press+0x3a>
		ASYNC(self->left, reset, 0);  
     356:	05 81       	ldd	r16, Z+5	; 0x05
     358:	16 81       	ldd	r17, Z+6	; 0x06
     35a:	c1 2c       	mov	r12, r1
     35c:	d1 2c       	mov	r13, r1
     35e:	0f 2e       	mov	r0, r31
     360:	fe e4       	ldi	r31, 0x4E	; 78
     362:	ef 2e       	mov	r14, r31
     364:	f4 e0       	ldi	r31, 0x04	; 4
     366:	ff 2e       	mov	r15, r31
     368:	f0 2d       	mov	r31, r0
     36a:	20 e0       	ldi	r18, 0x00	; 0
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	a9 01       	movw	r20, r18
     370:	60 e0       	ldi	r22, 0x00	; 0
     372:	70 e0       	ldi	r23, 0x00	; 0
     374:	cb 01       	movw	r24, r22
     376:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <async>
     37a:	13 c0       	rjmp	.+38     	; 0x3a2 <press+0x60>
	} else {
		ASYNC(self->right, reset, 0); 
     37c:	fc 01       	movw	r30, r24
     37e:	07 81       	ldd	r16, Z+7	; 0x07
     380:	10 85       	ldd	r17, Z+8	; 0x08
     382:	c1 2c       	mov	r12, r1
     384:	d1 2c       	mov	r13, r1
     386:	0f 2e       	mov	r0, r31
     388:	fe e4       	ldi	r31, 0x4E	; 78
     38a:	ef 2e       	mov	r14, r31
     38c:	f4 e0       	ldi	r31, 0x04	; 4
     38e:	ff 2e       	mov	r15, r31
     390:	f0 2d       	mov	r31, r0
     392:	20 e0       	ldi	r18, 0x00	; 0
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	a9 01       	movw	r20, r18
     398:	60 e0       	ldi	r22, 0x00	; 0
     39a:	70 e0       	ldi	r23, 0x00	; 0
     39c:	cb 01       	movw	r24, r22
     39e:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <async>
	}
	return 0;
}
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	1f 91       	pop	r17
     3a8:	0f 91       	pop	r16
     3aa:	ff 90       	pop	r15
     3ac:	ef 90       	pop	r14
     3ae:	df 90       	pop	r13
     3b0:	cf 90       	pop	r12
     3b2:	08 95       	ret

000003b4 <CPUCLK_Init>:
#include "LCD_Driver.h"
#include <avr/io.h>
#include <stdbool.h>

void CPUCLK_Init(void){
	CLKPR = 0x80;
     3b4:	e1 e6       	ldi	r30, 0x61	; 97
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	80 e8       	ldi	r24, 0x80	; 128
     3ba:	80 83       	st	Z, r24
	CLKPR = 0x00;
     3bc:	10 82       	st	Z, r1
     3be:	08 95       	ret

000003c0 <LCD_Init>:
}

void LCD_Init(void){
	//Use 32 kHz crystal oscillator
	//1/3 Bias and 1/4 duty, SEG0:SEG24 is used as port pins
	LCDCRB = (1<<LCDCS) | (1<<LCDMUX0)| (1<<LCDMUX1)|(1<<LCDPM0) |(1<<LCDPM1) |(1<<LCDPM2);
     3c0:	87 eb       	ldi	r24, 0xB7	; 183
     3c2:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	/* Using 16 as prescaler selection and 8 as LCD Clock Divide */
	/* gives a frame rate of 32 Hz */
	LCDFRR = (1<<LCDCD0) | (1<<LCDCD1) | (1<<LCDCD2);
     3c6:	87 e0       	ldi	r24, 0x07	; 7
     3c8:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
	/* Set segment drive time to 300 μs and output voltage to 3.35 V*/
	LCDCCR = (1<<LCDDC0) | (1<<LCDCC1) | (1<<LCDCC2) | (1<<LCDCC3);
     3cc:	8e e2       	ldi	r24, 0x2E	; 46
     3ce:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	/* Enable LCD, low power waveform and no interrupt enabled */
	LCDCRA = (1<<LCDEN);
     3d2:	80 e8       	ldi	r24, 0x80	; 128
     3d4:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>

	//Indicator bits 
	LCDDR13 ^= 1;
     3d8:	e9 ef       	ldi	r30, 0xF9	; 249
     3da:	f0 e0       	ldi	r31, 0x00	; 0
     3dc:	90 81       	ld	r25, Z
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	89 27       	eor	r24, r25
     3e2:	80 83       	st	Z, r24
     3e4:	08 95       	ret

000003e6 <CLK_Init>:
}

void CLK_Init(){
	// Timer
	DDRE |= (1 << PE4) | (1<< PE6) | (1<<PE5);
     3e6:	8d b1       	in	r24, 0x0d	; 13
     3e8:	80 67       	ori	r24, 0x70	; 112
     3ea:	8d b9       	out	0x0d, r24	; 13
	PORTE |= (1<<PE5);
     3ec:	8e b1       	in	r24, 0x0e	; 14
     3ee:	80 62       	ori	r24, 0x20	; 32
     3f0:	8e b9       	out	0x0e, r24	; 14
     3f2:	08 95       	ret

000003f4 <BUTTON_Init>:
}

void BUTTON_Init(){
	PORTB |= (1 << 7) | (1 << 6) | (1 << 4);
     3f4:	85 b1       	in	r24, 0x05	; 5
     3f6:	80 6d       	ori	r24, 0xD0	; 208
     3f8:	85 b9       	out	0x05, r24	; 5
	PORTE |= (1 << 3) | (1 << 2);
     3fa:	8e b1       	in	r24, 0x0e	; 14
     3fc:	8c 60       	ori	r24, 0x0C	; 12
     3fe:	8e b9       	out	0x0e, r24	; 14

    //Interrupt enables
	EIMSK  |= (1 << PCIE1) | (1 << PCIE0);
     400:	8d b3       	in	r24, 0x1d	; 29
     402:	80 6c       	ori	r24, 0xC0	; 192
     404:	8d bb       	out	0x1d, r24	; 29
	PCMSK1 |= (1 << PCINT12) | (1 << PCINT14) | (1 << PCINT15);
     406:	ec e6       	ldi	r30, 0x6C	; 108
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	80 81       	ld	r24, Z
     40c:	80 6d       	ori	r24, 0xD0	; 208
     40e:	80 83       	st	Z, r24
	
	PCMSK0 |= (1 << PCINT2) | (1 << PCINT3);
     410:	eb e6       	ldi	r30, 0x6B	; 107
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	80 81       	ld	r24, Z
     416:	8c 60       	ori	r24, 0x0C	; 12
     418:	80 83       	st	Z, r24
     41a:	08 95       	ret

0000041c <INIT>:
}

void INIT(){
	CPUCLK_Init();
     41c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <CPUCLK_Init>
	LCD_Init();
     420:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LCD_Init>
	CLK_Init();
     424:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <CLK_Init>
	BUTTON_Init();
     428:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <BUTTON_Init>
     42c:	08 95       	ret

0000042e <writeChar>:
	LCDDR6 = data2;
}

void writeChar(char ch, int pos){
	/* Returns if given input is not possible to print */
	if(pos < 0 || pos > 5 || ch < 48 || ch > 57){
     42e:	66 30       	cpi	r22, 0x06	; 6
     430:	71 05       	cpc	r23, r1
     432:	08 f0       	brcs	.+2      	; 0x436 <writeChar+0x8>
     434:	6e c0       	rjmp	.+220    	; 0x512 <__stack+0x13>
     436:	80 33       	cpi	r24, 0x30	; 48
     438:	08 f4       	brcc	.+2      	; 0x43c <writeChar+0xe>
     43a:	6b c0       	rjmp	.+214    	; 0x512 <__stack+0x13>
     43c:	8a 33       	cpi	r24, 0x3A	; 58
     43e:	08 f0       	brcs	.+2      	; 0x442 <writeChar+0x14>
     440:	68 c0       	rjmp	.+208    	; 0x512 <__stack+0x13>
		return;
	}
	volatile uint8_t *lcd_base = &LCDDR0 + offsetPos[pos];
     442:	fb 01       	movw	r30, r22
     444:	e8 5f       	subi	r30, 0xF8	; 248
     446:	fe 4f       	sbci	r31, 0xFE	; 254
     448:	e0 81       	ld	r30, Z
     44a:	f0 e0       	ldi	r31, 0x00	; 0
     44c:	e4 51       	subi	r30, 0x14	; 20
     44e:	ff 4f       	sbci	r31, 0xFF	; 255
	
	int number = (int)ch - 48;
     450:	a8 2f       	mov	r26, r24
     452:	b0 e0       	ldi	r27, 0x00	; 0
     454:	d0 97       	sbiw	r26, 0x30	; 48
	int shift = 0;
	/*Clears the part of the display we want to write onto */
	if (pos % 2 == 1){
     456:	61 70       	andi	r22, 0x01	; 1
     458:	70 78       	andi	r23, 0x80	; 128
     45a:	77 23       	and	r23, r23
     45c:	34 f4       	brge	.+12     	; 0x46a <writeChar+0x3c>
     45e:	61 50       	subi	r22, 0x01	; 1
     460:	71 09       	sbc	r23, r1
     462:	6e 6f       	ori	r22, 0xFE	; 254
     464:	7f 6f       	ori	r23, 0xFF	; 255
     466:	6f 5f       	subi	r22, 0xFF	; 255
     468:	7f 4f       	sbci	r23, 0xFF	; 255
     46a:	61 30       	cpi	r22, 0x01	; 1
     46c:	71 05       	cpc	r23, r1
     46e:	71 f4       	brne	.+28     	; 0x48c <writeChar+0x5e>
		shift = 4;
		lcd_base[0]  = lcd_base[0]  & 0x0F;
     470:	80 81       	ld	r24, Z
     472:	8f 70       	andi	r24, 0x0F	; 15
     474:	80 83       	st	Z, r24
		lcd_base[5]  = lcd_base[5]  & 0x0F;
     476:	85 81       	ldd	r24, Z+5	; 0x05
     478:	8f 70       	andi	r24, 0x0F	; 15
     47a:	85 83       	std	Z+5, r24	; 0x05
		lcd_base[10] = lcd_base[10] & 0x0F;
     47c:	82 85       	ldd	r24, Z+10	; 0x0a
     47e:	8f 70       	andi	r24, 0x0F	; 15
     480:	82 87       	std	Z+10, r24	; 0x0a
		lcd_base[15] = lcd_base[15] & 0x0F;
     482:	87 85       	ldd	r24, Z+15	; 0x0f
     484:	8f 70       	andi	r24, 0x0F	; 15
     486:	87 87       	std	Z+15, r24	; 0x0f
	
	int number = (int)ch - 48;
	int shift = 0;
	/*Clears the part of the display we want to write onto */
	if (pos % 2 == 1){
		shift = 4;
     488:	24 e0       	ldi	r18, 0x04	; 4
     48a:	0d c0       	rjmp	.+26     	; 0x4a6 <writeChar+0x78>
		lcd_base[0]  = lcd_base[0]  & 0x0F;
		lcd_base[5]  = lcd_base[5]  & 0x0F;
		lcd_base[10] = lcd_base[10] & 0x0F;
		lcd_base[15] = lcd_base[15] & 0x0F;
		}else{
		lcd_base[0]  = lcd_base[0]  & 0xF0;
     48c:	80 81       	ld	r24, Z
     48e:	80 7f       	andi	r24, 0xF0	; 240
     490:	80 83       	st	Z, r24
		lcd_base[5]  = lcd_base[5]  & 0xF0;
     492:	85 81       	ldd	r24, Z+5	; 0x05
     494:	80 7f       	andi	r24, 0xF0	; 240
     496:	85 83       	std	Z+5, r24	; 0x05
		lcd_base[10] = lcd_base[10] & 0xF0;
     498:	82 85       	ldd	r24, Z+10	; 0x0a
     49a:	80 7f       	andi	r24, 0xF0	; 240
     49c:	82 87       	std	Z+10, r24	; 0x0a
		lcd_base[15] = lcd_base[15] & 0xF0;
     49e:	87 85       	ldd	r24, Z+15	; 0x0f
     4a0:	80 7f       	andi	r24, 0xF0	; 240
     4a2:	87 87       	std	Z+15, r24	; 0x0f
		return;
	}
	volatile uint8_t *lcd_base = &LCDDR0 + offsetPos[pos];
	
	int number = (int)ch - 48;
	int shift = 0;
     4a4:	20 e0       	ldi	r18, 0x00	; 0
		lcd_base[5]  = lcd_base[5]  & 0xF0;
		lcd_base[10] = lcd_base[10] & 0xF0;
		lcd_base[15] = lcd_base[15] & 0xF0;
	}
	/*Writes to the display*/
	lcd_base[0]  = charCodes[number][0]<<shift | lcd_base[0] ;
     4a6:	aa 0f       	add	r26, r26
     4a8:	bb 1f       	adc	r27, r27
     4aa:	aa 0f       	add	r26, r26
     4ac:	bb 1f       	adc	r27, r27
     4ae:	a0 5f       	subi	r26, 0xF0	; 240
     4b0:	be 4f       	sbci	r27, 0xFE	; 254
     4b2:	8c 91       	ld	r24, X
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	02 2e       	mov	r0, r18
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <writeChar+0x90>
     4ba:	88 0f       	add	r24, r24
     4bc:	99 1f       	adc	r25, r25
     4be:	0a 94       	dec	r0
     4c0:	e2 f7       	brpl	.-8      	; 0x4ba <writeChar+0x8c>
     4c2:	90 81       	ld	r25, Z
     4c4:	89 2b       	or	r24, r25
     4c6:	80 83       	st	Z, r24
	lcd_base[5]  = charCodes[number][1]<<shift | lcd_base[5] ;
     4c8:	11 96       	adiw	r26, 0x01	; 1
     4ca:	8c 91       	ld	r24, X
     4cc:	11 97       	sbiw	r26, 0x01	; 1
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	02 2e       	mov	r0, r18
     4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <writeChar+0xaa>
     4d4:	88 0f       	add	r24, r24
     4d6:	99 1f       	adc	r25, r25
     4d8:	0a 94       	dec	r0
     4da:	e2 f7       	brpl	.-8      	; 0x4d4 <writeChar+0xa6>
     4dc:	95 81       	ldd	r25, Z+5	; 0x05
     4de:	89 2b       	or	r24, r25
     4e0:	85 83       	std	Z+5, r24	; 0x05
	lcd_base[10] = charCodes[number][2]<<shift | lcd_base[10];
     4e2:	12 96       	adiw	r26, 0x02	; 2
     4e4:	8c 91       	ld	r24, X
     4e6:	12 97       	sbiw	r26, 0x02	; 2
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	02 2e       	mov	r0, r18
     4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <writeChar+0xc4>
     4ee:	88 0f       	add	r24, r24
     4f0:	99 1f       	adc	r25, r25
     4f2:	0a 94       	dec	r0
     4f4:	e2 f7       	brpl	.-8      	; 0x4ee <writeChar+0xc0>
     4f6:	92 85       	ldd	r25, Z+10	; 0x0a
     4f8:	89 2b       	or	r24, r25
     4fa:	82 87       	std	Z+10, r24	; 0x0a
	lcd_base[15] = charCodes[number][3]<<shift | lcd_base[15];
     4fc:	13 96       	adiw	r26, 0x03	; 3
     4fe:	8c 91       	ld	r24, X
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	02 c0       	rjmp	.+4      	; 0x508 <__stack+0x9>
     504:	88 0f       	add	r24, r24
     506:	99 1f       	adc	r25, r25
     508:	2a 95       	dec	r18
     50a:	e2 f7       	brpl	.-8      	; 0x504 <__stack+0x5>
     50c:	97 85       	ldd	r25, Z+15	; 0x0f
     50e:	89 2b       	or	r24, r25
     510:	87 87       	std	Z+15, r24	; 0x0f
     512:	08 95       	ret

00000514 <printAt>:
}
	
int printAt(LCD_Driver *self, const int map) {
     514:	ef 92       	push	r14
     516:	ff 92       	push	r15
     518:	0f 93       	push	r16
     51a:	1f 93       	push	r17
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
	union PrintPun p = {.map = map};
	int pp;
	pp = p.args.pos;
     520:	c6 2f       	mov	r28, r22
     522:	cc 1f       	adc	r28, r28
     524:	cc 27       	eor	r28, r28
     526:	cc 1f       	adc	r28, r28
     528:	73 70       	andi	r23, 0x03	; 3
     52a:	77 0f       	add	r23, r23
     52c:	7c 2b       	or	r23, r28
     52e:	c7 2f       	mov	r28, r23
     530:	d0 e0       	ldi	r29, 0x00	; 0
	int num = p.args.num;
     532:	6f 77       	andi	r22, 0x7F	; 127
     534:	06 2f       	mov	r16, r22
     536:	10 e0       	ldi	r17, 0x00	; 0
	writeChar( (num % 100) / 10 + '0', pp);
     538:	c8 01       	movw	r24, r16
     53a:	64 e6       	ldi	r22, 0x64	; 100
     53c:	70 e0       	ldi	r23, 0x00	; 0
     53e:	0e 94 16 11 	call	0x222c	; 0x222c <__divmodhi4>
     542:	0f 2e       	mov	r0, r31
     544:	fa e0       	ldi	r31, 0x0A	; 10
     546:	ef 2e       	mov	r14, r31
     548:	f1 2c       	mov	r15, r1
     54a:	f0 2d       	mov	r31, r0
     54c:	b7 01       	movw	r22, r14
     54e:	0e 94 16 11 	call	0x222c	; 0x222c <__divmodhi4>
     552:	86 2f       	mov	r24, r22
     554:	be 01       	movw	r22, r28
     556:	80 5d       	subi	r24, 0xD0	; 208
     558:	0e 94 17 02 	call	0x42e	; 0x42e <writeChar>
	pp++;
     55c:	21 96       	adiw	r28, 0x01	; 1
	writeChar( num % 10 + '0', pp);
     55e:	c8 01       	movw	r24, r16
     560:	b7 01       	movw	r22, r14
     562:	0e 94 16 11 	call	0x222c	; 0x222c <__divmodhi4>
     566:	be 01       	movw	r22, r28
     568:	80 5d       	subi	r24, 0xD0	; 208
     56a:	0e 94 17 02 	call	0x42e	; 0x42e <writeChar>
	
	return 0;
}
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	1f 91       	pop	r17
     578:	0f 91       	pop	r16
     57a:	ff 90       	pop	r15
     57c:	ef 90       	pop	r14
     57e:	08 95       	ret

00000580 <main>:
#include "InteruptHandler.h"



int main(void)
{    
     580:	cf 93       	push	r28
     582:	df 93       	push	r29
     584:	cd b7       	in	r28, 0x3d	; 61
     586:	de b7       	in	r29, 0x3e	; 62
     588:	c0 54       	subi	r28, 0x40	; 64
     58a:	d1 09       	sbc	r29, r1
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	f8 94       	cli
     590:	de bf       	out	0x3e, r29	; 62
     592:	0f be       	out	0x3f, r0	; 63
     594:	cd bf       	out	0x3d, r28	; 61
	INIT();
     596:	0e 94 0e 02 	call	0x41c	; 0x41c <INIT>
	PulseController pulseController = initPulseController();
     59a:	1a 82       	std	Y+2, r1	; 0x02
     59c:	19 82       	std	Y+1, r1	; 0x01
     59e:	1c 82       	std	Y+4, r1	; 0x04
     5a0:	1b 82       	std	Y+3, r1	; 0x03
	LCD_Driver display = initLCD_Driver();
     5a2:	1e 82       	std	Y+6, r1	; 0x06
     5a4:	1d 82       	std	Y+5, r1	; 0x05
     5a6:	18 86       	std	Y+8, r1	; 0x08
     5a8:	1f 82       	std	Y+7, r1	; 0x07
	PulseGenerator pulseLeft = initPulseGenerator(0, 1, 1, &pulseController, &display);
     5aa:	1a 86       	std	Y+10, r1	; 0x0a
     5ac:	19 86       	std	Y+9, r1	; 0x09
     5ae:	1c 86       	std	Y+12, r1	; 0x0c
     5b0:	1b 86       	std	Y+11, r1	; 0x0b
     5b2:	1e 86       	std	Y+14, r1	; 0x0e
     5b4:	1d 86       	std	Y+13, r1	; 0x0d
     5b6:	18 8a       	std	Y+16, r1	; 0x10
     5b8:	1f 86       	std	Y+15, r1	; 0x0f
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	9a 8b       	std	Y+18, r25	; 0x12
     5c0:	89 8b       	std	Y+17, r24	; 0x11
     5c2:	9c 8b       	std	Y+20, r25	; 0x14
     5c4:	8b 8b       	std	Y+19, r24	; 0x13
     5c6:	9e 01       	movw	r18, r28
     5c8:	2f 5f       	subi	r18, 0xFF	; 255
     5ca:	3f 4f       	sbci	r19, 0xFF	; 255
     5cc:	3e 8b       	std	Y+22, r19	; 0x16
     5ce:	2d 8b       	std	Y+21, r18	; 0x15
     5d0:	ce 01       	movw	r24, r28
     5d2:	05 96       	adiw	r24, 0x05	; 5
     5d4:	98 8f       	std	Y+24, r25	; 0x18
     5d6:	8f 8b       	std	Y+23, r24	; 0x17
	PulseGenerator pulseRight = initPulseGenerator(0, 4, 3, &pulseController, &display);
     5d8:	1a 8e       	std	Y+26, r1	; 0x1a
     5da:	19 8e       	std	Y+25, r1	; 0x19
     5dc:	1c 8e       	std	Y+28, r1	; 0x1c
     5de:	1b 8e       	std	Y+27, r1	; 0x1b
     5e0:	1e 8e       	std	Y+30, r1	; 0x1e
     5e2:	1d 8e       	std	Y+29, r1	; 0x1d
     5e4:	18 a2       	std	Y+32, r1	; 0x20
     5e6:	1f 8e       	std	Y+31, r1	; 0x1f
     5e8:	44 e0       	ldi	r20, 0x04	; 4
     5ea:	50 e0       	ldi	r21, 0x00	; 0
     5ec:	5a a3       	std	Y+34, r21	; 0x22
     5ee:	49 a3       	std	Y+33, r20	; 0x21
     5f0:	43 e0       	ldi	r20, 0x03	; 3
     5f2:	50 e0       	ldi	r21, 0x00	; 0
     5f4:	5c a3       	std	Y+36, r21	; 0x24
     5f6:	4b a3       	std	Y+35, r20	; 0x23
     5f8:	3e a3       	std	Y+38, r19	; 0x26
     5fa:	2d a3       	std	Y+37, r18	; 0x25
     5fc:	98 a7       	std	Y+40, r25	; 0x28
     5fe:	8f a3       	std	Y+39, r24	; 0x27
	GUI gui = initGUI(&pulseLeft, &pulseRight);
     600:	1a a6       	std	Y+42, r1	; 0x2a
     602:	19 a6       	std	Y+41, r1	; 0x29
     604:	1c a6       	std	Y+44, r1	; 0x2c
     606:	1b a6       	std	Y+43, r1	; 0x2b
     608:	1d a6       	std	Y+45, r1	; 0x2d
     60a:	04 96       	adiw	r24, 0x04	; 4
     60c:	9f a7       	std	Y+47, r25	; 0x2f
     60e:	8e a7       	std	Y+46, r24	; 0x2e
     610:	40 96       	adiw	r24, 0x10	; 16
     612:	99 ab       	std	Y+49, r25	; 0x31
     614:	88 ab       	std	Y+48, r24	; 0x30
	Joystick joy = initJoystick(&gui);
     616:	fe 01       	movw	r30, r28
     618:	f2 96       	adiw	r30, 0x32	; 50
     61a:	88 e0       	ldi	r24, 0x08	; 8
     61c:	df 01       	movw	r26, r30
     61e:	1d 92       	st	X+, r1
     620:	8a 95       	dec	r24
     622:	e9 f7       	brne	.-6      	; 0x61e <main+0x9e>
     624:	ce 01       	movw	r24, r28
     626:	89 96       	adiw	r24, 0x29	; 41
     628:	9f ab       	std	Y+55, r25	; 0x37
     62a:	8e ab       	std	Y+54, r24	; 0x36
	InterruptHandler inter = initInterruptHandler(&joy);
     62c:	1b ae       	std	Y+59, r1	; 0x3b
     62e:	1a ae       	std	Y+58, r1	; 0x3a
     630:	1d ae       	std	Y+61, r1	; 0x3d
     632:	1c ae       	std	Y+60, r1	; 0x3c
     634:	ff af       	std	Y+63, r31	; 0x3f
     636:	ee af       	std	Y+62, r30	; 0x3e
     638:	21 96       	adiw	r28, 0x01	; 1
     63a:	1f ae       	std	Y+63, r1	; 0x3f
     63c:	21 97       	sbiw	r28, 0x01	; 1
	INSTALL(&inter, Switch, IRQ_PCINT0);
     63e:	41 e0       	ldi	r20, 0x01	; 1
     640:	6d e4       	ldi	r22, 0x4D	; 77
     642:	70 e0       	ldi	r23, 0x00	; 0
     644:	41 96       	adiw	r24, 0x11	; 17
     646:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <install>
	INSTALL(&inter, Change, IRQ_PCINT1);
     64a:	42 e0       	ldi	r20, 0x02	; 2
     64c:	65 e7       	ldi	r22, 0x75	; 117
     64e:	70 e0       	ldi	r23, 0x00	; 0
     650:	ce 01       	movw	r24, r28
     652:	ca 96       	adiw	r24, 0x3a	; 58
     654:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <install>
	return TINYTIMBER(NULL, NULL, NULL);
     658:	40 e0       	ldi	r20, 0x00	; 0
     65a:	50 e0       	ldi	r21, 0x00	; 0
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	70 e0       	ldi	r23, 0x00	; 0
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	0e 94 ff 10 	call	0x21fe	; 0x21fe <tinytimber>
     668:	c0 5c       	subi	r28, 0xC0	; 192
     66a:	df 4f       	sbci	r29, 0xFF	; 255
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	f8 94       	cli
     670:	de bf       	out	0x3e, r29	; 62
     672:	0f be       	out	0x3f, r0	; 63
     674:	cd bf       	out	0x3d, r28	; 61
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	08 95       	ret

0000067c <sendSignal>:
#include "PulseController.h"
#include <avr/io.h>
#include "LCD_Driver.h"

int sendSignal(PulseController *self, int pin){
	if(pin == 1){
     67c:	61 30       	cpi	r22, 0x01	; 1
     67e:	71 05       	cpc	r23, r1
     680:	29 f4       	brne	.+10     	; 0x68c <sendSignal+0x10>
		PORTE ^= (1 << PE4);
     682:	9e b1       	in	r25, 0x0e	; 14
     684:	80 e1       	ldi	r24, 0x10	; 16
     686:	89 27       	eor	r24, r25
     688:	8e b9       	out	0x0e, r24	; 14
     68a:	07 c0       	rjmp	.+14     	; 0x69a <sendSignal+0x1e>
		}else if(pin == 3){
     68c:	63 30       	cpi	r22, 0x03	; 3
     68e:	71 05       	cpc	r23, r1
     690:	21 f4       	brne	.+8      	; 0x69a <sendSignal+0x1e>
		PORTE ^= (1 << PE6);
     692:	9e b1       	in	r25, 0x0e	; 14
     694:	80 e4       	ldi	r24, 0x40	; 64
     696:	89 27       	eor	r24, r25
     698:	8e b9       	out	0x0e, r24	; 14
	}
	
	//LCDDR18 ^= 1;
	return 0;
}
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	08 95       	ret

000006a0 <setLow>:

int setLow(PulseController *self, int pin){
	if(pin == 1){
     6a0:	61 30       	cpi	r22, 0x01	; 1
     6a2:	71 05       	cpc	r23, r1
     6a4:	11 f4       	brne	.+4      	; 0x6aa <setLow+0xa>
		PORTE = (0 << PE4);
     6a6:	1e b8       	out	0x0e, r1	; 14
     6a8:	04 c0       	rjmp	.+8      	; 0x6b2 <setLow+0x12>
		}else if(pin == 3){
     6aa:	63 30       	cpi	r22, 0x03	; 3
     6ac:	71 05       	cpc	r23, r1
     6ae:	09 f4       	brne	.+2      	; 0x6b2 <setLow+0x12>
		PORTE = (0 << PE6);
     6b0:	1e b8       	out	0x0e, r1	; 14
	}
	return 0;
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	08 95       	ret

000006b8 <generator>:
	ASYNC(self->display, printAt, PACK_PRINT(self->currentFreq, self->pos));
	
	return 0;
}

int generator(PulseGenerator *self, int unused){
     6b8:	cf 92       	push	r12
     6ba:	df 92       	push	r13
     6bc:	ef 92       	push	r14
     6be:	ff 92       	push	r15
     6c0:	0f 93       	push	r16
     6c2:	1f 93       	push	r17
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
	if(self->currentFreq){
     6c8:	fc 01       	movw	r30, r24
     6ca:	24 81       	ldd	r18, Z+4	; 0x04
     6cc:	35 81       	ldd	r19, Z+5	; 0x05
     6ce:	23 2b       	or	r18, r19
     6d0:	f1 f1       	breq	.+124    	; 0x74e <generator+0x96>
     6d2:	ec 01       	movw	r28, r24
		ASYNC(self->outPut, sendSignal, self->pin);
     6d4:	04 85       	ldd	r16, Z+12	; 0x0c
     6d6:	15 85       	ldd	r17, Z+13	; 0x0d
     6d8:	c2 84       	ldd	r12, Z+10	; 0x0a
     6da:	d3 84       	ldd	r13, Z+11	; 0x0b
     6dc:	0f 2e       	mov	r0, r31
     6de:	fe e3       	ldi	r31, 0x3E	; 62
     6e0:	ef 2e       	mov	r14, r31
     6e2:	f3 e0       	ldi	r31, 0x03	; 3
     6e4:	ff 2e       	mov	r15, r31
     6e6:	f0 2d       	mov	r31, r0
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	a9 01       	movw	r20, r18
     6ee:	60 e0       	ldi	r22, 0x00	; 0
     6f0:	70 e0       	ldi	r23, 0x00	; 0
     6f2:	cb 01       	movw	r24, r22
     6f4:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <async>
		int fre = (500/self->currentFreq);
     6f8:	6c 81       	ldd	r22, Y+4	; 0x04
     6fa:	7d 81       	ldd	r23, Y+5	; 0x05
     6fc:	84 ef       	ldi	r24, 0xF4	; 244
     6fe:	91 e0       	ldi	r25, 0x01	; 1
     700:	0e 94 16 11 	call	0x222c	; 0x222c <__divmodhi4>
		AFTER(MSEC(fre), self, generator, 0);
     704:	2d e7       	ldi	r18, 0x7D	; 125
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	db 01       	movw	r26, r22
     70a:	0e 94 2a 11 	call	0x2254	; 0x2254 <__usmulhisi3>
     70e:	8b 01       	movw	r16, r22
     710:	9c 01       	movw	r18, r24
     712:	99 23       	and	r25, r25
     714:	24 f4       	brge	.+8      	; 0x71e <generator+0x66>
     716:	0d 5f       	subi	r16, 0xFD	; 253
     718:	1f 4f       	sbci	r17, 0xFF	; 255
     71a:	2f 4f       	sbci	r18, 0xFF	; 255
     71c:	3f 4f       	sbci	r19, 0xFF	; 255
     71e:	c9 01       	movw	r24, r18
     720:	b8 01       	movw	r22, r16
     722:	95 95       	asr	r25
     724:	87 95       	ror	r24
     726:	77 95       	ror	r23
     728:	67 95       	ror	r22
     72a:	95 95       	asr	r25
     72c:	87 95       	ror	r24
     72e:	77 95       	ror	r23
     730:	67 95       	ror	r22
     732:	c1 2c       	mov	r12, r1
     734:	d1 2c       	mov	r13, r1
     736:	0f 2e       	mov	r0, r31
     738:	fc e5       	ldi	r31, 0x5C	; 92
     73a:	ef 2e       	mov	r14, r31
     73c:	f3 e0       	ldi	r31, 0x03	; 3
     73e:	ff 2e       	mov	r15, r31
     740:	f0 2d       	mov	r31, r0
     742:	8e 01       	movw	r16, r28
     744:	20 e0       	ldi	r18, 0x00	; 0
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	a9 01       	movw	r20, r18
     74a:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <async>
	}

	return 0;
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	1f 91       	pop	r17
     758:	0f 91       	pop	r16
     75a:	ff 90       	pop	r15
     75c:	ef 90       	pop	r14
     75e:	df 90       	pop	r13
     760:	cf 90       	pop	r12
     762:	08 95       	ret

00000764 <increase>:
#include "PulseGenerator.h"

int increase(PulseGenerator *self, int unused){
     764:	cf 92       	push	r12
     766:	df 92       	push	r13
     768:	ef 92       	push	r14
     76a:	ff 92       	push	r15
     76c:	0f 93       	push	r16
     76e:	1f 93       	push	r17
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	ec 01       	movw	r28, r24
	if (!(self->currentFreq >= 99)){
     776:	cc 80       	ldd	r12, Y+4	; 0x04
     778:	dd 80       	ldd	r13, Y+5	; 0x05
     77a:	83 e6       	ldi	r24, 0x63	; 99
     77c:	c8 16       	cp	r12, r24
     77e:	d1 04       	cpc	r13, r1
     780:	fc f4       	brge	.+62     	; 0x7c0 <increase+0x5c>
		self->currentFreq += 1;
     782:	c6 01       	movw	r24, r12
     784:	01 96       	adiw	r24, 0x01	; 1
     786:	9d 83       	std	Y+5, r25	; 0x05
     788:	8c 83       	std	Y+4, r24	; 0x04
		ASYNC(self->display, printAt, PACK_PRINT(self->currentFreq, self->pos));
     78a:	d8 84       	ldd	r13, Y+8	; 0x08
     78c:	cd 2c       	mov	r12, r13
     78e:	c7 94       	ror	r12
     790:	cc 24       	eor	r12, r12
     792:	c7 94       	ror	r12
     794:	8f 77       	andi	r24, 0x7F	; 127
     796:	c8 2a       	or	r12, r24
     798:	8d 2d       	mov	r24, r13
     79a:	86 95       	lsr	r24
     79c:	83 70       	andi	r24, 0x03	; 3
     79e:	d8 2e       	mov	r13, r24
     7a0:	0e 85       	ldd	r16, Y+14	; 0x0e
     7a2:	1f 85       	ldd	r17, Y+15	; 0x0f
     7a4:	0f 2e       	mov	r0, r31
     7a6:	fa e8       	ldi	r31, 0x8A	; 138
     7a8:	ef 2e       	mov	r14, r31
     7aa:	f2 e0       	ldi	r31, 0x02	; 2
     7ac:	ff 2e       	mov	r15, r31
     7ae:	f0 2d       	mov	r31, r0
     7b0:	20 e0       	ldi	r18, 0x00	; 0
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	a9 01       	movw	r20, r18
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	cb 01       	movw	r24, r22
     7bc:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <async>
	}
	if(self->currentFreq == 1){
     7c0:	8c 81       	ldd	r24, Y+4	; 0x04
     7c2:	9d 81       	ldd	r25, Y+5	; 0x05
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	89 f4       	brne	.+34     	; 0x7ea <increase+0x86>
		ASYNC(self, generator, 0);
     7c8:	c1 2c       	mov	r12, r1
     7ca:	d1 2c       	mov	r13, r1
     7cc:	0f 2e       	mov	r0, r31
     7ce:	fc e5       	ldi	r31, 0x5C	; 92
     7d0:	ef 2e       	mov	r14, r31
     7d2:	f3 e0       	ldi	r31, 0x03	; 3
     7d4:	ff 2e       	mov	r15, r31
     7d6:	f0 2d       	mov	r31, r0
     7d8:	8e 01       	movw	r16, r28
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	a9 01       	movw	r20, r18
     7e0:	60 e0       	ldi	r22, 0x00	; 0
     7e2:	70 e0       	ldi	r23, 0x00	; 0
     7e4:	cb 01       	movw	r24, r22
     7e6:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <async>
	}
	return 0;
}
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	1f 91       	pop	r17
     7f4:	0f 91       	pop	r16
     7f6:	ff 90       	pop	r15
     7f8:	ef 90       	pop	r14
     7fa:	df 90       	pop	r13
     7fc:	cf 90       	pop	r12
     7fe:	08 95       	ret

00000800 <decrease>:

int decrease(PulseGenerator *self, int unused){
     800:	cf 92       	push	r12
     802:	df 92       	push	r13
     804:	ef 92       	push	r14
     806:	ff 92       	push	r15
     808:	0f 93       	push	r16
     80a:	1f 93       	push	r17
     80c:	cf 93       	push	r28
     80e:	df 93       	push	r29
     810:	ec 01       	movw	r28, r24
	if (self->currentFreq > 0) self->currentFreq -= 1;
     812:	8c 81       	ldd	r24, Y+4	; 0x04
     814:	9d 81       	ldd	r25, Y+5	; 0x05
     816:	18 16       	cp	r1, r24
     818:	19 06       	cpc	r1, r25
     81a:	1c f4       	brge	.+6      	; 0x822 <decrease+0x22>
     81c:	01 97       	sbiw	r24, 0x01	; 1
     81e:	9d 83       	std	Y+5, r25	; 0x05
     820:	8c 83       	std	Y+4, r24	; 0x04
	
	if(self->currentFreq == 0){
     822:	8c 81       	ldd	r24, Y+4	; 0x04
     824:	9d 81       	ldd	r25, Y+5	; 0x05
     826:	89 2b       	or	r24, r25
     828:	89 f4       	brne	.+34     	; 0x84c <decrease+0x4c>
		ASYNC(self, setLow, self->pin);
     82a:	ca 84       	ldd	r12, Y+10	; 0x0a
     82c:	db 84       	ldd	r13, Y+11	; 0x0b
     82e:	0f 2e       	mov	r0, r31
     830:	f0 e5       	ldi	r31, 0x50	; 80
     832:	ef 2e       	mov	r14, r31
     834:	f3 e0       	ldi	r31, 0x03	; 3
     836:	ff 2e       	mov	r15, r31
     838:	f0 2d       	mov	r31, r0
     83a:	8e 01       	movw	r16, r28
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	a9 01       	movw	r20, r18
     842:	60 e0       	ldi	r22, 0x00	; 0
     844:	70 e0       	ldi	r23, 0x00	; 0
     846:	cb 01       	movw	r24, r22
     848:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <async>
		
	}
	ASYNC(self->display, printAt, PACK_PRINT(self->currentFreq, self->pos));
     84c:	9c 81       	ldd	r25, Y+4	; 0x04
     84e:	d8 84       	ldd	r13, Y+8	; 0x08
     850:	8d 2d       	mov	r24, r13
     852:	87 95       	ror	r24
     854:	88 27       	eor	r24, r24
     856:	87 95       	ror	r24
     858:	9f 77       	andi	r25, 0x7F	; 127
     85a:	c9 2e       	mov	r12, r25
     85c:	c8 2a       	or	r12, r24
     85e:	8d 2d       	mov	r24, r13
     860:	86 95       	lsr	r24
     862:	83 70       	andi	r24, 0x03	; 3
     864:	d8 2e       	mov	r13, r24
     866:	0e 85       	ldd	r16, Y+14	; 0x0e
     868:	1f 85       	ldd	r17, Y+15	; 0x0f
     86a:	0f 2e       	mov	r0, r31
     86c:	fa e8       	ldi	r31, 0x8A	; 138
     86e:	ef 2e       	mov	r14, r31
     870:	f2 e0       	ldi	r31, 0x02	; 2
     872:	ff 2e       	mov	r15, r31
     874:	f0 2d       	mov	r31, r0
     876:	20 e0       	ldi	r18, 0x00	; 0
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	a9 01       	movw	r20, r18
     87c:	60 e0       	ldi	r22, 0x00	; 0
     87e:	70 e0       	ldi	r23, 0x00	; 0
     880:	cb 01       	movw	r24, r22
     882:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <async>
	
	return 0;
}
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	1f 91       	pop	r17
     890:	0f 91       	pop	r16
     892:	ff 90       	pop	r15
     894:	ef 90       	pop	r14
     896:	df 90       	pop	r13
     898:	cf 90       	pop	r12
     89a:	08 95       	ret

0000089c <reset>:

int reset(PulseGenerator *self, int unused){
     89c:	cf 92       	push	r12
     89e:	df 92       	push	r13
     8a0:	ef 92       	push	r14
     8a2:	ff 92       	push	r15
     8a4:	0f 93       	push	r16
     8a6:	1f 93       	push	r17
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	ec 01       	movw	r28, r24
	if (self->currentFreq == 0){
     8ae:	8c 81       	ldd	r24, Y+4	; 0x04
     8b0:	9d 81       	ldd	r25, Y+5	; 0x05
     8b2:	00 97       	sbiw	r24, 0x00	; 0
     8b4:	c1 f4       	brne	.+48     	; 0x8e6 <reset+0x4a>
		self->currentFreq = self->lastFreq;
     8b6:	8e 81       	ldd	r24, Y+6	; 0x06
     8b8:	9f 81       	ldd	r25, Y+7	; 0x07
     8ba:	9d 83       	std	Y+5, r25	; 0x05
     8bc:	8c 83       	std	Y+4, r24	; 0x04
		if(self->currentFreq != 0) ASYNC(self, generator, 0);
     8be:	89 2b       	or	r24, r25
     8c0:	39 f1       	breq	.+78     	; 0x910 <reset+0x74>
     8c2:	c1 2c       	mov	r12, r1
     8c4:	d1 2c       	mov	r13, r1
     8c6:	0f 2e       	mov	r0, r31
     8c8:	fc e5       	ldi	r31, 0x5C	; 92
     8ca:	ef 2e       	mov	r14, r31
     8cc:	f3 e0       	ldi	r31, 0x03	; 3
     8ce:	ff 2e       	mov	r15, r31
     8d0:	f0 2d       	mov	r31, r0
     8d2:	8e 01       	movw	r16, r28
     8d4:	20 e0       	ldi	r18, 0x00	; 0
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	a9 01       	movw	r20, r18
     8da:	60 e0       	ldi	r22, 0x00	; 0
     8dc:	70 e0       	ldi	r23, 0x00	; 0
     8de:	cb 01       	movw	r24, r22
     8e0:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <async>
     8e4:	15 c0       	rjmp	.+42     	; 0x910 <reset+0x74>
	}
	else{
		self->lastFreq = self->currentFreq;
     8e6:	9f 83       	std	Y+7, r25	; 0x07
     8e8:	8e 83       	std	Y+6, r24	; 0x06
		self->currentFreq = 0;
     8ea:	1d 82       	std	Y+5, r1	; 0x05
     8ec:	1c 82       	std	Y+4, r1	; 0x04
		ASYNC(self, setLow, self->pin);
     8ee:	ca 84       	ldd	r12, Y+10	; 0x0a
     8f0:	db 84       	ldd	r13, Y+11	; 0x0b
     8f2:	0f 2e       	mov	r0, r31
     8f4:	f0 e5       	ldi	r31, 0x50	; 80
     8f6:	ef 2e       	mov	r14, r31
     8f8:	f3 e0       	ldi	r31, 0x03	; 3
     8fa:	ff 2e       	mov	r15, r31
     8fc:	f0 2d       	mov	r31, r0
     8fe:	8e 01       	movw	r16, r28
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	a9 01       	movw	r20, r18
     906:	60 e0       	ldi	r22, 0x00	; 0
     908:	70 e0       	ldi	r23, 0x00	; 0
     90a:	cb 01       	movw	r24, r22
     90c:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <async>
	}
	ASYNC(self->display, printAt, PACK_PRINT(self->currentFreq, self->pos));
     910:	9c 81       	ldd	r25, Y+4	; 0x04
     912:	d8 84       	ldd	r13, Y+8	; 0x08
     914:	8d 2d       	mov	r24, r13
     916:	87 95       	ror	r24
     918:	88 27       	eor	r24, r24
     91a:	87 95       	ror	r24
     91c:	9f 77       	andi	r25, 0x7F	; 127
     91e:	c9 2e       	mov	r12, r25
     920:	c8 2a       	or	r12, r24
     922:	8d 2d       	mov	r24, r13
     924:	86 95       	lsr	r24
     926:	83 70       	andi	r24, 0x03	; 3
     928:	d8 2e       	mov	r13, r24
     92a:	0e 85       	ldd	r16, Y+14	; 0x0e
     92c:	1f 85       	ldd	r17, Y+15	; 0x0f
     92e:	0f 2e       	mov	r0, r31
     930:	fa e8       	ldi	r31, 0x8A	; 138
     932:	ef 2e       	mov	r14, r31
     934:	f2 e0       	ldi	r31, 0x02	; 2
     936:	ff 2e       	mov	r15, r31
     938:	f0 2d       	mov	r31, r0
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	a9 01       	movw	r20, r18
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	cb 01       	movw	r24, r22
     946:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <async>
	
	return 0;
}
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	1f 91       	pop	r17
     954:	0f 91       	pop	r16
     956:	ff 90       	pop	r15
     958:	ef 90       	pop	r14
     95a:	df 90       	pop	r13
     95c:	cf 90       	pop	r12
     95e:	08 95       	ret

00000960 <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
     964:	00 d0       	rcall	.+0      	; 0x966 <initialize+0x6>
     966:	00 d0       	rcall	.+0      	; 0x968 <initialize+0x8>
     968:	cd b7       	in	r28, 0x3d	; 61
     96a:	de b7       	in	r29, 0x3e	; 62
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	18 c0       	rjmp	.+48     	; 0x9a2 <initialize+0x42>
     972:	ac 01       	movw	r20, r24
     974:	4f 5f       	subi	r20, 0xFF	; 255
     976:	5f 4f       	sbci	r21, 0xFF	; 255
     978:	9a 01       	movw	r18, r20
     97a:	22 95       	swap	r18
     97c:	32 95       	swap	r19
     97e:	30 7f       	andi	r19, 0xF0	; 240
     980:	32 27       	eor	r19, r18
     982:	20 7f       	andi	r18, 0xF0	; 240
     984:	32 27       	eor	r19, r18
     986:	25 5e       	subi	r18, 0xE5	; 229
     988:	3d 4f       	sbci	r19, 0xFD	; 253
     98a:	82 95       	swap	r24
     98c:	92 95       	swap	r25
     98e:	90 7f       	andi	r25, 0xF0	; 240
     990:	98 27       	eor	r25, r24
     992:	80 7f       	andi	r24, 0xF0	; 240
     994:	98 27       	eor	r25, r24
     996:	fc 01       	movw	r30, r24
     998:	e5 5e       	subi	r30, 0xE5	; 229
     99a:	fd 4f       	sbci	r31, 0xFD	; 253
     99c:	31 83       	std	Z+1, r19	; 0x01
     99e:	20 83       	st	Z, r18
     9a0:	ca 01       	movw	r24, r20
     9a2:	8e 30       	cpi	r24, 0x0E	; 14
     9a4:	91 05       	cpc	r25, r1
     9a6:	2c f3       	brlt	.-54     	; 0x972 <initialize+0x12>
     9a8:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <messages+0xe1>
     9ac:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <messages+0xe0>
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	15 c0       	rjmp	.+42     	; 0x9e0 <initialize+0x80>
     9b6:	ac 01       	movw	r20, r24
     9b8:	4f 5f       	subi	r20, 0xFF	; 255
     9ba:	5f 4f       	sbci	r21, 0xFF	; 255
     9bc:	6d e1       	ldi	r22, 0x1D	; 29
     9be:	64 9f       	mul	r22, r20
     9c0:	90 01       	movw	r18, r0
     9c2:	65 9f       	mul	r22, r21
     9c4:	30 0d       	add	r19, r0
     9c6:	11 24       	eor	r1, r1
     9c8:	2a 59       	subi	r18, 0x9A	; 154
     9ca:	3e 4f       	sbci	r19, 0xFE	; 254
     9cc:	68 9f       	mul	r22, r24
     9ce:	f0 01       	movw	r30, r0
     9d0:	69 9f       	mul	r22, r25
     9d2:	f0 0d       	add	r31, r0
     9d4:	11 24       	eor	r1, r1
     9d6:	ea 59       	subi	r30, 0x9A	; 154
     9d8:	fe 4f       	sbci	r31, 0xFE	; 254
     9da:	31 83       	std	Z+1, r19	; 0x01
     9dc:	20 83       	st	Z, r18
     9de:	ca 01       	movw	r24, r20
     9e0:	83 30       	cpi	r24, 0x03	; 3
     9e2:	91 05       	cpc	r25, r1
     9e4:	44 f3       	brlt	.-48     	; 0x9b6 <initialize+0x56>
     9e6:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <threads+0x58>
     9ea:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <threads+0x57>
     9ee:	1a 82       	std	Y+2, r1	; 0x02
     9f0:	19 82       	std	Y+1, r1	; 0x01
     9f2:	32 c0       	rjmp	.+100    	; 0xa58 <initialize+0xf8>
     9f4:	2d e1       	ldi	r18, 0x1D	; 29
     9f6:	49 81       	ldd	r20, Y+1	; 0x01
     9f8:	5a 81       	ldd	r21, Y+2	; 0x02
     9fa:	24 9f       	mul	r18, r20
     9fc:	c0 01       	movw	r24, r0
     9fe:	25 9f       	mul	r18, r21
     a00:	90 0d       	add	r25, r0
     a02:	11 24       	eor	r1, r1
     a04:	fc 01       	movw	r30, r24
     a06:	e4 59       	subi	r30, 0x94	; 148
     a08:	fe 4f       	sbci	r31, 0xFE	; 254
     a0a:	fc 83       	std	Y+4, r31	; 0x04
     a0c:	eb 83       	std	Y+3, r30	; 0x03
     a0e:	cf 01       	movw	r24, r30
     a10:	0e 94 54 11 	call	0x22a8	; 0x22a8 <setjmp>
     a14:	20 e6       	ldi	r18, 0x60	; 96
     a16:	49 81       	ldd	r20, Y+1	; 0x01
     a18:	5a 81       	ldd	r21, Y+2	; 0x02
     a1a:	24 9f       	mul	r18, r20
     a1c:	c0 01       	movw	r24, r0
     a1e:	25 9f       	mul	r18, r21
     a20:	90 0d       	add	r25, r0
     a22:	11 24       	eor	r1, r1
     a24:	89 59       	subi	r24, 0x99	; 153
     a26:	9c 4f       	sbci	r25, 0xFC	; 252
     a28:	eb 81       	ldd	r30, Y+3	; 0x03
     a2a:	fc 81       	ldd	r31, Y+4	; 0x04
     a2c:	91 8b       	std	Z+17, r25	; 0x11
     a2e:	80 8b       	std	Z+16, r24	; 0x10
     a30:	93 8b       	std	Z+19, r25	; 0x13
     a32:	82 8b       	std	Z+18, r24	; 0x12
     a34:	8c e8       	ldi	r24, 0x8C	; 140
     a36:	90 e1       	ldi	r25, 0x10	; 16
     a38:	96 8b       	std	Z+22, r25	; 0x16
     a3a:	85 8b       	std	Z+21, r24	; 0x15
     a3c:	8d e1       	ldi	r24, 0x1D	; 29
     a3e:	84 9f       	mul	r24, r20
     a40:	f0 01       	movw	r30, r0
     a42:	85 9f       	mul	r24, r21
     a44:	f0 0d       	add	r31, r0
     a46:	11 24       	eor	r1, r1
     a48:	ea 59       	subi	r30, 0x9A	; 154
     a4a:	fe 4f       	sbci	r31, 0xFE	; 254
     a4c:	15 82       	std	Z+5, r1	; 0x05
     a4e:	14 82       	std	Z+4, r1	; 0x04
     a50:	4f 5f       	subi	r20, 0xFF	; 255
     a52:	5f 4f       	sbci	r21, 0xFF	; 255
     a54:	5a 83       	std	Y+2, r21	; 0x02
     a56:	49 83       	std	Y+1, r20	; 0x01
     a58:	29 81       	ldd	r18, Y+1	; 0x01
     a5a:	3a 81       	ldd	r19, Y+2	; 0x02
     a5c:	24 30       	cpi	r18, 0x04	; 4
     a5e:	31 05       	cpc	r19, r1
     a60:	4c f2       	brlt	.-110    	; 0x9f4 <initialize+0x94>
     a62:	ee ef       	ldi	r30, 0xFE	; 254
     a64:	f1 e0       	ldi	r31, 0x01	; 1
     a66:	11 82       	std	Z+1, r1	; 0x01
     a68:	10 82       	st	Z, r1
     a6a:	15 82       	std	Z+5, r1	; 0x05
     a6c:	14 82       	std	Z+4, r1	; 0x04
     a6e:	13 82       	std	Z+3, r1	; 0x03
     a70:	12 82       	std	Z+2, r1	; 0x02
     a72:	e1 e6       	ldi	r30, 0x61	; 97
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	80 e8       	ldi	r24, 0x80	; 128
     a78:	80 83       	st	Z, r24
     a7a:	10 82       	st	Z, r1
     a7c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a80:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a84:	84 e0       	ldi	r24, 0x04	; 4
     a86:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     a90:	0f 90       	pop	r0
     a92:	0f 90       	pop	r0
     a94:	0f 90       	pop	r0
     a96:	0f 90       	pop	r0
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	08 95       	ret

00000a9e <dispatch>:
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	00 d0       	rcall	.+0      	; 0xaa4 <dispatch+0x6>
     aa4:	cd b7       	in	r28, 0x3d	; 61
     aa6:	de b7       	in	r29, 0x3e	; 62
     aa8:	9a 83       	std	Y+2, r25	; 0x02
     aaa:	89 83       	std	Y+1, r24	; 0x01
     aac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     ab0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     ab4:	06 96       	adiw	r24, 0x06	; 6
     ab6:	0e 94 54 11 	call	0x22a8	; 0x22a8 <setjmp>
     aba:	89 2b       	or	r24, r25
     abc:	59 f4       	brne	.+22     	; 0xad4 <dispatch+0x36>
     abe:	89 81       	ldd	r24, Y+1	; 0x01
     ac0:	9a 81       	ldd	r25, Y+2	; 0x02
     ac2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     ac6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     aca:	61 e0       	ldi	r22, 0x01	; 1
     acc:	70 e0       	ldi	r23, 0x00	; 0
     ace:	06 96       	adiw	r24, 0x06	; 6
     ad0:	0e 94 74 11 	call	0x22e8	; 0x22e8 <longjmp>
     ad4:	0f 90       	pop	r0
     ad6:	0f 90       	pop	r0
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	08 95       	ret

00000ade <enqueueByDeadline>:
     ade:	0f 93       	push	r16
     ae0:	1f 93       	push	r17
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
     ae6:	dc 01       	movw	r26, r24
     ae8:	cb 01       	movw	r24, r22
     aea:	eb 01       	movw	r28, r22
     aec:	e8 81       	ld	r30, Y
     aee:	f9 81       	ldd	r31, Y+1	; 0x01
     af0:	c0 e0       	ldi	r28, 0x00	; 0
     af2:	d0 e0       	ldi	r29, 0x00	; 0
     af4:	04 c0       	rjmp	.+8      	; 0xafe <enqueueByDeadline+0x20>
     af6:	ef 01       	movw	r28, r30
     af8:	01 90       	ld	r0, Z+
     afa:	f0 81       	ld	r31, Z
     afc:	e0 2d       	mov	r30, r0
     afe:	30 97       	sbiw	r30, 0x00	; 0
     b00:	79 f0       	breq	.+30     	; 0xb20 <enqueueByDeadline+0x42>
     b02:	06 81       	ldd	r16, Z+6	; 0x06
     b04:	17 81       	ldd	r17, Z+7	; 0x07
     b06:	20 85       	ldd	r18, Z+8	; 0x08
     b08:	31 85       	ldd	r19, Z+9	; 0x09
     b0a:	16 96       	adiw	r26, 0x06	; 6
     b0c:	4d 91       	ld	r20, X+
     b0e:	5d 91       	ld	r21, X+
     b10:	6d 91       	ld	r22, X+
     b12:	7c 91       	ld	r23, X
     b14:	19 97       	sbiw	r26, 0x09	; 9
     b16:	40 17       	cp	r20, r16
     b18:	51 07       	cpc	r21, r17
     b1a:	62 07       	cpc	r22, r18
     b1c:	73 07       	cpc	r23, r19
     b1e:	5c f7       	brge	.-42     	; 0xaf6 <enqueueByDeadline+0x18>
     b20:	11 96       	adiw	r26, 0x01	; 1
     b22:	fc 93       	st	X, r31
     b24:	ee 93       	st	-X, r30
     b26:	20 97       	sbiw	r28, 0x00	; 0
     b28:	21 f4       	brne	.+8      	; 0xb32 <enqueueByDeadline+0x54>
     b2a:	fc 01       	movw	r30, r24
     b2c:	b1 83       	std	Z+1, r27	; 0x01
     b2e:	a0 83       	st	Z, r26
     b30:	02 c0       	rjmp	.+4      	; 0xb36 <enqueueByDeadline+0x58>
     b32:	b9 83       	std	Y+1, r27	; 0x01
     b34:	a8 83       	st	Y, r26
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	08 95       	ret

00000b40 <enqueueByBaseline>:
     b40:	0f 93       	push	r16
     b42:	1f 93       	push	r17
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	dc 01       	movw	r26, r24
     b4a:	cb 01       	movw	r24, r22
     b4c:	eb 01       	movw	r28, r22
     b4e:	e8 81       	ld	r30, Y
     b50:	f9 81       	ldd	r31, Y+1	; 0x01
     b52:	c0 e0       	ldi	r28, 0x00	; 0
     b54:	d0 e0       	ldi	r29, 0x00	; 0
     b56:	04 c0       	rjmp	.+8      	; 0xb60 <enqueueByBaseline+0x20>
     b58:	ef 01       	movw	r28, r30
     b5a:	01 90       	ld	r0, Z+
     b5c:	f0 81       	ld	r31, Z
     b5e:	e0 2d       	mov	r30, r0
     b60:	30 97       	sbiw	r30, 0x00	; 0
     b62:	79 f0       	breq	.+30     	; 0xb82 <enqueueByBaseline+0x42>
     b64:	02 81       	ldd	r16, Z+2	; 0x02
     b66:	13 81       	ldd	r17, Z+3	; 0x03
     b68:	24 81       	ldd	r18, Z+4	; 0x04
     b6a:	35 81       	ldd	r19, Z+5	; 0x05
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	4d 91       	ld	r20, X+
     b70:	5d 91       	ld	r21, X+
     b72:	6d 91       	ld	r22, X+
     b74:	7c 91       	ld	r23, X
     b76:	15 97       	sbiw	r26, 0x05	; 5
     b78:	40 17       	cp	r20, r16
     b7a:	51 07       	cpc	r21, r17
     b7c:	62 07       	cpc	r22, r18
     b7e:	73 07       	cpc	r23, r19
     b80:	5c f7       	brge	.-42     	; 0xb58 <enqueueByBaseline+0x18>
     b82:	11 96       	adiw	r26, 0x01	; 1
     b84:	fc 93       	st	X, r31
     b86:	ee 93       	st	-X, r30
     b88:	20 97       	sbiw	r28, 0x00	; 0
     b8a:	21 f4       	brne	.+8      	; 0xb94 <enqueueByBaseline+0x54>
     b8c:	fc 01       	movw	r30, r24
     b8e:	b1 83       	std	Z+1, r27	; 0x01
     b90:	a0 83       	st	Z, r26
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <enqueueByBaseline+0x58>
     b94:	b9 83       	std	Y+1, r27	; 0x01
     b96:	a8 83       	st	Y, r26
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	08 95       	ret

00000ba2 <dequeue>:
     ba2:	dc 01       	movw	r26, r24
     ba4:	ed 91       	ld	r30, X+
     ba6:	fc 91       	ld	r31, X
     ba8:	11 97       	sbiw	r26, 0x01	; 1
     baa:	30 97       	sbiw	r30, 0x00	; 0
     bac:	59 f4       	brne	.+22     	; 0xbc4 <dequeue+0x22>
     bae:	8f ef       	ldi	r24, 0xFF	; 255
     bb0:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     bb4:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     bb8:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	83 bf       	out	0x33, r24	; 51
     bc0:	88 95       	sleep
     bc2:	fc cf       	rjmp	.-8      	; 0xbbc <dequeue+0x1a>
     bc4:	20 81       	ld	r18, Z
     bc6:	31 81       	ldd	r19, Z+1	; 0x01
     bc8:	2d 93       	st	X+, r18
     bca:	3c 93       	st	X, r19
     bcc:	cf 01       	movw	r24, r30
     bce:	08 95       	ret

00000bd0 <insert>:
     bd0:	fb 01       	movw	r30, r22
     bd2:	20 81       	ld	r18, Z
     bd4:	31 81       	ldd	r19, Z+1	; 0x01
     bd6:	fc 01       	movw	r30, r24
     bd8:	31 83       	std	Z+1, r19	; 0x01
     bda:	20 83       	st	Z, r18
     bdc:	fb 01       	movw	r30, r22
     bde:	91 83       	std	Z+1, r25	; 0x01
     be0:	80 83       	st	Z, r24
     be2:	08 95       	ret

00000be4 <push>:
     be4:	fb 01       	movw	r30, r22
     be6:	20 81       	ld	r18, Z
     be8:	31 81       	ldd	r19, Z+1	; 0x01
     bea:	fc 01       	movw	r30, r24
     bec:	31 83       	std	Z+1, r19	; 0x01
     bee:	20 83       	st	Z, r18
     bf0:	fb 01       	movw	r30, r22
     bf2:	91 83       	std	Z+1, r25	; 0x01
     bf4:	80 83       	st	Z, r24
     bf6:	08 95       	ret

00000bf8 <pop>:
     bf8:	dc 01       	movw	r26, r24
     bfa:	ed 91       	ld	r30, X+
     bfc:	fc 91       	ld	r31, X
     bfe:	11 97       	sbiw	r26, 0x01	; 1
     c00:	20 81       	ld	r18, Z
     c02:	31 81       	ldd	r19, Z+1	; 0x01
     c04:	2d 93       	st	X+, r18
     c06:	3c 93       	st	X, r19
     c08:	cf 01       	movw	r24, r30
     c0a:	08 95       	ret

00000c0c <schedule>:
     c0c:	cf 93       	push	r28
     c0e:	df 93       	push	r29
     c10:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
     c14:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
     c18:	c2 81       	ldd	r28, Z+2	; 0x02
     c1a:	d3 81       	ldd	r29, Z+3	; 0x03
     c1c:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <msgQ>
     c20:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <msgQ+0x1>
     c24:	30 97       	sbiw	r30, 0x00	; 0
     c26:	19 f1       	breq	.+70     	; 0xc6e <schedule+0x62>
     c28:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
     c2c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
     c30:	89 2b       	or	r24, r25
     c32:	e9 f0       	breq	.+58     	; 0xc6e <schedule+0x62>
     c34:	20 97       	sbiw	r28, 0x00	; 0
     c36:	69 f0       	breq	.+26     	; 0xc52 <schedule+0x46>
     c38:	86 81       	ldd	r24, Z+6	; 0x06
     c3a:	97 81       	ldd	r25, Z+7	; 0x07
     c3c:	a0 85       	ldd	r26, Z+8	; 0x08
     c3e:	b1 85       	ldd	r27, Z+9	; 0x09
     c40:	4e 81       	ldd	r20, Y+6	; 0x06
     c42:	5f 81       	ldd	r21, Y+7	; 0x07
     c44:	68 85       	ldd	r22, Y+8	; 0x08
     c46:	79 85       	ldd	r23, Y+9	; 0x09
     c48:	84 1b       	sub	r24, r20
     c4a:	95 0b       	sbc	r25, r21
     c4c:	a6 0b       	sbc	r26, r22
     c4e:	b7 0b       	sbc	r27, r23
     c50:	72 f4       	brpl	.+28     	; 0xc6e <schedule+0x62>
     c52:	84 e0       	ldi	r24, 0x04	; 4
     c54:	91 e0       	ldi	r25, 0x01	; 1
     c56:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <pop>
     c5a:	62 e0       	ldi	r22, 0x02	; 2
     c5c:	71 e0       	ldi	r23, 0x01	; 1
     c5e:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <push>
     c62:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <activeStack>
     c66:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <activeStack+0x1>
     c6a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <dispatch>
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	08 95       	ret

00000c74 <__vector_1>:
     c74:	1f 92       	push	r1
     c76:	0f 92       	push	r0
     c78:	0f b6       	in	r0, 0x3f	; 63
     c7a:	0f 92       	push	r0
     c7c:	11 24       	eor	r1, r1
     c7e:	0f 93       	push	r16
     c80:	1f 93       	push	r17
     c82:	2f 93       	push	r18
     c84:	3f 93       	push	r19
     c86:	4f 93       	push	r20
     c88:	5f 93       	push	r21
     c8a:	6f 93       	push	r22
     c8c:	7f 93       	push	r23
     c8e:	8f 93       	push	r24
     c90:	9f 93       	push	r25
     c92:	af 93       	push	r26
     c94:	bf 93       	push	r27
     c96:	ef 93       	push	r30
     c98:	ff 93       	push	r31
     c9a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
     c9e:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
     ca2:	ac 01       	movw	r20, r24
     ca4:	09 2e       	mov	r0, r25
     ca6:	00 0c       	add	r0, r0
     ca8:	66 0b       	sbc	r22, r22
     caa:	77 0b       	sbc	r23, r23
     cac:	9a 01       	movw	r18, r20
     cae:	11 27       	eor	r17, r17
     cb0:	00 27       	eor	r16, r16
     cb2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cb6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cba:	60 e0       	ldi	r22, 0x00	; 0
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	40 2b       	or	r20, r16
     cc0:	51 2b       	or	r21, r17
     cc2:	62 2b       	or	r22, r18
     cc4:	73 2b       	or	r23, r19
     cc6:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
     cca:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
     cce:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
     cd2:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
     cd6:	b0 9b       	sbis	0x16, 0	; 22
     cd8:	1a c0       	rjmp	.+52     	; 0xd0e <__vector_1+0x9a>
     cda:	01 96       	adiw	r24, 0x01	; 1
     cdc:	09 2e       	mov	r0, r25
     cde:	00 0c       	add	r0, r0
     ce0:	aa 0b       	sbc	r26, r26
     ce2:	bb 0b       	sbc	r27, r27
     ce4:	bc 01       	movw	r22, r24
     ce6:	55 27       	eor	r21, r21
     ce8:	44 27       	eor	r20, r20
     cea:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cee:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cf2:	a0 e0       	ldi	r26, 0x00	; 0
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	84 2b       	or	r24, r20
     cf8:	95 2b       	or	r25, r21
     cfa:	a6 2b       	or	r26, r22
     cfc:	b7 2b       	or	r27, r23
     cfe:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     d02:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     d06:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     d0a:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     d0e:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <mtable>
     d12:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <mtable+0x1>
     d16:	30 97       	sbiw	r30, 0x00	; 0
     d18:	39 f0       	breq	.+14     	; 0xd28 <__vector_1+0xb4>
     d1a:	60 e0       	ldi	r22, 0x00	; 0
     d1c:	70 e0       	ldi	r23, 0x00	; 0
     d1e:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <otable>
     d22:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <otable+0x1>
     d26:	09 95       	icall
     d28:	0e 94 06 06 	call	0xc0c	; 0xc0c <schedule>
     d2c:	ff 91       	pop	r31
     d2e:	ef 91       	pop	r30
     d30:	bf 91       	pop	r27
     d32:	af 91       	pop	r26
     d34:	9f 91       	pop	r25
     d36:	8f 91       	pop	r24
     d38:	7f 91       	pop	r23
     d3a:	6f 91       	pop	r22
     d3c:	5f 91       	pop	r21
     d3e:	4f 91       	pop	r20
     d40:	3f 91       	pop	r19
     d42:	2f 91       	pop	r18
     d44:	1f 91       	pop	r17
     d46:	0f 91       	pop	r16
     d48:	0f 90       	pop	r0
     d4a:	0f be       	out	0x3f, r0	; 63
     d4c:	0f 90       	pop	r0
     d4e:	1f 90       	pop	r1
     d50:	18 95       	reti

00000d52 <__vector_2>:
     d52:	1f 92       	push	r1
     d54:	0f 92       	push	r0
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	0f 92       	push	r0
     d5a:	11 24       	eor	r1, r1
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	2f 93       	push	r18
     d62:	3f 93       	push	r19
     d64:	4f 93       	push	r20
     d66:	5f 93       	push	r21
     d68:	6f 93       	push	r22
     d6a:	7f 93       	push	r23
     d6c:	8f 93       	push	r24
     d6e:	9f 93       	push	r25
     d70:	af 93       	push	r26
     d72:	bf 93       	push	r27
     d74:	ef 93       	push	r30
     d76:	ff 93       	push	r31
     d78:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
     d7c:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
     d80:	ac 01       	movw	r20, r24
     d82:	09 2e       	mov	r0, r25
     d84:	00 0c       	add	r0, r0
     d86:	66 0b       	sbc	r22, r22
     d88:	77 0b       	sbc	r23, r23
     d8a:	9a 01       	movw	r18, r20
     d8c:	11 27       	eor	r17, r17
     d8e:	00 27       	eor	r16, r16
     d90:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d94:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d98:	60 e0       	ldi	r22, 0x00	; 0
     d9a:	70 e0       	ldi	r23, 0x00	; 0
     d9c:	40 2b       	or	r20, r16
     d9e:	51 2b       	or	r21, r17
     da0:	62 2b       	or	r22, r18
     da2:	73 2b       	or	r23, r19
     da4:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
     da8:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
     dac:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
     db0:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
     db4:	b0 9b       	sbis	0x16, 0	; 22
     db6:	1a c0       	rjmp	.+52     	; 0xdec <__vector_2+0x9a>
     db8:	01 96       	adiw	r24, 0x01	; 1
     dba:	09 2e       	mov	r0, r25
     dbc:	00 0c       	add	r0, r0
     dbe:	aa 0b       	sbc	r26, r26
     dc0:	bb 0b       	sbc	r27, r27
     dc2:	bc 01       	movw	r22, r24
     dc4:	55 27       	eor	r21, r21
     dc6:	44 27       	eor	r20, r20
     dc8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     dcc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     dd0:	a0 e0       	ldi	r26, 0x00	; 0
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	84 2b       	or	r24, r20
     dd6:	95 2b       	or	r25, r21
     dd8:	a6 2b       	or	r26, r22
     dda:	b7 2b       	or	r27, r23
     ddc:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     de0:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     de4:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     de8:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     dec:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <mtable+0x2>
     df0:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <mtable+0x3>
     df4:	30 97       	sbiw	r30, 0x00	; 0
     df6:	39 f0       	breq	.+14     	; 0xe06 <__vector_2+0xb4>
     df8:	61 e0       	ldi	r22, 0x01	; 1
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <otable+0x2>
     e00:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <otable+0x3>
     e04:	09 95       	icall
     e06:	0e 94 06 06 	call	0xc0c	; 0xc0c <schedule>
     e0a:	ff 91       	pop	r31
     e0c:	ef 91       	pop	r30
     e0e:	bf 91       	pop	r27
     e10:	af 91       	pop	r26
     e12:	9f 91       	pop	r25
     e14:	8f 91       	pop	r24
     e16:	7f 91       	pop	r23
     e18:	6f 91       	pop	r22
     e1a:	5f 91       	pop	r21
     e1c:	4f 91       	pop	r20
     e1e:	3f 91       	pop	r19
     e20:	2f 91       	pop	r18
     e22:	1f 91       	pop	r17
     e24:	0f 91       	pop	r16
     e26:	0f 90       	pop	r0
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	0f 90       	pop	r0
     e2c:	1f 90       	pop	r1
     e2e:	18 95       	reti

00000e30 <__vector_3>:
     e30:	1f 92       	push	r1
     e32:	0f 92       	push	r0
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	0f 92       	push	r0
     e38:	11 24       	eor	r1, r1
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	2f 93       	push	r18
     e40:	3f 93       	push	r19
     e42:	4f 93       	push	r20
     e44:	5f 93       	push	r21
     e46:	6f 93       	push	r22
     e48:	7f 93       	push	r23
     e4a:	8f 93       	push	r24
     e4c:	9f 93       	push	r25
     e4e:	af 93       	push	r26
     e50:	bf 93       	push	r27
     e52:	ef 93       	push	r30
     e54:	ff 93       	push	r31
     e56:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
     e5a:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
     e5e:	ac 01       	movw	r20, r24
     e60:	09 2e       	mov	r0, r25
     e62:	00 0c       	add	r0, r0
     e64:	66 0b       	sbc	r22, r22
     e66:	77 0b       	sbc	r23, r23
     e68:	9a 01       	movw	r18, r20
     e6a:	11 27       	eor	r17, r17
     e6c:	00 27       	eor	r16, r16
     e6e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e72:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e76:	60 e0       	ldi	r22, 0x00	; 0
     e78:	70 e0       	ldi	r23, 0x00	; 0
     e7a:	40 2b       	or	r20, r16
     e7c:	51 2b       	or	r21, r17
     e7e:	62 2b       	or	r22, r18
     e80:	73 2b       	or	r23, r19
     e82:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
     e86:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
     e8a:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
     e8e:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
     e92:	b0 9b       	sbis	0x16, 0	; 22
     e94:	1a c0       	rjmp	.+52     	; 0xeca <__vector_3+0x9a>
     e96:	01 96       	adiw	r24, 0x01	; 1
     e98:	09 2e       	mov	r0, r25
     e9a:	00 0c       	add	r0, r0
     e9c:	aa 0b       	sbc	r26, r26
     e9e:	bb 0b       	sbc	r27, r27
     ea0:	bc 01       	movw	r22, r24
     ea2:	55 27       	eor	r21, r21
     ea4:	44 27       	eor	r20, r20
     ea6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     eaa:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     eae:	a0 e0       	ldi	r26, 0x00	; 0
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	84 2b       	or	r24, r20
     eb4:	95 2b       	or	r25, r21
     eb6:	a6 2b       	or	r26, r22
     eb8:	b7 2b       	or	r27, r23
     eba:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     ebe:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     ec2:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     ec6:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     eca:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <mtable+0x4>
     ece:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <mtable+0x5>
     ed2:	30 97       	sbiw	r30, 0x00	; 0
     ed4:	39 f0       	breq	.+14     	; 0xee4 <__vector_3+0xb4>
     ed6:	62 e0       	ldi	r22, 0x02	; 2
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <otable+0x4>
     ede:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <otable+0x5>
     ee2:	09 95       	icall
     ee4:	0e 94 06 06 	call	0xc0c	; 0xc0c <schedule>
     ee8:	ff 91       	pop	r31
     eea:	ef 91       	pop	r30
     eec:	bf 91       	pop	r27
     eee:	af 91       	pop	r26
     ef0:	9f 91       	pop	r25
     ef2:	8f 91       	pop	r24
     ef4:	7f 91       	pop	r23
     ef6:	6f 91       	pop	r22
     ef8:	5f 91       	pop	r21
     efa:	4f 91       	pop	r20
     efc:	3f 91       	pop	r19
     efe:	2f 91       	pop	r18
     f00:	1f 91       	pop	r17
     f02:	0f 91       	pop	r16
     f04:	0f 90       	pop	r0
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	0f 90       	pop	r0
     f0a:	1f 90       	pop	r1
     f0c:	18 95       	reti

00000f0e <__vector_4>:
     f0e:	1f 92       	push	r1
     f10:	0f 92       	push	r0
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	0f 92       	push	r0
     f16:	11 24       	eor	r1, r1
     f18:	0f 93       	push	r16
     f1a:	1f 93       	push	r17
     f1c:	2f 93       	push	r18
     f1e:	3f 93       	push	r19
     f20:	4f 93       	push	r20
     f22:	5f 93       	push	r21
     f24:	6f 93       	push	r22
     f26:	7f 93       	push	r23
     f28:	8f 93       	push	r24
     f2a:	9f 93       	push	r25
     f2c:	af 93       	push	r26
     f2e:	bf 93       	push	r27
     f30:	ef 93       	push	r30
     f32:	ff 93       	push	r31
     f34:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
     f38:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
     f3c:	ac 01       	movw	r20, r24
     f3e:	09 2e       	mov	r0, r25
     f40:	00 0c       	add	r0, r0
     f42:	66 0b       	sbc	r22, r22
     f44:	77 0b       	sbc	r23, r23
     f46:	9a 01       	movw	r18, r20
     f48:	11 27       	eor	r17, r17
     f4a:	00 27       	eor	r16, r16
     f4c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f50:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	40 2b       	or	r20, r16
     f5a:	51 2b       	or	r21, r17
     f5c:	62 2b       	or	r22, r18
     f5e:	73 2b       	or	r23, r19
     f60:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
     f64:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
     f68:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
     f6c:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
     f70:	b0 9b       	sbis	0x16, 0	; 22
     f72:	1a c0       	rjmp	.+52     	; 0xfa8 <__vector_4+0x9a>
     f74:	01 96       	adiw	r24, 0x01	; 1
     f76:	09 2e       	mov	r0, r25
     f78:	00 0c       	add	r0, r0
     f7a:	aa 0b       	sbc	r26, r26
     f7c:	bb 0b       	sbc	r27, r27
     f7e:	bc 01       	movw	r22, r24
     f80:	55 27       	eor	r21, r21
     f82:	44 27       	eor	r20, r20
     f84:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f88:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f8c:	a0 e0       	ldi	r26, 0x00	; 0
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	84 2b       	or	r24, r20
     f92:	95 2b       	or	r25, r21
     f94:	a6 2b       	or	r26, r22
     f96:	b7 2b       	or	r27, r23
     f98:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     f9c:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     fa0:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     fa4:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     fa8:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <mtable+0x6>
     fac:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <mtable+0x7>
     fb0:	30 97       	sbiw	r30, 0x00	; 0
     fb2:	39 f0       	breq	.+14     	; 0xfc2 <__vector_4+0xb4>
     fb4:	63 e0       	ldi	r22, 0x03	; 3
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <otable+0x6>
     fbc:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <otable+0x7>
     fc0:	09 95       	icall
     fc2:	0e 94 06 06 	call	0xc0c	; 0xc0c <schedule>
     fc6:	ff 91       	pop	r31
     fc8:	ef 91       	pop	r30
     fca:	bf 91       	pop	r27
     fcc:	af 91       	pop	r26
     fce:	9f 91       	pop	r25
     fd0:	8f 91       	pop	r24
     fd2:	7f 91       	pop	r23
     fd4:	6f 91       	pop	r22
     fd6:	5f 91       	pop	r21
     fd8:	4f 91       	pop	r20
     fda:	3f 91       	pop	r19
     fdc:	2f 91       	pop	r18
     fde:	1f 91       	pop	r17
     fe0:	0f 91       	pop	r16
     fe2:	0f 90       	pop	r0
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	0f 90       	pop	r0
     fe8:	1f 90       	pop	r1
     fea:	18 95       	reti

00000fec <__vector_5>:
     fec:	1f 92       	push	r1
     fee:	0f 92       	push	r0
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	0f 92       	push	r0
     ff4:	11 24       	eor	r1, r1
     ff6:	0f 93       	push	r16
     ff8:	1f 93       	push	r17
     ffa:	2f 93       	push	r18
     ffc:	3f 93       	push	r19
     ffe:	4f 93       	push	r20
    1000:	5f 93       	push	r21
    1002:	6f 93       	push	r22
    1004:	7f 93       	push	r23
    1006:	8f 93       	push	r24
    1008:	9f 93       	push	r25
    100a:	af 93       	push	r26
    100c:	bf 93       	push	r27
    100e:	ef 93       	push	r30
    1010:	ff 93       	push	r31
    1012:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
    1016:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
    101a:	ac 01       	movw	r20, r24
    101c:	09 2e       	mov	r0, r25
    101e:	00 0c       	add	r0, r0
    1020:	66 0b       	sbc	r22, r22
    1022:	77 0b       	sbc	r23, r23
    1024:	9a 01       	movw	r18, r20
    1026:	11 27       	eor	r17, r17
    1028:	00 27       	eor	r16, r16
    102a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    102e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	40 2b       	or	r20, r16
    1038:	51 2b       	or	r21, r17
    103a:	62 2b       	or	r22, r18
    103c:	73 2b       	or	r23, r19
    103e:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    1042:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    1046:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    104a:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    104e:	b0 9b       	sbis	0x16, 0	; 22
    1050:	1a c0       	rjmp	.+52     	; 0x1086 <__vector_5+0x9a>
    1052:	01 96       	adiw	r24, 0x01	; 1
    1054:	09 2e       	mov	r0, r25
    1056:	00 0c       	add	r0, r0
    1058:	aa 0b       	sbc	r26, r26
    105a:	bb 0b       	sbc	r27, r27
    105c:	bc 01       	movw	r22, r24
    105e:	55 27       	eor	r21, r21
    1060:	44 27       	eor	r20, r20
    1062:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1066:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    106a:	a0 e0       	ldi	r26, 0x00	; 0
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	84 2b       	or	r24, r20
    1070:	95 2b       	or	r25, r21
    1072:	a6 2b       	or	r26, r22
    1074:	b7 2b       	or	r27, r23
    1076:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    107a:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    107e:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1082:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1086:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <mtable+0x8>
    108a:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <mtable+0x9>
    108e:	30 97       	sbiw	r30, 0x00	; 0
    1090:	39 f0       	breq	.+14     	; 0x10a0 <__vector_5+0xb4>
    1092:	64 e0       	ldi	r22, 0x04	; 4
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <otable+0x8>
    109a:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <otable+0x9>
    109e:	09 95       	icall
    10a0:	0e 94 06 06 	call	0xc0c	; 0xc0c <schedule>
    10a4:	ff 91       	pop	r31
    10a6:	ef 91       	pop	r30
    10a8:	bf 91       	pop	r27
    10aa:	af 91       	pop	r26
    10ac:	9f 91       	pop	r25
    10ae:	8f 91       	pop	r24
    10b0:	7f 91       	pop	r23
    10b2:	6f 91       	pop	r22
    10b4:	5f 91       	pop	r21
    10b6:	4f 91       	pop	r20
    10b8:	3f 91       	pop	r19
    10ba:	2f 91       	pop	r18
    10bc:	1f 91       	pop	r17
    10be:	0f 91       	pop	r16
    10c0:	0f 90       	pop	r0
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	0f 90       	pop	r0
    10c6:	1f 90       	pop	r1
    10c8:	18 95       	reti

000010ca <__vector_10>:
    10ca:	1f 92       	push	r1
    10cc:	0f 92       	push	r0
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	0f 92       	push	r0
    10d2:	11 24       	eor	r1, r1
    10d4:	0f 93       	push	r16
    10d6:	1f 93       	push	r17
    10d8:	2f 93       	push	r18
    10da:	3f 93       	push	r19
    10dc:	4f 93       	push	r20
    10de:	5f 93       	push	r21
    10e0:	6f 93       	push	r22
    10e2:	7f 93       	push	r23
    10e4:	8f 93       	push	r24
    10e6:	9f 93       	push	r25
    10e8:	af 93       	push	r26
    10ea:	bf 93       	push	r27
    10ec:	ef 93       	push	r30
    10ee:	ff 93       	push	r31
    10f0:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
    10f4:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
    10f8:	ac 01       	movw	r20, r24
    10fa:	09 2e       	mov	r0, r25
    10fc:	00 0c       	add	r0, r0
    10fe:	66 0b       	sbc	r22, r22
    1100:	77 0b       	sbc	r23, r23
    1102:	9a 01       	movw	r18, r20
    1104:	11 27       	eor	r17, r17
    1106:	00 27       	eor	r16, r16
    1108:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    110c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1110:	60 e0       	ldi	r22, 0x00	; 0
    1112:	70 e0       	ldi	r23, 0x00	; 0
    1114:	40 2b       	or	r20, r16
    1116:	51 2b       	or	r21, r17
    1118:	62 2b       	or	r22, r18
    111a:	73 2b       	or	r23, r19
    111c:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    1120:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    1124:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    1128:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    112c:	b0 9b       	sbis	0x16, 0	; 22
    112e:	1a c0       	rjmp	.+52     	; 0x1164 <__vector_10+0x9a>
    1130:	01 96       	adiw	r24, 0x01	; 1
    1132:	09 2e       	mov	r0, r25
    1134:	00 0c       	add	r0, r0
    1136:	aa 0b       	sbc	r26, r26
    1138:	bb 0b       	sbc	r27, r27
    113a:	bc 01       	movw	r22, r24
    113c:	55 27       	eor	r21, r21
    113e:	44 27       	eor	r20, r20
    1140:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1144:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1148:	a0 e0       	ldi	r26, 0x00	; 0
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	84 2b       	or	r24, r20
    114e:	95 2b       	or	r25, r21
    1150:	a6 2b       	or	r26, r22
    1152:	b7 2b       	or	r27, r23
    1154:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1158:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    115c:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1160:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1164:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <mtable+0xa>
    1168:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <mtable+0xb>
    116c:	30 97       	sbiw	r30, 0x00	; 0
    116e:	39 f0       	breq	.+14     	; 0x117e <__vector_10+0xb4>
    1170:	65 e0       	ldi	r22, 0x05	; 5
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <otable+0xa>
    1178:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <otable+0xb>
    117c:	09 95       	icall
    117e:	0e 94 06 06 	call	0xc0c	; 0xc0c <schedule>
    1182:	ff 91       	pop	r31
    1184:	ef 91       	pop	r30
    1186:	bf 91       	pop	r27
    1188:	af 91       	pop	r26
    118a:	9f 91       	pop	r25
    118c:	8f 91       	pop	r24
    118e:	7f 91       	pop	r23
    1190:	6f 91       	pop	r22
    1192:	5f 91       	pop	r21
    1194:	4f 91       	pop	r20
    1196:	3f 91       	pop	r19
    1198:	2f 91       	pop	r18
    119a:	1f 91       	pop	r17
    119c:	0f 91       	pop	r16
    119e:	0f 90       	pop	r0
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	0f 90       	pop	r0
    11a4:	1f 90       	pop	r1
    11a6:	18 95       	reti

000011a8 <__vector_11>:
    11a8:	1f 92       	push	r1
    11aa:	0f 92       	push	r0
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	0f 92       	push	r0
    11b0:	11 24       	eor	r1, r1
    11b2:	0f 93       	push	r16
    11b4:	1f 93       	push	r17
    11b6:	2f 93       	push	r18
    11b8:	3f 93       	push	r19
    11ba:	4f 93       	push	r20
    11bc:	5f 93       	push	r21
    11be:	6f 93       	push	r22
    11c0:	7f 93       	push	r23
    11c2:	8f 93       	push	r24
    11c4:	9f 93       	push	r25
    11c6:	af 93       	push	r26
    11c8:	bf 93       	push	r27
    11ca:	ef 93       	push	r30
    11cc:	ff 93       	push	r31
    11ce:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
    11d2:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
    11d6:	ac 01       	movw	r20, r24
    11d8:	09 2e       	mov	r0, r25
    11da:	00 0c       	add	r0, r0
    11dc:	66 0b       	sbc	r22, r22
    11de:	77 0b       	sbc	r23, r23
    11e0:	9a 01       	movw	r18, r20
    11e2:	11 27       	eor	r17, r17
    11e4:	00 27       	eor	r16, r16
    11e6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11ea:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	40 2b       	or	r20, r16
    11f4:	51 2b       	or	r21, r17
    11f6:	62 2b       	or	r22, r18
    11f8:	73 2b       	or	r23, r19
    11fa:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    11fe:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    1202:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    1206:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    120a:	b0 9b       	sbis	0x16, 0	; 22
    120c:	1a c0       	rjmp	.+52     	; 0x1242 <__vector_11+0x9a>
    120e:	01 96       	adiw	r24, 0x01	; 1
    1210:	09 2e       	mov	r0, r25
    1212:	00 0c       	add	r0, r0
    1214:	aa 0b       	sbc	r26, r26
    1216:	bb 0b       	sbc	r27, r27
    1218:	bc 01       	movw	r22, r24
    121a:	55 27       	eor	r21, r21
    121c:	44 27       	eor	r20, r20
    121e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1222:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1226:	a0 e0       	ldi	r26, 0x00	; 0
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	84 2b       	or	r24, r20
    122c:	95 2b       	or	r25, r21
    122e:	a6 2b       	or	r26, r22
    1230:	b7 2b       	or	r27, r23
    1232:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1236:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    123a:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    123e:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1242:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <mtable+0xc>
    1246:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <mtable+0xd>
    124a:	30 97       	sbiw	r30, 0x00	; 0
    124c:	39 f0       	breq	.+14     	; 0x125c <__vector_11+0xb4>
    124e:	66 e0       	ldi	r22, 0x06	; 6
    1250:	70 e0       	ldi	r23, 0x00	; 0
    1252:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <otable+0xc>
    1256:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <otable+0xd>
    125a:	09 95       	icall
    125c:	0e 94 06 06 	call	0xc0c	; 0xc0c <schedule>
    1260:	ff 91       	pop	r31
    1262:	ef 91       	pop	r30
    1264:	bf 91       	pop	r27
    1266:	af 91       	pop	r26
    1268:	9f 91       	pop	r25
    126a:	8f 91       	pop	r24
    126c:	7f 91       	pop	r23
    126e:	6f 91       	pop	r22
    1270:	5f 91       	pop	r21
    1272:	4f 91       	pop	r20
    1274:	3f 91       	pop	r19
    1276:	2f 91       	pop	r18
    1278:	1f 91       	pop	r17
    127a:	0f 91       	pop	r16
    127c:	0f 90       	pop	r0
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	0f 90       	pop	r0
    1282:	1f 90       	pop	r1
    1284:	18 95       	reti

00001286 <__vector_12>:
    1286:	1f 92       	push	r1
    1288:	0f 92       	push	r0
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	0f 92       	push	r0
    128e:	11 24       	eor	r1, r1
    1290:	0f 93       	push	r16
    1292:	1f 93       	push	r17
    1294:	2f 93       	push	r18
    1296:	3f 93       	push	r19
    1298:	4f 93       	push	r20
    129a:	5f 93       	push	r21
    129c:	6f 93       	push	r22
    129e:	7f 93       	push	r23
    12a0:	8f 93       	push	r24
    12a2:	9f 93       	push	r25
    12a4:	af 93       	push	r26
    12a6:	bf 93       	push	r27
    12a8:	ef 93       	push	r30
    12aa:	ff 93       	push	r31
    12ac:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
    12b0:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
    12b4:	ac 01       	movw	r20, r24
    12b6:	09 2e       	mov	r0, r25
    12b8:	00 0c       	add	r0, r0
    12ba:	66 0b       	sbc	r22, r22
    12bc:	77 0b       	sbc	r23, r23
    12be:	9a 01       	movw	r18, r20
    12c0:	11 27       	eor	r17, r17
    12c2:	00 27       	eor	r16, r16
    12c4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12c8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12cc:	60 e0       	ldi	r22, 0x00	; 0
    12ce:	70 e0       	ldi	r23, 0x00	; 0
    12d0:	40 2b       	or	r20, r16
    12d2:	51 2b       	or	r21, r17
    12d4:	62 2b       	or	r22, r18
    12d6:	73 2b       	or	r23, r19
    12d8:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    12dc:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    12e0:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    12e4:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    12e8:	b0 9b       	sbis	0x16, 0	; 22
    12ea:	1a c0       	rjmp	.+52     	; 0x1320 <__vector_12+0x9a>
    12ec:	01 96       	adiw	r24, 0x01	; 1
    12ee:	09 2e       	mov	r0, r25
    12f0:	00 0c       	add	r0, r0
    12f2:	aa 0b       	sbc	r26, r26
    12f4:	bb 0b       	sbc	r27, r27
    12f6:	bc 01       	movw	r22, r24
    12f8:	55 27       	eor	r21, r21
    12fa:	44 27       	eor	r20, r20
    12fc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1300:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1304:	a0 e0       	ldi	r26, 0x00	; 0
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	84 2b       	or	r24, r20
    130a:	95 2b       	or	r25, r21
    130c:	a6 2b       	or	r26, r22
    130e:	b7 2b       	or	r27, r23
    1310:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1314:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1318:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    131c:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1320:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <mtable+0xe>
    1324:	f0 91 e9 01 	lds	r31, 0x01E9	; 0x8001e9 <mtable+0xf>
    1328:	30 97       	sbiw	r30, 0x00	; 0
    132a:	39 f0       	breq	.+14     	; 0x133a <__vector_12+0xb4>
    132c:	67 e0       	ldi	r22, 0x07	; 7
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <otable+0xe>
    1334:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <otable+0xf>
    1338:	09 95       	icall
    133a:	0e 94 06 06 	call	0xc0c	; 0xc0c <schedule>
    133e:	ff 91       	pop	r31
    1340:	ef 91       	pop	r30
    1342:	bf 91       	pop	r27
    1344:	af 91       	pop	r26
    1346:	9f 91       	pop	r25
    1348:	8f 91       	pop	r24
    134a:	7f 91       	pop	r23
    134c:	6f 91       	pop	r22
    134e:	5f 91       	pop	r21
    1350:	4f 91       	pop	r20
    1352:	3f 91       	pop	r19
    1354:	2f 91       	pop	r18
    1356:	1f 91       	pop	r17
    1358:	0f 91       	pop	r16
    135a:	0f 90       	pop	r0
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	0f 90       	pop	r0
    1360:	1f 90       	pop	r1
    1362:	18 95       	reti

00001364 <__vector_13>:
    1364:	1f 92       	push	r1
    1366:	0f 92       	push	r0
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	0f 92       	push	r0
    136c:	11 24       	eor	r1, r1
    136e:	0f 93       	push	r16
    1370:	1f 93       	push	r17
    1372:	2f 93       	push	r18
    1374:	3f 93       	push	r19
    1376:	4f 93       	push	r20
    1378:	5f 93       	push	r21
    137a:	6f 93       	push	r22
    137c:	7f 93       	push	r23
    137e:	8f 93       	push	r24
    1380:	9f 93       	push	r25
    1382:	af 93       	push	r26
    1384:	bf 93       	push	r27
    1386:	ef 93       	push	r30
    1388:	ff 93       	push	r31
    138a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
    138e:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
    1392:	ac 01       	movw	r20, r24
    1394:	09 2e       	mov	r0, r25
    1396:	00 0c       	add	r0, r0
    1398:	66 0b       	sbc	r22, r22
    139a:	77 0b       	sbc	r23, r23
    139c:	9a 01       	movw	r18, r20
    139e:	11 27       	eor	r17, r17
    13a0:	00 27       	eor	r16, r16
    13a2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13a6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13aa:	60 e0       	ldi	r22, 0x00	; 0
    13ac:	70 e0       	ldi	r23, 0x00	; 0
    13ae:	40 2b       	or	r20, r16
    13b0:	51 2b       	or	r21, r17
    13b2:	62 2b       	or	r22, r18
    13b4:	73 2b       	or	r23, r19
    13b6:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    13ba:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    13be:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    13c2:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    13c6:	b0 9b       	sbis	0x16, 0	; 22
    13c8:	1a c0       	rjmp	.+52     	; 0x13fe <__vector_13+0x9a>
    13ca:	01 96       	adiw	r24, 0x01	; 1
    13cc:	09 2e       	mov	r0, r25
    13ce:	00 0c       	add	r0, r0
    13d0:	aa 0b       	sbc	r26, r26
    13d2:	bb 0b       	sbc	r27, r27
    13d4:	bc 01       	movw	r22, r24
    13d6:	55 27       	eor	r21, r21
    13d8:	44 27       	eor	r20, r20
    13da:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13de:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13e2:	a0 e0       	ldi	r26, 0x00	; 0
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	84 2b       	or	r24, r20
    13e8:	95 2b       	or	r25, r21
    13ea:	a6 2b       	or	r26, r22
    13ec:	b7 2b       	or	r27, r23
    13ee:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    13f2:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    13f6:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    13fa:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    13fe:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <mtable+0x10>
    1402:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <mtable+0x11>
    1406:	30 97       	sbiw	r30, 0x00	; 0
    1408:	39 f0       	breq	.+14     	; 0x1418 <__vector_13+0xb4>
    140a:	68 e0       	ldi	r22, 0x08	; 8
    140c:	70 e0       	ldi	r23, 0x00	; 0
    140e:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <otable+0x10>
    1412:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <otable+0x11>
    1416:	09 95       	icall
    1418:	0e 94 06 06 	call	0xc0c	; 0xc0c <schedule>
    141c:	ff 91       	pop	r31
    141e:	ef 91       	pop	r30
    1420:	bf 91       	pop	r27
    1422:	af 91       	pop	r26
    1424:	9f 91       	pop	r25
    1426:	8f 91       	pop	r24
    1428:	7f 91       	pop	r23
    142a:	6f 91       	pop	r22
    142c:	5f 91       	pop	r21
    142e:	4f 91       	pop	r20
    1430:	3f 91       	pop	r19
    1432:	2f 91       	pop	r18
    1434:	1f 91       	pop	r17
    1436:	0f 91       	pop	r16
    1438:	0f 90       	pop	r0
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	0f 90       	pop	r0
    143e:	1f 90       	pop	r1
    1440:	18 95       	reti

00001442 <__vector_14>:
    1442:	1f 92       	push	r1
    1444:	0f 92       	push	r0
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	0f 92       	push	r0
    144a:	11 24       	eor	r1, r1
    144c:	0f 93       	push	r16
    144e:	1f 93       	push	r17
    1450:	2f 93       	push	r18
    1452:	3f 93       	push	r19
    1454:	4f 93       	push	r20
    1456:	5f 93       	push	r21
    1458:	6f 93       	push	r22
    145a:	7f 93       	push	r23
    145c:	8f 93       	push	r24
    145e:	9f 93       	push	r25
    1460:	af 93       	push	r26
    1462:	bf 93       	push	r27
    1464:	ef 93       	push	r30
    1466:	ff 93       	push	r31
    1468:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
    146c:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
    1470:	ac 01       	movw	r20, r24
    1472:	09 2e       	mov	r0, r25
    1474:	00 0c       	add	r0, r0
    1476:	66 0b       	sbc	r22, r22
    1478:	77 0b       	sbc	r23, r23
    147a:	9a 01       	movw	r18, r20
    147c:	11 27       	eor	r17, r17
    147e:	00 27       	eor	r16, r16
    1480:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1484:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1488:	60 e0       	ldi	r22, 0x00	; 0
    148a:	70 e0       	ldi	r23, 0x00	; 0
    148c:	40 2b       	or	r20, r16
    148e:	51 2b       	or	r21, r17
    1490:	62 2b       	or	r22, r18
    1492:	73 2b       	or	r23, r19
    1494:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    1498:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    149c:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    14a0:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    14a4:	b0 9b       	sbis	0x16, 0	; 22
    14a6:	1a c0       	rjmp	.+52     	; 0x14dc <__vector_14+0x9a>
    14a8:	01 96       	adiw	r24, 0x01	; 1
    14aa:	09 2e       	mov	r0, r25
    14ac:	00 0c       	add	r0, r0
    14ae:	aa 0b       	sbc	r26, r26
    14b0:	bb 0b       	sbc	r27, r27
    14b2:	bc 01       	movw	r22, r24
    14b4:	55 27       	eor	r21, r21
    14b6:	44 27       	eor	r20, r20
    14b8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14bc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14c0:	a0 e0       	ldi	r26, 0x00	; 0
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	84 2b       	or	r24, r20
    14c6:	95 2b       	or	r25, r21
    14c8:	a6 2b       	or	r26, r22
    14ca:	b7 2b       	or	r27, r23
    14cc:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    14d0:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    14d4:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    14d8:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    14dc:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <mtable+0x12>
    14e0:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <mtable+0x13>
    14e4:	30 97       	sbiw	r30, 0x00	; 0
    14e6:	39 f0       	breq	.+14     	; 0x14f6 <__vector_14+0xb4>
    14e8:	69 e0       	ldi	r22, 0x09	; 9
    14ea:	70 e0       	ldi	r23, 0x00	; 0
    14ec:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <otable+0x12>
    14f0:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <otable+0x13>
    14f4:	09 95       	icall
    14f6:	0e 94 06 06 	call	0xc0c	; 0xc0c <schedule>
    14fa:	ff 91       	pop	r31
    14fc:	ef 91       	pop	r30
    14fe:	bf 91       	pop	r27
    1500:	af 91       	pop	r26
    1502:	9f 91       	pop	r25
    1504:	8f 91       	pop	r24
    1506:	7f 91       	pop	r23
    1508:	6f 91       	pop	r22
    150a:	5f 91       	pop	r21
    150c:	4f 91       	pop	r20
    150e:	3f 91       	pop	r19
    1510:	2f 91       	pop	r18
    1512:	1f 91       	pop	r17
    1514:	0f 91       	pop	r16
    1516:	0f 90       	pop	r0
    1518:	0f be       	out	0x3f, r0	; 63
    151a:	0f 90       	pop	r0
    151c:	1f 90       	pop	r1
    151e:	18 95       	reti

00001520 <__vector_15>:
    1520:	1f 92       	push	r1
    1522:	0f 92       	push	r0
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	0f 92       	push	r0
    1528:	11 24       	eor	r1, r1
    152a:	0f 93       	push	r16
    152c:	1f 93       	push	r17
    152e:	2f 93       	push	r18
    1530:	3f 93       	push	r19
    1532:	4f 93       	push	r20
    1534:	5f 93       	push	r21
    1536:	6f 93       	push	r22
    1538:	7f 93       	push	r23
    153a:	8f 93       	push	r24
    153c:	9f 93       	push	r25
    153e:	af 93       	push	r26
    1540:	bf 93       	push	r27
    1542:	ef 93       	push	r30
    1544:	ff 93       	push	r31
    1546:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
    154a:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
    154e:	ac 01       	movw	r20, r24
    1550:	09 2e       	mov	r0, r25
    1552:	00 0c       	add	r0, r0
    1554:	66 0b       	sbc	r22, r22
    1556:	77 0b       	sbc	r23, r23
    1558:	9a 01       	movw	r18, r20
    155a:	11 27       	eor	r17, r17
    155c:	00 27       	eor	r16, r16
    155e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1562:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1566:	60 e0       	ldi	r22, 0x00	; 0
    1568:	70 e0       	ldi	r23, 0x00	; 0
    156a:	40 2b       	or	r20, r16
    156c:	51 2b       	or	r21, r17
    156e:	62 2b       	or	r22, r18
    1570:	73 2b       	or	r23, r19
    1572:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    1576:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    157a:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    157e:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    1582:	b0 9b       	sbis	0x16, 0	; 22
    1584:	1a c0       	rjmp	.+52     	; 0x15ba <__vector_15+0x9a>
    1586:	01 96       	adiw	r24, 0x01	; 1
    1588:	09 2e       	mov	r0, r25
    158a:	00 0c       	add	r0, r0
    158c:	aa 0b       	sbc	r26, r26
    158e:	bb 0b       	sbc	r27, r27
    1590:	bc 01       	movw	r22, r24
    1592:	55 27       	eor	r21, r21
    1594:	44 27       	eor	r20, r20
    1596:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    159a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    159e:	a0 e0       	ldi	r26, 0x00	; 0
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	84 2b       	or	r24, r20
    15a4:	95 2b       	or	r25, r21
    15a6:	a6 2b       	or	r26, r22
    15a8:	b7 2b       	or	r27, r23
    15aa:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    15ae:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    15b2:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    15b6:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    15ba:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <mtable+0x14>
    15be:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <mtable+0x15>
    15c2:	30 97       	sbiw	r30, 0x00	; 0
    15c4:	39 f0       	breq	.+14     	; 0x15d4 <__vector_15+0xb4>
    15c6:	6a e0       	ldi	r22, 0x0A	; 10
    15c8:	70 e0       	ldi	r23, 0x00	; 0
    15ca:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <otable+0x14>
    15ce:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <otable+0x15>
    15d2:	09 95       	icall
    15d4:	0e 94 06 06 	call	0xc0c	; 0xc0c <schedule>
    15d8:	ff 91       	pop	r31
    15da:	ef 91       	pop	r30
    15dc:	bf 91       	pop	r27
    15de:	af 91       	pop	r26
    15e0:	9f 91       	pop	r25
    15e2:	8f 91       	pop	r24
    15e4:	7f 91       	pop	r23
    15e6:	6f 91       	pop	r22
    15e8:	5f 91       	pop	r21
    15ea:	4f 91       	pop	r20
    15ec:	3f 91       	pop	r19
    15ee:	2f 91       	pop	r18
    15f0:	1f 91       	pop	r17
    15f2:	0f 91       	pop	r16
    15f4:	0f 90       	pop	r0
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	0f 90       	pop	r0
    15fa:	1f 90       	pop	r1
    15fc:	18 95       	reti

000015fe <__vector_16>:
    15fe:	1f 92       	push	r1
    1600:	0f 92       	push	r0
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	0f 92       	push	r0
    1606:	11 24       	eor	r1, r1
    1608:	0f 93       	push	r16
    160a:	1f 93       	push	r17
    160c:	2f 93       	push	r18
    160e:	3f 93       	push	r19
    1610:	4f 93       	push	r20
    1612:	5f 93       	push	r21
    1614:	6f 93       	push	r22
    1616:	7f 93       	push	r23
    1618:	8f 93       	push	r24
    161a:	9f 93       	push	r25
    161c:	af 93       	push	r26
    161e:	bf 93       	push	r27
    1620:	ef 93       	push	r30
    1622:	ff 93       	push	r31
    1624:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
    1628:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
    162c:	ac 01       	movw	r20, r24
    162e:	09 2e       	mov	r0, r25
    1630:	00 0c       	add	r0, r0
    1632:	66 0b       	sbc	r22, r22
    1634:	77 0b       	sbc	r23, r23
    1636:	9a 01       	movw	r18, r20
    1638:	11 27       	eor	r17, r17
    163a:	00 27       	eor	r16, r16
    163c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1640:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1644:	60 e0       	ldi	r22, 0x00	; 0
    1646:	70 e0       	ldi	r23, 0x00	; 0
    1648:	40 2b       	or	r20, r16
    164a:	51 2b       	or	r21, r17
    164c:	62 2b       	or	r22, r18
    164e:	73 2b       	or	r23, r19
    1650:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    1654:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    1658:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    165c:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    1660:	b0 9b       	sbis	0x16, 0	; 22
    1662:	1a c0       	rjmp	.+52     	; 0x1698 <__vector_16+0x9a>
    1664:	01 96       	adiw	r24, 0x01	; 1
    1666:	09 2e       	mov	r0, r25
    1668:	00 0c       	add	r0, r0
    166a:	aa 0b       	sbc	r26, r26
    166c:	bb 0b       	sbc	r27, r27
    166e:	bc 01       	movw	r22, r24
    1670:	55 27       	eor	r21, r21
    1672:	44 27       	eor	r20, r20
    1674:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1678:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    167c:	a0 e0       	ldi	r26, 0x00	; 0
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	84 2b       	or	r24, r20
    1682:	95 2b       	or	r25, r21
    1684:	a6 2b       	or	r26, r22
    1686:	b7 2b       	or	r27, r23
    1688:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    168c:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1690:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1694:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1698:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <mtable+0x16>
    169c:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <mtable+0x17>
    16a0:	30 97       	sbiw	r30, 0x00	; 0
    16a2:	39 f0       	breq	.+14     	; 0x16b2 <__vector_16+0xb4>
    16a4:	6b e0       	ldi	r22, 0x0B	; 11
    16a6:	70 e0       	ldi	r23, 0x00	; 0
    16a8:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <otable+0x16>
    16ac:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <otable+0x17>
    16b0:	09 95       	icall
    16b2:	0e 94 06 06 	call	0xc0c	; 0xc0c <schedule>
    16b6:	ff 91       	pop	r31
    16b8:	ef 91       	pop	r30
    16ba:	bf 91       	pop	r27
    16bc:	af 91       	pop	r26
    16be:	9f 91       	pop	r25
    16c0:	8f 91       	pop	r24
    16c2:	7f 91       	pop	r23
    16c4:	6f 91       	pop	r22
    16c6:	5f 91       	pop	r21
    16c8:	4f 91       	pop	r20
    16ca:	3f 91       	pop	r19
    16cc:	2f 91       	pop	r18
    16ce:	1f 91       	pop	r17
    16d0:	0f 91       	pop	r16
    16d2:	0f 90       	pop	r0
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	0f 90       	pop	r0
    16d8:	1f 90       	pop	r1
    16da:	18 95       	reti

000016dc <__vector_17>:
    16dc:	1f 92       	push	r1
    16de:	0f 92       	push	r0
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	0f 92       	push	r0
    16e4:	11 24       	eor	r1, r1
    16e6:	0f 93       	push	r16
    16e8:	1f 93       	push	r17
    16ea:	2f 93       	push	r18
    16ec:	3f 93       	push	r19
    16ee:	4f 93       	push	r20
    16f0:	5f 93       	push	r21
    16f2:	6f 93       	push	r22
    16f4:	7f 93       	push	r23
    16f6:	8f 93       	push	r24
    16f8:	9f 93       	push	r25
    16fa:	af 93       	push	r26
    16fc:	bf 93       	push	r27
    16fe:	ef 93       	push	r30
    1700:	ff 93       	push	r31
    1702:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
    1706:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
    170a:	ac 01       	movw	r20, r24
    170c:	09 2e       	mov	r0, r25
    170e:	00 0c       	add	r0, r0
    1710:	66 0b       	sbc	r22, r22
    1712:	77 0b       	sbc	r23, r23
    1714:	9a 01       	movw	r18, r20
    1716:	11 27       	eor	r17, r17
    1718:	00 27       	eor	r16, r16
    171a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    171e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1722:	60 e0       	ldi	r22, 0x00	; 0
    1724:	70 e0       	ldi	r23, 0x00	; 0
    1726:	40 2b       	or	r20, r16
    1728:	51 2b       	or	r21, r17
    172a:	62 2b       	or	r22, r18
    172c:	73 2b       	or	r23, r19
    172e:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    1732:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    1736:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    173a:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    173e:	b0 9b       	sbis	0x16, 0	; 22
    1740:	1a c0       	rjmp	.+52     	; 0x1776 <__vector_17+0x9a>
    1742:	01 96       	adiw	r24, 0x01	; 1
    1744:	09 2e       	mov	r0, r25
    1746:	00 0c       	add	r0, r0
    1748:	aa 0b       	sbc	r26, r26
    174a:	bb 0b       	sbc	r27, r27
    174c:	bc 01       	movw	r22, r24
    174e:	55 27       	eor	r21, r21
    1750:	44 27       	eor	r20, r20
    1752:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1756:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    175a:	a0 e0       	ldi	r26, 0x00	; 0
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	84 2b       	or	r24, r20
    1760:	95 2b       	or	r25, r21
    1762:	a6 2b       	or	r26, r22
    1764:	b7 2b       	or	r27, r23
    1766:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    176a:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    176e:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1772:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1776:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <mtable+0x18>
    177a:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <mtable+0x19>
    177e:	30 97       	sbiw	r30, 0x00	; 0
    1780:	39 f0       	breq	.+14     	; 0x1790 <__vector_17+0xb4>
    1782:	6c e0       	ldi	r22, 0x0C	; 12
    1784:	70 e0       	ldi	r23, 0x00	; 0
    1786:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <otable+0x18>
    178a:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <otable+0x19>
    178e:	09 95       	icall
    1790:	0e 94 06 06 	call	0xc0c	; 0xc0c <schedule>
    1794:	ff 91       	pop	r31
    1796:	ef 91       	pop	r30
    1798:	bf 91       	pop	r27
    179a:	af 91       	pop	r26
    179c:	9f 91       	pop	r25
    179e:	8f 91       	pop	r24
    17a0:	7f 91       	pop	r23
    17a2:	6f 91       	pop	r22
    17a4:	5f 91       	pop	r21
    17a6:	4f 91       	pop	r20
    17a8:	3f 91       	pop	r19
    17aa:	2f 91       	pop	r18
    17ac:	1f 91       	pop	r17
    17ae:	0f 91       	pop	r16
    17b0:	0f 90       	pop	r0
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	0f 90       	pop	r0
    17b6:	1f 90       	pop	r1
    17b8:	18 95       	reti

000017ba <__vector_18>:
    17ba:	1f 92       	push	r1
    17bc:	0f 92       	push	r0
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	0f 92       	push	r0
    17c2:	11 24       	eor	r1, r1
    17c4:	0f 93       	push	r16
    17c6:	1f 93       	push	r17
    17c8:	2f 93       	push	r18
    17ca:	3f 93       	push	r19
    17cc:	4f 93       	push	r20
    17ce:	5f 93       	push	r21
    17d0:	6f 93       	push	r22
    17d2:	7f 93       	push	r23
    17d4:	8f 93       	push	r24
    17d6:	9f 93       	push	r25
    17d8:	af 93       	push	r26
    17da:	bf 93       	push	r27
    17dc:	ef 93       	push	r30
    17de:	ff 93       	push	r31
    17e0:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
    17e4:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
    17e8:	ac 01       	movw	r20, r24
    17ea:	09 2e       	mov	r0, r25
    17ec:	00 0c       	add	r0, r0
    17ee:	66 0b       	sbc	r22, r22
    17f0:	77 0b       	sbc	r23, r23
    17f2:	9a 01       	movw	r18, r20
    17f4:	11 27       	eor	r17, r17
    17f6:	00 27       	eor	r16, r16
    17f8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17fc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1800:	60 e0       	ldi	r22, 0x00	; 0
    1802:	70 e0       	ldi	r23, 0x00	; 0
    1804:	40 2b       	or	r20, r16
    1806:	51 2b       	or	r21, r17
    1808:	62 2b       	or	r22, r18
    180a:	73 2b       	or	r23, r19
    180c:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    1810:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    1814:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    1818:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    181c:	b0 9b       	sbis	0x16, 0	; 22
    181e:	1a c0       	rjmp	.+52     	; 0x1854 <__vector_18+0x9a>
    1820:	01 96       	adiw	r24, 0x01	; 1
    1822:	09 2e       	mov	r0, r25
    1824:	00 0c       	add	r0, r0
    1826:	aa 0b       	sbc	r26, r26
    1828:	bb 0b       	sbc	r27, r27
    182a:	bc 01       	movw	r22, r24
    182c:	55 27       	eor	r21, r21
    182e:	44 27       	eor	r20, r20
    1830:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1834:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1838:	a0 e0       	ldi	r26, 0x00	; 0
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	84 2b       	or	r24, r20
    183e:	95 2b       	or	r25, r21
    1840:	a6 2b       	or	r26, r22
    1842:	b7 2b       	or	r27, r23
    1844:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1848:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    184c:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1850:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1854:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <mtable+0x1a>
    1858:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <mtable+0x1b>
    185c:	30 97       	sbiw	r30, 0x00	; 0
    185e:	39 f0       	breq	.+14     	; 0x186e <__vector_18+0xb4>
    1860:	6d e0       	ldi	r22, 0x0D	; 13
    1862:	70 e0       	ldi	r23, 0x00	; 0
    1864:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <otable+0x1a>
    1868:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <otable+0x1b>
    186c:	09 95       	icall
    186e:	0e 94 06 06 	call	0xc0c	; 0xc0c <schedule>
    1872:	ff 91       	pop	r31
    1874:	ef 91       	pop	r30
    1876:	bf 91       	pop	r27
    1878:	af 91       	pop	r26
    187a:	9f 91       	pop	r25
    187c:	8f 91       	pop	r24
    187e:	7f 91       	pop	r23
    1880:	6f 91       	pop	r22
    1882:	5f 91       	pop	r21
    1884:	4f 91       	pop	r20
    1886:	3f 91       	pop	r19
    1888:	2f 91       	pop	r18
    188a:	1f 91       	pop	r17
    188c:	0f 91       	pop	r16
    188e:	0f 90       	pop	r0
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	0f 90       	pop	r0
    1894:	1f 90       	pop	r1
    1896:	18 95       	reti

00001898 <__vector_19>:
    1898:	1f 92       	push	r1
    189a:	0f 92       	push	r0
    189c:	0f b6       	in	r0, 0x3f	; 63
    189e:	0f 92       	push	r0
    18a0:	11 24       	eor	r1, r1
    18a2:	0f 93       	push	r16
    18a4:	1f 93       	push	r17
    18a6:	2f 93       	push	r18
    18a8:	3f 93       	push	r19
    18aa:	4f 93       	push	r20
    18ac:	5f 93       	push	r21
    18ae:	6f 93       	push	r22
    18b0:	7f 93       	push	r23
    18b2:	8f 93       	push	r24
    18b4:	9f 93       	push	r25
    18b6:	af 93       	push	r26
    18b8:	bf 93       	push	r27
    18ba:	ef 93       	push	r30
    18bc:	ff 93       	push	r31
    18be:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
    18c2:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
    18c6:	ac 01       	movw	r20, r24
    18c8:	09 2e       	mov	r0, r25
    18ca:	00 0c       	add	r0, r0
    18cc:	66 0b       	sbc	r22, r22
    18ce:	77 0b       	sbc	r23, r23
    18d0:	9a 01       	movw	r18, r20
    18d2:	11 27       	eor	r17, r17
    18d4:	00 27       	eor	r16, r16
    18d6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18da:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18de:	60 e0       	ldi	r22, 0x00	; 0
    18e0:	70 e0       	ldi	r23, 0x00	; 0
    18e2:	40 2b       	or	r20, r16
    18e4:	51 2b       	or	r21, r17
    18e6:	62 2b       	or	r22, r18
    18e8:	73 2b       	or	r23, r19
    18ea:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    18ee:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    18f2:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    18f6:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    18fa:	b0 9b       	sbis	0x16, 0	; 22
    18fc:	1a c0       	rjmp	.+52     	; 0x1932 <__vector_19+0x9a>
    18fe:	01 96       	adiw	r24, 0x01	; 1
    1900:	09 2e       	mov	r0, r25
    1902:	00 0c       	add	r0, r0
    1904:	aa 0b       	sbc	r26, r26
    1906:	bb 0b       	sbc	r27, r27
    1908:	bc 01       	movw	r22, r24
    190a:	55 27       	eor	r21, r21
    190c:	44 27       	eor	r20, r20
    190e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1912:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1916:	a0 e0       	ldi	r26, 0x00	; 0
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	84 2b       	or	r24, r20
    191c:	95 2b       	or	r25, r21
    191e:	a6 2b       	or	r26, r22
    1920:	b7 2b       	or	r27, r23
    1922:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1926:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    192a:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    192e:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1932:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <mtable+0x1c>
    1936:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <mtable+0x1d>
    193a:	30 97       	sbiw	r30, 0x00	; 0
    193c:	39 f0       	breq	.+14     	; 0x194c <__vector_19+0xb4>
    193e:	6e e0       	ldi	r22, 0x0E	; 14
    1940:	70 e0       	ldi	r23, 0x00	; 0
    1942:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <otable+0x1c>
    1946:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <otable+0x1d>
    194a:	09 95       	icall
    194c:	0e 94 06 06 	call	0xc0c	; 0xc0c <schedule>
    1950:	ff 91       	pop	r31
    1952:	ef 91       	pop	r30
    1954:	bf 91       	pop	r27
    1956:	af 91       	pop	r26
    1958:	9f 91       	pop	r25
    195a:	8f 91       	pop	r24
    195c:	7f 91       	pop	r23
    195e:	6f 91       	pop	r22
    1960:	5f 91       	pop	r21
    1962:	4f 91       	pop	r20
    1964:	3f 91       	pop	r19
    1966:	2f 91       	pop	r18
    1968:	1f 91       	pop	r17
    196a:	0f 91       	pop	r16
    196c:	0f 90       	pop	r0
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	0f 90       	pop	r0
    1972:	1f 90       	pop	r1
    1974:	18 95       	reti

00001976 <__vector_20>:
    1976:	1f 92       	push	r1
    1978:	0f 92       	push	r0
    197a:	0f b6       	in	r0, 0x3f	; 63
    197c:	0f 92       	push	r0
    197e:	11 24       	eor	r1, r1
    1980:	0f 93       	push	r16
    1982:	1f 93       	push	r17
    1984:	2f 93       	push	r18
    1986:	3f 93       	push	r19
    1988:	4f 93       	push	r20
    198a:	5f 93       	push	r21
    198c:	6f 93       	push	r22
    198e:	7f 93       	push	r23
    1990:	8f 93       	push	r24
    1992:	9f 93       	push	r25
    1994:	af 93       	push	r26
    1996:	bf 93       	push	r27
    1998:	ef 93       	push	r30
    199a:	ff 93       	push	r31
    199c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
    19a0:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
    19a4:	ac 01       	movw	r20, r24
    19a6:	09 2e       	mov	r0, r25
    19a8:	00 0c       	add	r0, r0
    19aa:	66 0b       	sbc	r22, r22
    19ac:	77 0b       	sbc	r23, r23
    19ae:	9a 01       	movw	r18, r20
    19b0:	11 27       	eor	r17, r17
    19b2:	00 27       	eor	r16, r16
    19b4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19b8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19bc:	60 e0       	ldi	r22, 0x00	; 0
    19be:	70 e0       	ldi	r23, 0x00	; 0
    19c0:	40 2b       	or	r20, r16
    19c2:	51 2b       	or	r21, r17
    19c4:	62 2b       	or	r22, r18
    19c6:	73 2b       	or	r23, r19
    19c8:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    19cc:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    19d0:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    19d4:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    19d8:	b0 9b       	sbis	0x16, 0	; 22
    19da:	1a c0       	rjmp	.+52     	; 0x1a10 <__vector_20+0x9a>
    19dc:	01 96       	adiw	r24, 0x01	; 1
    19de:	09 2e       	mov	r0, r25
    19e0:	00 0c       	add	r0, r0
    19e2:	aa 0b       	sbc	r26, r26
    19e4:	bb 0b       	sbc	r27, r27
    19e6:	bc 01       	movw	r22, r24
    19e8:	55 27       	eor	r21, r21
    19ea:	44 27       	eor	r20, r20
    19ec:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19f0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19f4:	a0 e0       	ldi	r26, 0x00	; 0
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	84 2b       	or	r24, r20
    19fa:	95 2b       	or	r25, r21
    19fc:	a6 2b       	or	r26, r22
    19fe:	b7 2b       	or	r27, r23
    1a00:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1a04:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1a08:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1a0c:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1a10:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable+0x1e>
    1a14:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0x1f>
    1a18:	30 97       	sbiw	r30, 0x00	; 0
    1a1a:	39 f0       	breq	.+14     	; 0x1a2a <__vector_20+0xb4>
    1a1c:	6f e0       	ldi	r22, 0x0F	; 15
    1a1e:	70 e0       	ldi	r23, 0x00	; 0
    1a20:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable+0x1e>
    1a24:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0x1f>
    1a28:	09 95       	icall
    1a2a:	0e 94 06 06 	call	0xc0c	; 0xc0c <schedule>
    1a2e:	ff 91       	pop	r31
    1a30:	ef 91       	pop	r30
    1a32:	bf 91       	pop	r27
    1a34:	af 91       	pop	r26
    1a36:	9f 91       	pop	r25
    1a38:	8f 91       	pop	r24
    1a3a:	7f 91       	pop	r23
    1a3c:	6f 91       	pop	r22
    1a3e:	5f 91       	pop	r21
    1a40:	4f 91       	pop	r20
    1a42:	3f 91       	pop	r19
    1a44:	2f 91       	pop	r18
    1a46:	1f 91       	pop	r17
    1a48:	0f 91       	pop	r16
    1a4a:	0f 90       	pop	r0
    1a4c:	0f be       	out	0x3f, r0	; 63
    1a4e:	0f 90       	pop	r0
    1a50:	1f 90       	pop	r1
    1a52:	18 95       	reti

00001a54 <__vector_21>:
    1a54:	1f 92       	push	r1
    1a56:	0f 92       	push	r0
    1a58:	0f b6       	in	r0, 0x3f	; 63
    1a5a:	0f 92       	push	r0
    1a5c:	11 24       	eor	r1, r1
    1a5e:	0f 93       	push	r16
    1a60:	1f 93       	push	r17
    1a62:	2f 93       	push	r18
    1a64:	3f 93       	push	r19
    1a66:	4f 93       	push	r20
    1a68:	5f 93       	push	r21
    1a6a:	6f 93       	push	r22
    1a6c:	7f 93       	push	r23
    1a6e:	8f 93       	push	r24
    1a70:	9f 93       	push	r25
    1a72:	af 93       	push	r26
    1a74:	bf 93       	push	r27
    1a76:	ef 93       	push	r30
    1a78:	ff 93       	push	r31
    1a7a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
    1a7e:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
    1a82:	ac 01       	movw	r20, r24
    1a84:	09 2e       	mov	r0, r25
    1a86:	00 0c       	add	r0, r0
    1a88:	66 0b       	sbc	r22, r22
    1a8a:	77 0b       	sbc	r23, r23
    1a8c:	9a 01       	movw	r18, r20
    1a8e:	11 27       	eor	r17, r17
    1a90:	00 27       	eor	r16, r16
    1a92:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a96:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a9a:	60 e0       	ldi	r22, 0x00	; 0
    1a9c:	70 e0       	ldi	r23, 0x00	; 0
    1a9e:	40 2b       	or	r20, r16
    1aa0:	51 2b       	or	r21, r17
    1aa2:	62 2b       	or	r22, r18
    1aa4:	73 2b       	or	r23, r19
    1aa6:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    1aaa:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    1aae:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    1ab2:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    1ab6:	b0 9b       	sbis	0x16, 0	; 22
    1ab8:	1a c0       	rjmp	.+52     	; 0x1aee <__vector_21+0x9a>
    1aba:	01 96       	adiw	r24, 0x01	; 1
    1abc:	09 2e       	mov	r0, r25
    1abe:	00 0c       	add	r0, r0
    1ac0:	aa 0b       	sbc	r26, r26
    1ac2:	bb 0b       	sbc	r27, r27
    1ac4:	bc 01       	movw	r22, r24
    1ac6:	55 27       	eor	r21, r21
    1ac8:	44 27       	eor	r20, r20
    1aca:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ace:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ad2:	a0 e0       	ldi	r26, 0x00	; 0
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	84 2b       	or	r24, r20
    1ad8:	95 2b       	or	r25, r21
    1ada:	a6 2b       	or	r26, r22
    1adc:	b7 2b       	or	r27, r23
    1ade:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1ae2:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1ae6:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1aea:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1aee:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <mtable+0x20>
    1af2:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <mtable+0x21>
    1af6:	30 97       	sbiw	r30, 0x00	; 0
    1af8:	39 f0       	breq	.+14     	; 0x1b08 <__vector_21+0xb4>
    1afa:	60 e1       	ldi	r22, 0x10	; 16
    1afc:	70 e0       	ldi	r23, 0x00	; 0
    1afe:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <otable+0x20>
    1b02:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <otable+0x21>
    1b06:	09 95       	icall
    1b08:	0e 94 06 06 	call	0xc0c	; 0xc0c <schedule>
    1b0c:	ff 91       	pop	r31
    1b0e:	ef 91       	pop	r30
    1b10:	bf 91       	pop	r27
    1b12:	af 91       	pop	r26
    1b14:	9f 91       	pop	r25
    1b16:	8f 91       	pop	r24
    1b18:	7f 91       	pop	r23
    1b1a:	6f 91       	pop	r22
    1b1c:	5f 91       	pop	r21
    1b1e:	4f 91       	pop	r20
    1b20:	3f 91       	pop	r19
    1b22:	2f 91       	pop	r18
    1b24:	1f 91       	pop	r17
    1b26:	0f 91       	pop	r16
    1b28:	0f 90       	pop	r0
    1b2a:	0f be       	out	0x3f, r0	; 63
    1b2c:	0f 90       	pop	r0
    1b2e:	1f 90       	pop	r1
    1b30:	18 95       	reti

00001b32 <__vector_22>:
    1b32:	1f 92       	push	r1
    1b34:	0f 92       	push	r0
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	0f 92       	push	r0
    1b3a:	11 24       	eor	r1, r1
    1b3c:	0f 93       	push	r16
    1b3e:	1f 93       	push	r17
    1b40:	2f 93       	push	r18
    1b42:	3f 93       	push	r19
    1b44:	4f 93       	push	r20
    1b46:	5f 93       	push	r21
    1b48:	6f 93       	push	r22
    1b4a:	7f 93       	push	r23
    1b4c:	8f 93       	push	r24
    1b4e:	9f 93       	push	r25
    1b50:	af 93       	push	r26
    1b52:	bf 93       	push	r27
    1b54:	ef 93       	push	r30
    1b56:	ff 93       	push	r31
    1b58:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
    1b5c:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
    1b60:	ac 01       	movw	r20, r24
    1b62:	09 2e       	mov	r0, r25
    1b64:	00 0c       	add	r0, r0
    1b66:	66 0b       	sbc	r22, r22
    1b68:	77 0b       	sbc	r23, r23
    1b6a:	9a 01       	movw	r18, r20
    1b6c:	11 27       	eor	r17, r17
    1b6e:	00 27       	eor	r16, r16
    1b70:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b74:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b78:	60 e0       	ldi	r22, 0x00	; 0
    1b7a:	70 e0       	ldi	r23, 0x00	; 0
    1b7c:	40 2b       	or	r20, r16
    1b7e:	51 2b       	or	r21, r17
    1b80:	62 2b       	or	r22, r18
    1b82:	73 2b       	or	r23, r19
    1b84:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    1b88:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    1b8c:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    1b90:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    1b94:	b0 9b       	sbis	0x16, 0	; 22
    1b96:	1a c0       	rjmp	.+52     	; 0x1bcc <__vector_22+0x9a>
    1b98:	01 96       	adiw	r24, 0x01	; 1
    1b9a:	09 2e       	mov	r0, r25
    1b9c:	00 0c       	add	r0, r0
    1b9e:	aa 0b       	sbc	r26, r26
    1ba0:	bb 0b       	sbc	r27, r27
    1ba2:	bc 01       	movw	r22, r24
    1ba4:	55 27       	eor	r21, r21
    1ba6:	44 27       	eor	r20, r20
    1ba8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1bac:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1bb0:	a0 e0       	ldi	r26, 0x00	; 0
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	84 2b       	or	r24, r20
    1bb6:	95 2b       	or	r25, r21
    1bb8:	a6 2b       	or	r26, r22
    1bba:	b7 2b       	or	r27, r23
    1bbc:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1bc0:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1bc4:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1bc8:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1bcc:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <mtable+0x22>
    1bd0:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <mtable+0x23>
    1bd4:	30 97       	sbiw	r30, 0x00	; 0
    1bd6:	39 f0       	breq	.+14     	; 0x1be6 <__vector_22+0xb4>
    1bd8:	61 e1       	ldi	r22, 0x11	; 17
    1bda:	70 e0       	ldi	r23, 0x00	; 0
    1bdc:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <otable+0x22>
    1be0:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <otable+0x23>
    1be4:	09 95       	icall
    1be6:	0e 94 06 06 	call	0xc0c	; 0xc0c <schedule>
    1bea:	ff 91       	pop	r31
    1bec:	ef 91       	pop	r30
    1bee:	bf 91       	pop	r27
    1bf0:	af 91       	pop	r26
    1bf2:	9f 91       	pop	r25
    1bf4:	8f 91       	pop	r24
    1bf6:	7f 91       	pop	r23
    1bf8:	6f 91       	pop	r22
    1bfa:	5f 91       	pop	r21
    1bfc:	4f 91       	pop	r20
    1bfe:	3f 91       	pop	r19
    1c00:	2f 91       	pop	r18
    1c02:	1f 91       	pop	r17
    1c04:	0f 91       	pop	r16
    1c06:	0f 90       	pop	r0
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	0f 90       	pop	r0
    1c0c:	1f 90       	pop	r1
    1c0e:	18 95       	reti

00001c10 <idle>:
    1c10:	0e 94 06 06 	call	0xc0c	; 0xc0c <schedule>
    1c14:	78 94       	sei
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	83 bf       	out	0x33, r24	; 51
    1c1a:	88 95       	sleep
    1c1c:	fc cf       	rjmp	.-8      	; 0x1c16 <idle+0x6>

00001c1e <__vector_9>:
    1c1e:	1f 92       	push	r1
    1c20:	0f 92       	push	r0
    1c22:	0f b6       	in	r0, 0x3f	; 63
    1c24:	0f 92       	push	r0
    1c26:	11 24       	eor	r1, r1
    1c28:	2f 93       	push	r18
    1c2a:	3f 93       	push	r19
    1c2c:	4f 93       	push	r20
    1c2e:	5f 93       	push	r21
    1c30:	6f 93       	push	r22
    1c32:	7f 93       	push	r23
    1c34:	8f 93       	push	r24
    1c36:	9f 93       	push	r25
    1c38:	ef 93       	push	r30
    1c3a:	ff 93       	push	r31
    1c3c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
    1c40:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
    1c44:	01 96       	adiw	r24, 0x01	; 1
    1c46:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <__data_end+0x1>
    1c4a:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__data_end>
    1c4e:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <timerQ>
    1c52:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <timerQ+0x1>
    1c56:	30 97       	sbiw	r30, 0x00	; 0
    1c58:	01 f1       	breq	.+64     	; 0x1c9a <__vector_9+0x7c>
    1c5a:	42 81       	ldd	r20, Z+2	; 0x02
    1c5c:	53 81       	ldd	r21, Z+3	; 0x03
    1c5e:	64 81       	ldd	r22, Z+4	; 0x04
    1c60:	75 81       	ldd	r23, Z+5	; 0x05
    1c62:	86 17       	cp	r24, r22
    1c64:	97 07       	cpc	r25, r23
    1c66:	c9 f4       	brne	.+50     	; 0x1c9a <__vector_9+0x7c>
    1c68:	ca 01       	movw	r24, r20
    1c6a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c6e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c72:	42 1b       	sub	r20, r18
    1c74:	53 0b       	sbc	r21, r19
    1c76:	41 30       	cpi	r20, 0x01	; 1
    1c78:	51 05       	cpc	r21, r1
    1c7a:	29 f4       	brne	.+10     	; 0x1c86 <__vector_9+0x68>
    1c7c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c80:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c84:	01 96       	adiw	r24, 0x01	; 1
    1c86:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1c8a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1c8e:	ef e6       	ldi	r30, 0x6F	; 111
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	82 60       	ori	r24, 0x02	; 2
    1c96:	80 83       	st	Z, r24
    1c98:	05 c0       	rjmp	.+10     	; 0x1ca4 <__vector_9+0x86>
    1c9a:	ef e6       	ldi	r30, 0x6F	; 111
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	8d 7f       	andi	r24, 0xFD	; 253
    1ca2:	80 83       	st	Z, r24
    1ca4:	ff 91       	pop	r31
    1ca6:	ef 91       	pop	r30
    1ca8:	9f 91       	pop	r25
    1caa:	8f 91       	pop	r24
    1cac:	7f 91       	pop	r23
    1cae:	6f 91       	pop	r22
    1cb0:	5f 91       	pop	r21
    1cb2:	4f 91       	pop	r20
    1cb4:	3f 91       	pop	r19
    1cb6:	2f 91       	pop	r18
    1cb8:	0f 90       	pop	r0
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	0f 90       	pop	r0
    1cbe:	1f 90       	pop	r1
    1cc0:	18 95       	reti

00001cc2 <__vector_7>:
    1cc2:	1f 92       	push	r1
    1cc4:	0f 92       	push	r0
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	0f 92       	push	r0
    1cca:	11 24       	eor	r1, r1
    1ccc:	cf 92       	push	r12
    1cce:	df 92       	push	r13
    1cd0:	ef 92       	push	r14
    1cd2:	ff 92       	push	r15
    1cd4:	2f 93       	push	r18
    1cd6:	3f 93       	push	r19
    1cd8:	4f 93       	push	r20
    1cda:	5f 93       	push	r21
    1cdc:	6f 93       	push	r22
    1cde:	7f 93       	push	r23
    1ce0:	8f 93       	push	r24
    1ce2:	9f 93       	push	r25
    1ce4:	af 93       	push	r26
    1ce6:	bf 93       	push	r27
    1ce8:	ef 93       	push	r30
    1cea:	ff 93       	push	r31
    1cec:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
    1cf0:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
    1cf4:	6c 01       	movw	r12, r24
    1cf6:	09 2e       	mov	r0, r25
    1cf8:	00 0c       	add	r0, r0
    1cfa:	ee 08       	sbc	r14, r14
    1cfc:	ff 08       	sbc	r15, r15
    1cfe:	76 01       	movw	r14, r12
    1d00:	dd 24       	eor	r13, r13
    1d02:	cc 24       	eor	r12, r12
    1d04:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d08:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d0c:	60 e0       	ldi	r22, 0x00	; 0
    1d0e:	70 e0       	ldi	r23, 0x00	; 0
    1d10:	c4 2a       	or	r12, r20
    1d12:	d5 2a       	or	r13, r21
    1d14:	e6 2a       	or	r14, r22
    1d16:	f7 2a       	or	r15, r23
    1d18:	b0 9b       	sbis	0x16, 0	; 22
    1d1a:	1e c0       	rjmp	.+60     	; 0x1d58 <__vector_7+0x96>
    1d1c:	6c 01       	movw	r12, r24
    1d1e:	2f ef       	ldi	r18, 0xFF	; 255
    1d20:	c2 1a       	sub	r12, r18
    1d22:	d2 0a       	sbc	r13, r18
    1d24:	0d 2c       	mov	r0, r13
    1d26:	00 0c       	add	r0, r0
    1d28:	ee 08       	sbc	r14, r14
    1d2a:	ff 08       	sbc	r15, r15
    1d2c:	d6 01       	movw	r26, r12
    1d2e:	99 27       	eor	r25, r25
    1d30:	88 27       	eor	r24, r24
    1d32:	c0 90 84 00 	lds	r12, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d36:	d0 90 85 00 	lds	r13, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d3a:	e1 2c       	mov	r14, r1
    1d3c:	f1 2c       	mov	r15, r1
    1d3e:	c8 2a       	or	r12, r24
    1d40:	d9 2a       	or	r13, r25
    1d42:	ea 2a       	or	r14, r26
    1d44:	fb 2a       	or	r15, r27
    1d46:	08 c0       	rjmp	.+16     	; 0x1d58 <__vector_7+0x96>
    1d48:	8e e3       	ldi	r24, 0x3E	; 62
    1d4a:	91 e0       	ldi	r25, 0x01	; 1
    1d4c:	0e 94 d1 05 	call	0xba2	; 0xba2 <dequeue>
    1d50:	60 e4       	ldi	r22, 0x40	; 64
    1d52:	71 e0       	ldi	r23, 0x01	; 1
    1d54:	0e 94 6f 05 	call	0xade	; 0xade <enqueueByDeadline>
    1d58:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <timerQ>
    1d5c:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <timerQ+0x1>
    1d60:	30 97       	sbiw	r30, 0x00	; 0
    1d62:	69 f0       	breq	.+26     	; 0x1d7e <__vector_7+0xbc>
    1d64:	82 81       	ldd	r24, Z+2	; 0x02
    1d66:	93 81       	ldd	r25, Z+3	; 0x03
    1d68:	a4 81       	ldd	r26, Z+4	; 0x04
    1d6a:	b5 81       	ldd	r27, Z+5	; 0x05
    1d6c:	8c 19       	sub	r24, r12
    1d6e:	9d 09       	sbc	r25, r13
    1d70:	ae 09       	sbc	r26, r14
    1d72:	bf 09       	sbc	r27, r15
    1d74:	18 16       	cp	r1, r24
    1d76:	19 06       	cpc	r1, r25
    1d78:	1a 06       	cpc	r1, r26
    1d7a:	1b 06       	cpc	r1, r27
    1d7c:	2c f7       	brge	.-54     	; 0x1d48 <__vector_7+0x86>
    1d7e:	30 97       	sbiw	r30, 0x00	; 0
    1d80:	21 f1       	breq	.+72     	; 0x1dca <__vector_7+0x108>
    1d82:	82 81       	ldd	r24, Z+2	; 0x02
    1d84:	93 81       	ldd	r25, Z+3	; 0x03
    1d86:	a4 81       	ldd	r26, Z+4	; 0x04
    1d88:	b5 81       	ldd	r27, Z+5	; 0x05
    1d8a:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <__data_end>
    1d8e:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <__data_end+0x1>
    1d92:	2a 17       	cp	r18, r26
    1d94:	3b 07       	cpc	r19, r27
    1d96:	c9 f4       	brne	.+50     	; 0x1dca <__vector_7+0x108>
    1d98:	9c 01       	movw	r18, r24
    1d9a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d9e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1da2:	84 1b       	sub	r24, r20
    1da4:	95 0b       	sbc	r25, r21
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	31 f4       	brne	.+12     	; 0x1db6 <__vector_7+0xf4>
    1daa:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1dae:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1db2:	2f 5f       	subi	r18, 0xFF	; 255
    1db4:	3f 4f       	sbci	r19, 0xFF	; 255
    1db6:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1dba:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1dbe:	ef e6       	ldi	r30, 0x6F	; 111
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	82 60       	ori	r24, 0x02	; 2
    1dc6:	80 83       	st	Z, r24
    1dc8:	05 c0       	rjmp	.+10     	; 0x1dd4 <__vector_7+0x112>
    1dca:	ef e6       	ldi	r30, 0x6F	; 111
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	8d 7f       	andi	r24, 0xFD	; 253
    1dd2:	80 83       	st	Z, r24
    1dd4:	0e 94 06 06 	call	0xc0c	; 0xc0c <schedule>
    1dd8:	ff 91       	pop	r31
    1dda:	ef 91       	pop	r30
    1ddc:	bf 91       	pop	r27
    1dde:	af 91       	pop	r26
    1de0:	9f 91       	pop	r25
    1de2:	8f 91       	pop	r24
    1de4:	7f 91       	pop	r23
    1de6:	6f 91       	pop	r22
    1de8:	5f 91       	pop	r21
    1dea:	4f 91       	pop	r20
    1dec:	3f 91       	pop	r19
    1dee:	2f 91       	pop	r18
    1df0:	ff 90       	pop	r15
    1df2:	ef 90       	pop	r14
    1df4:	df 90       	pop	r13
    1df6:	cf 90       	pop	r12
    1df8:	0f 90       	pop	r0
    1dfa:	0f be       	out	0x3f, r0	; 63
    1dfc:	0f 90       	pop	r0
    1dfe:	1f 90       	pop	r1
    1e00:	18 95       	reti

00001e02 <async>:
    1e02:	3f 92       	push	r3
    1e04:	4f 92       	push	r4
    1e06:	5f 92       	push	r5
    1e08:	6f 92       	push	r6
    1e0a:	7f 92       	push	r7
    1e0c:	8f 92       	push	r8
    1e0e:	9f 92       	push	r9
    1e10:	af 92       	push	r10
    1e12:	bf 92       	push	r11
    1e14:	cf 92       	push	r12
    1e16:	df 92       	push	r13
    1e18:	ef 92       	push	r14
    1e1a:	ff 92       	push	r15
    1e1c:	0f 93       	push	r16
    1e1e:	1f 93       	push	r17
    1e20:	cf 93       	push	r28
    1e22:	df 93       	push	r29
    1e24:	2b 01       	movw	r4, r22
    1e26:	3c 01       	movw	r6, r24
    1e28:	49 01       	movw	r8, r18
    1e2a:	5a 01       	movw	r10, r20
    1e2c:	8f b7       	in	r24, 0x3f	; 63
    1e2e:	80 78       	andi	r24, 0x80	; 128
    1e30:	38 2e       	mov	r3, r24
    1e32:	f8 94       	cli
    1e34:	86 e0       	ldi	r24, 0x06	; 6
    1e36:	91 e0       	ldi	r25, 0x01	; 1
    1e38:	0e 94 d1 05 	call	0xba2	; 0xba2 <dequeue>
    1e3c:	ec 01       	movw	r28, r24
    1e3e:	1b 87       	std	Y+11, r17	; 0x0b
    1e40:	0a 87       	std	Y+10, r16	; 0x0a
    1e42:	fd 86       	std	Y+13, r15	; 0x0d
    1e44:	ec 86       	std	Y+12, r14	; 0x0c
    1e46:	df 86       	std	Y+15, r13	; 0x0f
    1e48:	ce 86       	std	Y+14, r12	; 0x0e
    1e4a:	33 20       	and	r3, r3
    1e4c:	61 f0       	breq	.+24     	; 0x1e66 <async+0x64>
    1e4e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1e52:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1e56:	02 80       	ldd	r0, Z+2	; 0x02
    1e58:	f3 81       	ldd	r31, Z+3	; 0x03
    1e5a:	e0 2d       	mov	r30, r0
    1e5c:	82 81       	ldd	r24, Z+2	; 0x02
    1e5e:	93 81       	ldd	r25, Z+3	; 0x03
    1e60:	a4 81       	ldd	r26, Z+4	; 0x04
    1e62:	b5 81       	ldd	r27, Z+5	; 0x05
    1e64:	08 c0       	rjmp	.+16     	; 0x1e76 <async+0x74>
    1e66:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <timestamp>
    1e6a:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <timestamp+0x1>
    1e6e:	a0 91 3c 01 	lds	r26, 0x013C	; 0x80013c <timestamp+0x2>
    1e72:	b0 91 3d 01 	lds	r27, 0x013D	; 0x80013d <timestamp+0x3>
    1e76:	48 0e       	add	r4, r24
    1e78:	59 1e       	adc	r5, r25
    1e7a:	6a 1e       	adc	r6, r26
    1e7c:	7b 1e       	adc	r7, r27
    1e7e:	4a 82       	std	Y+2, r4	; 0x02
    1e80:	5b 82       	std	Y+3, r5	; 0x03
    1e82:	6c 82       	std	Y+4, r6	; 0x04
    1e84:	7d 82       	std	Y+5, r7	; 0x05
    1e86:	18 14       	cp	r1, r8
    1e88:	19 04       	cpc	r1, r9
    1e8a:	1a 04       	cpc	r1, r10
    1e8c:	1b 04       	cpc	r1, r11
    1e8e:	44 f0       	brlt	.+16     	; 0x1ea0 <async+0x9e>
    1e90:	0f 2e       	mov	r0, r31
    1e92:	88 24       	eor	r8, r8
    1e94:	8a 94       	dec	r8
    1e96:	98 2c       	mov	r9, r8
    1e98:	a8 2c       	mov	r10, r8
    1e9a:	ff e7       	ldi	r31, 0x7F	; 127
    1e9c:	bf 2e       	mov	r11, r31
    1e9e:	f0 2d       	mov	r31, r0
    1ea0:	84 0c       	add	r8, r4
    1ea2:	95 1c       	adc	r9, r5
    1ea4:	a6 1c       	adc	r10, r6
    1ea6:	b7 1c       	adc	r11, r7
    1ea8:	8e 82       	std	Y+6, r8	; 0x06
    1eaa:	9f 82       	std	Y+7, r9	; 0x07
    1eac:	a8 86       	std	Y+8, r10	; 0x08
    1eae:	b9 86       	std	Y+9, r11	; 0x09
    1eb0:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <__data_end>
    1eb4:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <__data_end+0x1>
    1eb8:	c9 01       	movw	r24, r18
    1eba:	03 2e       	mov	r0, r19
    1ebc:	00 0c       	add	r0, r0
    1ebe:	aa 0b       	sbc	r26, r26
    1ec0:	bb 0b       	sbc	r27, r27
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	99 27       	eor	r25, r25
    1ec6:	88 27       	eor	r24, r24
    1ec8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ecc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ed0:	60 e0       	ldi	r22, 0x00	; 0
    1ed2:	70 e0       	ldi	r23, 0x00	; 0
    1ed4:	84 2b       	or	r24, r20
    1ed6:	95 2b       	or	r25, r21
    1ed8:	a6 2b       	or	r26, r22
    1eda:	b7 2b       	or	r27, r23
    1edc:	b0 9b       	sbis	0x16, 0	; 22
    1ede:	13 c0       	rjmp	.+38     	; 0x1f06 <async+0x104>
    1ee0:	c9 01       	movw	r24, r18
    1ee2:	01 96       	adiw	r24, 0x01	; 1
    1ee4:	09 2e       	mov	r0, r25
    1ee6:	00 0c       	add	r0, r0
    1ee8:	aa 0b       	sbc	r26, r26
    1eea:	bb 0b       	sbc	r27, r27
    1eec:	dc 01       	movw	r26, r24
    1eee:	99 27       	eor	r25, r25
    1ef0:	88 27       	eor	r24, r24
    1ef2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ef6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1efa:	60 e0       	ldi	r22, 0x00	; 0
    1efc:	70 e0       	ldi	r23, 0x00	; 0
    1efe:	84 2b       	or	r24, r20
    1f00:	95 2b       	or	r25, r21
    1f02:	a6 2b       	or	r26, r22
    1f04:	b7 2b       	or	r27, r23
    1f06:	48 1a       	sub	r4, r24
    1f08:	59 0a       	sbc	r5, r25
    1f0a:	6a 0a       	sbc	r6, r26
    1f0c:	7b 0a       	sbc	r7, r27
    1f0e:	14 14       	cp	r1, r4
    1f10:	15 04       	cpc	r1, r5
    1f12:	16 04       	cpc	r1, r6
    1f14:	17 04       	cpc	r1, r7
    1f16:	ac f5       	brge	.+106    	; 0x1f82 <async+0x180>
    1f18:	6e e3       	ldi	r22, 0x3E	; 62
    1f1a:	71 e0       	ldi	r23, 0x01	; 1
    1f1c:	ce 01       	movw	r24, r28
    1f1e:	0e 94 a0 05 	call	0xb40	; 0xb40 <enqueueByBaseline>
    1f22:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <timerQ>
    1f26:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <timerQ+0x1>
    1f2a:	30 97       	sbiw	r30, 0x00	; 0
    1f2c:	21 f1       	breq	.+72     	; 0x1f76 <async+0x174>
    1f2e:	82 81       	ldd	r24, Z+2	; 0x02
    1f30:	93 81       	ldd	r25, Z+3	; 0x03
    1f32:	a4 81       	ldd	r26, Z+4	; 0x04
    1f34:	b5 81       	ldd	r27, Z+5	; 0x05
    1f36:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <__data_end>
    1f3a:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <__data_end+0x1>
    1f3e:	2a 17       	cp	r18, r26
    1f40:	3b 07       	cpc	r19, r27
    1f42:	c9 f4       	brne	.+50     	; 0x1f76 <async+0x174>
    1f44:	9c 01       	movw	r18, r24
    1f46:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1f4a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1f4e:	84 1b       	sub	r24, r20
    1f50:	95 0b       	sbc	r25, r21
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	31 f4       	brne	.+12     	; 0x1f62 <async+0x160>
    1f56:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1f5a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1f5e:	2f 5f       	subi	r18, 0xFF	; 255
    1f60:	3f 4f       	sbci	r19, 0xFF	; 255
    1f62:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1f66:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1f6a:	ef e6       	ldi	r30, 0x6F	; 111
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	82 60       	ori	r24, 0x02	; 2
    1f72:	80 83       	st	Z, r24
    1f74:	39 c0       	rjmp	.+114    	; 0x1fe8 <async+0x1e6>
    1f76:	ef e6       	ldi	r30, 0x6F	; 111
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 81       	ld	r24, Z
    1f7c:	8d 7f       	andi	r24, 0xFD	; 253
    1f7e:	80 83       	st	Z, r24
    1f80:	33 c0       	rjmp	.+102    	; 0x1fe8 <async+0x1e6>
    1f82:	60 e4       	ldi	r22, 0x40	; 64
    1f84:	71 e0       	ldi	r23, 0x01	; 1
    1f86:	ce 01       	movw	r24, r28
    1f88:	0e 94 6f 05 	call	0xade	; 0xade <enqueueByDeadline>
    1f8c:	33 20       	and	r3, r3
    1f8e:	61 f1       	breq	.+88     	; 0x1fe8 <async+0x1e6>
    1f90:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    1f94:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    1f98:	89 2b       	or	r24, r25
    1f9a:	31 f1       	breq	.+76     	; 0x1fe8 <async+0x1e6>
    1f9c:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <msgQ>
    1fa0:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <msgQ+0x1>
    1fa4:	86 81       	ldd	r24, Z+6	; 0x06
    1fa6:	97 81       	ldd	r25, Z+7	; 0x07
    1fa8:	a0 85       	ldd	r26, Z+8	; 0x08
    1faa:	b1 85       	ldd	r27, Z+9	; 0x09
    1fac:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    1fb0:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    1fb4:	02 80       	ldd	r0, Z+2	; 0x02
    1fb6:	f3 81       	ldd	r31, Z+3	; 0x03
    1fb8:	e0 2d       	mov	r30, r0
    1fba:	46 81       	ldd	r20, Z+6	; 0x06
    1fbc:	57 81       	ldd	r21, Z+7	; 0x07
    1fbe:	60 85       	ldd	r22, Z+8	; 0x08
    1fc0:	71 85       	ldd	r23, Z+9	; 0x09
    1fc2:	84 1b       	sub	r24, r20
    1fc4:	95 0b       	sbc	r25, r21
    1fc6:	a6 0b       	sbc	r26, r22
    1fc8:	b7 0b       	sbc	r27, r23
    1fca:	72 f4       	brpl	.+28     	; 0x1fe8 <async+0x1e6>
    1fcc:	84 e0       	ldi	r24, 0x04	; 4
    1fce:	91 e0       	ldi	r25, 0x01	; 1
    1fd0:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <pop>
    1fd4:	62 e0       	ldi	r22, 0x02	; 2
    1fd6:	71 e0       	ldi	r23, 0x01	; 1
    1fd8:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <push>
    1fdc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <activeStack>
    1fe0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <activeStack+0x1>
    1fe4:	0e 94 4f 05 	call	0xa9e	; 0xa9e <dispatch>
    1fe8:	33 20       	and	r3, r3
    1fea:	09 f0       	breq	.+2      	; 0x1fee <async+0x1ec>
    1fec:	78 94       	sei
    1fee:	ce 01       	movw	r24, r28
    1ff0:	df 91       	pop	r29
    1ff2:	cf 91       	pop	r28
    1ff4:	1f 91       	pop	r17
    1ff6:	0f 91       	pop	r16
    1ff8:	ff 90       	pop	r15
    1ffa:	ef 90       	pop	r14
    1ffc:	df 90       	pop	r13
    1ffe:	cf 90       	pop	r12
    2000:	bf 90       	pop	r11
    2002:	af 90       	pop	r10
    2004:	9f 90       	pop	r9
    2006:	8f 90       	pop	r8
    2008:	7f 90       	pop	r7
    200a:	6f 90       	pop	r6
    200c:	5f 90       	pop	r5
    200e:	4f 90       	pop	r4
    2010:	3f 90       	pop	r3
    2012:	08 95       	ret

00002014 <sync>:
    2014:	cf 92       	push	r12
    2016:	df 92       	push	r13
    2018:	ef 92       	push	r14
    201a:	ff 92       	push	r15
    201c:	0f 93       	push	r16
    201e:	1f 93       	push	r17
    2020:	cf 93       	push	r28
    2022:	df 93       	push	r29
    2024:	ec 01       	movw	r28, r24
    2026:	7b 01       	movw	r14, r22
    2028:	6a 01       	movw	r12, r20
    202a:	1f b7       	in	r17, 0x3f	; 63
    202c:	10 78       	andi	r17, 0x80	; 128
    202e:	f8 94       	cli
    2030:	a8 81       	ld	r26, Y
    2032:	b9 81       	ldd	r27, Y+1	; 0x01
    2034:	10 97       	sbiw	r26, 0x00	; 0
    2036:	19 f4       	brne	.+6      	; 0x203e <sync+0x2a>
    2038:	35 c0       	rjmp	.+106    	; 0x20a4 <sync+0x90>
    203a:	a0 81       	ld	r26, Z
    203c:	b1 81       	ldd	r27, Z+1	; 0x01
    203e:	14 96       	adiw	r26, 0x04	; 4
    2040:	ed 91       	ld	r30, X+
    2042:	fc 91       	ld	r31, X
    2044:	15 97       	sbiw	r26, 0x05	; 5
    2046:	30 97       	sbiw	r30, 0x00	; 0
    2048:	c1 f7       	brne	.-16     	; 0x203a <sync+0x26>
    204a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    204e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2052:	a2 17       	cp	r26, r18
    2054:	b3 07       	cpc	r27, r19
    2056:	11 f0       	breq	.+4      	; 0x205c <sync+0x48>
    2058:	11 11       	cpse	r17, r1
    205a:	07 c0       	rjmp	.+14     	; 0x206a <sync+0x56>
    205c:	11 23       	and	r17, r17
    205e:	09 f4       	brne	.+2      	; 0x2062 <sync+0x4e>
    2060:	4a c0       	rjmp	.+148    	; 0x20f6 <sync+0xe2>
    2062:	78 94       	sei
    2064:	8f ef       	ldi	r24, 0xFF	; 255
    2066:	9f ef       	ldi	r25, 0xFF	; 255
    2068:	4e c0       	rjmp	.+156    	; 0x2106 <sync+0xf2>
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	9b 81       	ldd	r25, Y+3	; 0x03
    206e:	00 97       	sbiw	r24, 0x00	; 0
    2070:	19 f0       	breq	.+6      	; 0x2078 <sync+0x64>
    2072:	fc 01       	movw	r30, r24
    2074:	15 82       	std	Z+5, r1	; 0x05
    2076:	14 82       	std	Z+4, r1	; 0x04
    2078:	3b 83       	std	Y+3, r19	; 0x03
    207a:	2a 83       	std	Y+2, r18	; 0x02
    207c:	f9 01       	movw	r30, r18
    207e:	d5 83       	std	Z+5, r29	; 0x05
    2080:	c4 83       	std	Z+4, r28	; 0x04
    2082:	cd 01       	movw	r24, r26
    2084:	0e 94 4f 05 	call	0xa9e	; 0xa9e <dispatch>
    2088:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    208c:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2090:	82 81       	ldd	r24, Z+2	; 0x02
    2092:	93 81       	ldd	r25, Z+3	; 0x03
    2094:	89 2b       	or	r24, r25
    2096:	31 f4       	brne	.+12     	; 0x20a4 <sync+0x90>
    2098:	11 23       	and	r17, r17
    209a:	81 f1       	breq	.+96     	; 0x20fc <sync+0xe8>
    209c:	78 94       	sei
    209e:	80 e0       	ldi	r24, 0x00	; 0
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	31 c0       	rjmp	.+98     	; 0x2106 <sync+0xf2>
    20a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    20a8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    20ac:	99 83       	std	Y+1, r25	; 0x01
    20ae:	88 83       	st	Y, r24
    20b0:	11 23       	and	r17, r17
    20b2:	29 f0       	breq	.+10     	; 0x20be <sync+0xaa>
    20b4:	8a 81       	ldd	r24, Y+2	; 0x02
    20b6:	9b 81       	ldd	r25, Y+3	; 0x03
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	09 f0       	breq	.+2      	; 0x20be <sync+0xaa>
    20bc:	78 94       	sei
    20be:	b6 01       	movw	r22, r12
    20c0:	ce 01       	movw	r24, r28
    20c2:	f7 01       	movw	r30, r14
    20c4:	09 95       	icall
    20c6:	f8 2e       	mov	r15, r24
    20c8:	09 2f       	mov	r16, r25
    20ca:	8f b7       	in	r24, 0x3f	; 63
    20cc:	f8 94       	cli
    20ce:	19 82       	std	Y+1, r1	; 0x01
    20d0:	18 82       	st	Y, r1
    20d2:	8a 81       	ldd	r24, Y+2	; 0x02
    20d4:	9b 81       	ldd	r25, Y+3	; 0x03
    20d6:	82 30       	cpi	r24, 0x02	; 2
    20d8:	91 05       	cpc	r25, r1
    20da:	38 f0       	brcs	.+14     	; 0x20ea <sync+0xd6>
    20dc:	1b 82       	std	Y+3, r1	; 0x03
    20de:	1a 82       	std	Y+2, r1	; 0x02
    20e0:	fc 01       	movw	r30, r24
    20e2:	15 82       	std	Z+5, r1	; 0x05
    20e4:	14 82       	std	Z+4, r1	; 0x04
    20e6:	0e 94 4f 05 	call	0xa9e	; 0xa9e <dispatch>
    20ea:	11 23       	and	r17, r17
    20ec:	51 f0       	breq	.+20     	; 0x2102 <sync+0xee>
    20ee:	78 94       	sei
    20f0:	8f 2d       	mov	r24, r15
    20f2:	90 2f       	mov	r25, r16
    20f4:	08 c0       	rjmp	.+16     	; 0x2106 <sync+0xf2>
    20f6:	8f ef       	ldi	r24, 0xFF	; 255
    20f8:	9f ef       	ldi	r25, 0xFF	; 255
    20fa:	05 c0       	rjmp	.+10     	; 0x2106 <sync+0xf2>
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	02 c0       	rjmp	.+4      	; 0x2106 <sync+0xf2>
    2102:	8f 2d       	mov	r24, r15
    2104:	90 2f       	mov	r25, r16
    2106:	df 91       	pop	r29
    2108:	cf 91       	pop	r28
    210a:	1f 91       	pop	r17
    210c:	0f 91       	pop	r16
    210e:	ff 90       	pop	r15
    2110:	ef 90       	pop	r14
    2112:	df 90       	pop	r13
    2114:	cf 90       	pop	r12
    2116:	08 95       	ret

00002118 <run>:
    2118:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    211c:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2120:	80 e4       	ldi	r24, 0x40	; 64
    2122:	91 e0       	ldi	r25, 0x01	; 1
    2124:	0e 94 d1 05 	call	0xba2	; 0xba2 <dequeue>
    2128:	ec 01       	movw	r28, r24
    212a:	f8 01       	movw	r30, r16
    212c:	93 83       	std	Z+3, r25	; 0x03
    212e:	82 83       	std	Z+2, r24	; 0x02
    2130:	78 94       	sei
    2132:	6c 85       	ldd	r22, Y+12	; 0x0c
    2134:	7d 85       	ldd	r23, Y+13	; 0x0d
    2136:	4e 85       	ldd	r20, Y+14	; 0x0e
    2138:	5f 85       	ldd	r21, Y+15	; 0x0f
    213a:	8a 85       	ldd	r24, Y+10	; 0x0a
    213c:	9b 85       	ldd	r25, Y+11	; 0x0b
    213e:	0e 94 0a 10 	call	0x2014	; 0x2014 <sync>
    2142:	8f b7       	in	r24, 0x3f	; 63
    2144:	f8 94       	cli
    2146:	66 e0       	ldi	r22, 0x06	; 6
    2148:	71 e0       	ldi	r23, 0x01	; 1
    214a:	ce 01       	movw	r24, r28
    214c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <insert>
    2150:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    2154:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    2158:	01 90       	ld	r0, Z+
    215a:	f0 81       	ld	r31, Z
    215c:	e0 2d       	mov	r30, r0
    215e:	c2 81       	ldd	r28, Z+2	; 0x02
    2160:	d3 81       	ldd	r29, Z+3	; 0x03
    2162:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <msgQ>
    2166:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <msgQ+0x1>
    216a:	30 97       	sbiw	r30, 0x00	; 0
    216c:	a1 f0       	breq	.+40     	; 0x2196 <run+0x7e>
    216e:	20 97       	sbiw	r28, 0x00	; 0
    2170:	99 f2       	breq	.-90     	; 0x2118 <run>
    2172:	86 81       	ldd	r24, Z+6	; 0x06
    2174:	97 81       	ldd	r25, Z+7	; 0x07
    2176:	a0 85       	ldd	r26, Z+8	; 0x08
    2178:	b1 85       	ldd	r27, Z+9	; 0x09
    217a:	4e 81       	ldd	r20, Y+6	; 0x06
    217c:	5f 81       	ldd	r21, Y+7	; 0x07
    217e:	68 85       	ldd	r22, Y+8	; 0x08
    2180:	79 85       	ldd	r23, Y+9	; 0x09
    2182:	84 1b       	sub	r24, r20
    2184:	95 0b       	sbc	r25, r21
    2186:	a6 0b       	sbc	r26, r22
    2188:	b7 0b       	sbc	r27, r23
    218a:	18 16       	cp	r1, r24
    218c:	19 06       	cpc	r1, r25
    218e:	1a 06       	cpc	r1, r26
    2190:	1b 06       	cpc	r1, r27
    2192:	0c f0       	brlt	.+2      	; 0x2196 <run+0x7e>
    2194:	c1 cf       	rjmp	.-126    	; 0x2118 <run>
    2196:	82 e0       	ldi	r24, 0x02	; 2
    2198:	91 e0       	ldi	r25, 0x01	; 1
    219a:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <pop>
    219e:	64 e0       	ldi	r22, 0x04	; 4
    21a0:	71 e0       	ldi	r23, 0x01	; 1
    21a2:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <push>
    21a6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <activeStack>
    21aa:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <activeStack+0x1>
    21ae:	02 c0       	rjmp	.+4      	; 0x21b4 <run+0x9c>
    21b0:	a0 81       	ld	r26, Z
    21b2:	b1 81       	ldd	r27, Z+1	; 0x01
    21b4:	14 96       	adiw	r26, 0x04	; 4
    21b6:	ed 91       	ld	r30, X+
    21b8:	fc 91       	ld	r31, X
    21ba:	15 97       	sbiw	r26, 0x05	; 5
    21bc:	30 97       	sbiw	r30, 0x00	; 0
    21be:	c1 f7       	brne	.-16     	; 0x21b0 <run+0x98>
    21c0:	cd 01       	movw	r24, r26
    21c2:	0e 94 4f 05 	call	0xa9e	; 0xa9e <dispatch>
    21c6:	a8 cf       	rjmp	.-176    	; 0x2118 <run>

000021c8 <install>:
    thread0.msg = NULL;
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    21c8:	fc 01       	movw	r30, r24
    if (i >= 0 && i < N_VECTORS) {
    21ca:	42 31       	cpi	r20, 0x12	; 18
    21cc:	b8 f4       	brcc	.+46     	; 0x21fc <install+0x34>
        char status;
        DISABLE(status);
    21ce:	9f b7       	in	r25, 0x3f	; 63
    21d0:	90 78       	andi	r25, 0x80	; 128
    21d2:	f8 94       	cli
        otable[i] = obj;
    21d4:	50 e0       	ldi	r21, 0x00	; 0
    21d6:	44 0f       	add	r20, r20
    21d8:	55 1f       	adc	r21, r21
    21da:	da 01       	movw	r26, r20
    21dc:	ae 5b       	subi	r26, 0xBE	; 190
    21de:	be 4f       	sbci	r27, 0xFE	; 254
    21e0:	ed 93       	st	X+, r30
    21e2:	fc 93       	st	X, r31
        mtable[i] = m;
    21e4:	da 01       	movw	r26, r20
    21e6:	a6 52       	subi	r26, 0x26	; 38
    21e8:	be 4f       	sbci	r27, 0xFE	; 254
    21ea:	6d 93       	st	X+, r22
    21ec:	7c 93       	st	X, r23
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    21ee:	21 e0       	ldi	r18, 0x01	; 1
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	33 83       	std	Z+3, r19	; 0x03
    21f4:	22 83       	std	Z+2, r18	; 0x02
        ENABLE(status);
    21f6:	99 23       	and	r25, r25
    21f8:	09 f0       	breq	.+2      	; 0x21fc <install+0x34>
    21fa:	78 94       	sei
    21fc:	08 95       	ret

000021fe <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    21fe:	8c 01       	movw	r16, r24
    2200:	7b 01       	movw	r14, r22
    2202:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    2204:	8f b7       	in	r24, 0x3f	; 63
    2206:	f8 94       	cli
    initialize();
    2208:	0e 94 b0 04 	call	0x960	; 0x960 <initialize>
    ENABLE(1);
    220c:	78 94       	sei
    if (m != NULL)
    220e:	e1 14       	cp	r14, r1
    2210:	f1 04       	cpc	r15, r1
    2212:	41 f0       	breq	.+16     	; 0x2224 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	a9 01       	movw	r20, r18
    221a:	60 e0       	ldi	r22, 0x00	; 0
    221c:	70 e0       	ldi	r23, 0x00	; 0
    221e:	cb 01       	movw	r24, r22
    2220:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <async>
    DISABLE(status);
    2224:	8f b7       	in	r24, 0x3f	; 63
    2226:	f8 94       	cli
    idle();
    2228:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <idle>

0000222c <__divmodhi4>:
    222c:	97 fb       	bst	r25, 7
    222e:	07 2e       	mov	r0, r23
    2230:	16 f4       	brtc	.+4      	; 0x2236 <__divmodhi4+0xa>
    2232:	00 94       	com	r0
    2234:	07 d0       	rcall	.+14     	; 0x2244 <__divmodhi4_neg1>
    2236:	77 fd       	sbrc	r23, 7
    2238:	09 d0       	rcall	.+18     	; 0x224c <__divmodhi4_neg2>
    223a:	0e 94 31 11 	call	0x2262	; 0x2262 <__udivmodhi4>
    223e:	07 fc       	sbrc	r0, 7
    2240:	05 d0       	rcall	.+10     	; 0x224c <__divmodhi4_neg2>
    2242:	3e f4       	brtc	.+14     	; 0x2252 <__divmodhi4_exit>

00002244 <__divmodhi4_neg1>:
    2244:	90 95       	com	r25
    2246:	81 95       	neg	r24
    2248:	9f 4f       	sbci	r25, 0xFF	; 255
    224a:	08 95       	ret

0000224c <__divmodhi4_neg2>:
    224c:	70 95       	com	r23
    224e:	61 95       	neg	r22
    2250:	7f 4f       	sbci	r23, 0xFF	; 255

00002252 <__divmodhi4_exit>:
    2252:	08 95       	ret

00002254 <__usmulhisi3>:
    2254:	0e 94 45 11 	call	0x228a	; 0x228a <__umulhisi3>

00002258 <__usmulhisi3_tail>:
    2258:	b7 ff       	sbrs	r27, 7
    225a:	08 95       	ret
    225c:	82 1b       	sub	r24, r18
    225e:	93 0b       	sbc	r25, r19
    2260:	08 95       	ret

00002262 <__udivmodhi4>:
    2262:	aa 1b       	sub	r26, r26
    2264:	bb 1b       	sub	r27, r27
    2266:	51 e1       	ldi	r21, 0x11	; 17
    2268:	07 c0       	rjmp	.+14     	; 0x2278 <__udivmodhi4_ep>

0000226a <__udivmodhi4_loop>:
    226a:	aa 1f       	adc	r26, r26
    226c:	bb 1f       	adc	r27, r27
    226e:	a6 17       	cp	r26, r22
    2270:	b7 07       	cpc	r27, r23
    2272:	10 f0       	brcs	.+4      	; 0x2278 <__udivmodhi4_ep>
    2274:	a6 1b       	sub	r26, r22
    2276:	b7 0b       	sbc	r27, r23

00002278 <__udivmodhi4_ep>:
    2278:	88 1f       	adc	r24, r24
    227a:	99 1f       	adc	r25, r25
    227c:	5a 95       	dec	r21
    227e:	a9 f7       	brne	.-22     	; 0x226a <__udivmodhi4_loop>
    2280:	80 95       	com	r24
    2282:	90 95       	com	r25
    2284:	bc 01       	movw	r22, r24
    2286:	cd 01       	movw	r24, r26
    2288:	08 95       	ret

0000228a <__umulhisi3>:
    228a:	a2 9f       	mul	r26, r18
    228c:	b0 01       	movw	r22, r0
    228e:	b3 9f       	mul	r27, r19
    2290:	c0 01       	movw	r24, r0
    2292:	a3 9f       	mul	r26, r19
    2294:	70 0d       	add	r23, r0
    2296:	81 1d       	adc	r24, r1
    2298:	11 24       	eor	r1, r1
    229a:	91 1d       	adc	r25, r1
    229c:	b2 9f       	mul	r27, r18
    229e:	70 0d       	add	r23, r0
    22a0:	81 1d       	adc	r24, r1
    22a2:	11 24       	eor	r1, r1
    22a4:	91 1d       	adc	r25, r1
    22a6:	08 95       	ret

000022a8 <setjmp>:
    22a8:	dc 01       	movw	r26, r24
    22aa:	2d 92       	st	X+, r2
    22ac:	3d 92       	st	X+, r3
    22ae:	4d 92       	st	X+, r4
    22b0:	5d 92       	st	X+, r5
    22b2:	6d 92       	st	X+, r6
    22b4:	7d 92       	st	X+, r7
    22b6:	8d 92       	st	X+, r8
    22b8:	9d 92       	st	X+, r9
    22ba:	ad 92       	st	X+, r10
    22bc:	bd 92       	st	X+, r11
    22be:	cd 92       	st	X+, r12
    22c0:	dd 92       	st	X+, r13
    22c2:	ed 92       	st	X+, r14
    22c4:	fd 92       	st	X+, r15
    22c6:	0d 93       	st	X+, r16
    22c8:	1d 93       	st	X+, r17
    22ca:	cd 93       	st	X+, r28
    22cc:	dd 93       	st	X+, r29
    22ce:	ff 91       	pop	r31
    22d0:	ef 91       	pop	r30
    22d2:	8d b7       	in	r24, 0x3d	; 61
    22d4:	8d 93       	st	X+, r24
    22d6:	8e b7       	in	r24, 0x3e	; 62
    22d8:	8d 93       	st	X+, r24
    22da:	8f b7       	in	r24, 0x3f	; 63
    22dc:	8d 93       	st	X+, r24
    22de:	ed 93       	st	X+, r30
    22e0:	fd 93       	st	X+, r31
    22e2:	88 27       	eor	r24, r24
    22e4:	99 27       	eor	r25, r25
    22e6:	09 94       	ijmp

000022e8 <longjmp>:
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	81 30       	cpi	r24, 0x01	; 1
    22ee:	91 05       	cpc	r25, r1
    22f0:	81 1d       	adc	r24, r1
    22f2:	2d 90       	ld	r2, X+
    22f4:	3d 90       	ld	r3, X+
    22f6:	4d 90       	ld	r4, X+
    22f8:	5d 90       	ld	r5, X+
    22fa:	6d 90       	ld	r6, X+
    22fc:	7d 90       	ld	r7, X+
    22fe:	8d 90       	ld	r8, X+
    2300:	9d 90       	ld	r9, X+
    2302:	ad 90       	ld	r10, X+
    2304:	bd 90       	ld	r11, X+
    2306:	cd 90       	ld	r12, X+
    2308:	dd 90       	ld	r13, X+
    230a:	ed 90       	ld	r14, X+
    230c:	fd 90       	ld	r15, X+
    230e:	0d 91       	ld	r16, X+
    2310:	1d 91       	ld	r17, X+
    2312:	cd 91       	ld	r28, X+
    2314:	dd 91       	ld	r29, X+
    2316:	ed 91       	ld	r30, X+
    2318:	fd 91       	ld	r31, X+
    231a:	0d 90       	ld	r0, X+
    231c:	f8 94       	cli
    231e:	fe bf       	out	0x3e, r31	; 62
    2320:	0f be       	out	0x3f, r0	; 63
    2322:	ed bf       	out	0x3d, r30	; 61
    2324:	ed 91       	ld	r30, X+
    2326:	fd 91       	ld	r31, X+
    2328:	09 94       	ijmp

0000232a <_exit>:
    232a:	f8 94       	cli

0000232c <__stop_program>:
    232c:	ff cf       	rjmp	.-2      	; 0x232c <__stop_program>
