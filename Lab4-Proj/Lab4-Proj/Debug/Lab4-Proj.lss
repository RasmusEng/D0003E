
Lab4-Proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  000022f2  00002386  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000035b  0080016e  0080016e  000023f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000023f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002424  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  00002464  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000035bd  00000000  00000000  0000273c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001344  00000000  00000000  00005cf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017d9  00000000  00000000  0000703d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000dc0  00000000  00000000  00008818  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a61  00000000  00000000  000095d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b0d  00000000  00000000  0000a039  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000248  00000000  00000000  0000cb46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 1c 06 	jmp	0xc38	; 0xc38 <__vector_1>
       8:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <__vector_2>
       c:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__vector_3>
      10:	0c 94 69 07 	jmp	0xed2	; 0xed2 <__vector_4>
      14:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 43 0e 	jmp	0x1c86	; 0x1c86 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 f1 0d 	jmp	0x1be2	; 0x1be2 <__vector_9>
      28:	0c 94 47 08 	jmp	0x108e	; 0x108e <__vector_10>
      2c:	0c 94 b6 08 	jmp	0x116c	; 0x116c <__vector_11>
      30:	0c 94 25 09 	jmp	0x124a	; 0x124a <__vector_12>
      34:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__vector_13>
      38:	0c 94 03 0a 	jmp	0x1406	; 0x1406 <__vector_14>
      3c:	0c 94 72 0a 	jmp	0x14e4	; 0x14e4 <__vector_15>
      40:	0c 94 e1 0a 	jmp	0x15c2	; 0x15c2 <__vector_16>
      44:	0c 94 50 0b 	jmp	0x16a0	; 0x16a0 <__vector_17>
      48:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__vector_18>
      4c:	0c 94 2e 0c 	jmp	0x185c	; 0x185c <__vector_19>
      50:	0c 94 9d 0c 	jmp	0x193a	; 0x193a <__vector_20>
      54:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <__vector_21>
      58:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e2 ef       	ldi	r30, 0xF2	; 242
      70:	f2 e2       	ldi	r31, 0x22	; 34
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	ae 36       	cpi	r26, 0x6E	; 110
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	ae e6       	ldi	r26, 0x6E	; 110
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a9 3c       	cpi	r26, 0xC9	; 201
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 07 03 	call	0x60e	; 0x60e <main>
      92:	0c 94 77 11 	jmp	0x22ee	; 0x22ee <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <Switch>:
#include "InteruptHandler.h"
#include "Joystick.h"
#include "TinyTimber.h"


void Switch(InterruptHandler *self, int arg) {
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
	if (self->risingEdge){
      a6:	fc 01       	movw	r30, r24
      a8:	26 81       	ldd	r18, Z+6	; 0x06
      aa:	22 23       	and	r18, r18
      ac:	a1 f0       	breq	.+40     	; 0xd6 <Switch+0x3c>
		self->risingEdge = false;
      ae:	16 82       	std	Z+6, r1	; 0x06
		ASYNC(self->joystick, joyStickHorizontalControll, 0);		
      b0:	04 81       	ldd	r16, Z+4	; 0x04
      b2:	15 81       	ldd	r17, Z+5	; 0x05
      b4:	c1 2c       	mov	r12, r1
      b6:	d1 2c       	mov	r13, r1
      b8:	0f 2e       	mov	r0, r31
      ba:	f1 ef       	ldi	r31, 0xF1	; 241
      bc:	ef 2e       	mov	r14, r31
      be:	f0 e0       	ldi	r31, 0x00	; 0
      c0:	ff 2e       	mov	r15, r31
      c2:	f0 2d       	mov	r31, r0
      c4:	20 e0       	ldi	r18, 0x00	; 0
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	a9 01       	movw	r20, r18
      ca:	60 e0       	ldi	r22, 0x00	; 0
      cc:	70 e0       	ldi	r23, 0x00	; 0
      ce:	cb 01       	movw	r24, r22
      d0:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <async>
      d4:	03 c0       	rjmp	.+6      	; 0xdc <Switch+0x42>
	}else{
		self->risingEdge = true;
      d6:	21 e0       	ldi	r18, 0x01	; 1
      d8:	fc 01       	movw	r30, r24
      da:	26 83       	std	Z+6, r18	; 0x06
	}
}
      dc:	1f 91       	pop	r17
      de:	0f 91       	pop	r16
      e0:	ff 90       	pop	r15
      e2:	ef 90       	pop	r14
      e4:	df 90       	pop	r13
      e6:	cf 90       	pop	r12
      e8:	08 95       	ret

000000ea <Change>:

/* Interrupt function for changing the active pulse generator frequency */
void Change(InterruptHandler *self, int arg) {
      ea:	cf 92       	push	r12
      ec:	df 92       	push	r13
      ee:	ef 92       	push	r14
      f0:	ff 92       	push	r15
      f2:	0f 93       	push	r16
      f4:	1f 93       	push	r17
	ASYNC(self->joystick, joyStickVerticalControll, 0);
      f6:	fc 01       	movw	r30, r24
      f8:	04 81       	ldd	r16, Z+4	; 0x04
      fa:	15 81       	ldd	r17, Z+5	; 0x05
      fc:	c1 2c       	mov	r12, r1
      fe:	d1 2c       	mov	r13, r1
     100:	0f 2e       	mov	r0, r31
     102:	f8 e1       	ldi	r31, 0x18	; 24
     104:	ef 2e       	mov	r14, r31
     106:	f1 e0       	ldi	r31, 0x01	; 1
     108:	ff 2e       	mov	r15, r31
     10a:	f0 2d       	mov	r31, r0
     10c:	20 e0       	ldi	r18, 0x00	; 0
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	a9 01       	movw	r20, r18
     112:	60 e0       	ldi	r22, 0x00	; 0
     114:	70 e0       	ldi	r23, 0x00	; 0
     116:	cb 01       	movw	r24, r22
     118:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <async>
     11c:	1f 91       	pop	r17
     11e:	0f 91       	pop	r16
     120:	ff 90       	pop	r15
     122:	ef 90       	pop	r14
     124:	df 90       	pop	r13
     126:	cf 90       	pop	r12
     128:	08 95       	ret

0000012a <holdJoyStick>:
#include "Joystick.h"
#include <avr/io.h>
#include "GUI.h"

int holdJoyStick(Joystick *self, int unUsed) {
     12a:	cf 92       	push	r12
     12c:	df 92       	push	r13
     12e:	ef 92       	push	r14
     130:	ff 92       	push	r15
     132:	0f 93       	push	r16
     134:	1f 93       	push	r17
     136:	cf 93       	push	r28
     138:	df 93       	push	r29
     13a:	ec 01       	movw	r28, r24
	if (!(PINB & (1 << PB7))) { // DOWN
     13c:	1f 99       	sbic	0x03, 7	; 3
     13e:	22 c0       	rjmp	.+68     	; 0x184 <holdJoyStick+0x5a>
		ASYNC(self->gui, freqDown, 0); // SYNC till ASYNC
     140:	0c 81       	ldd	r16, Y+4	; 0x04
     142:	1d 81       	ldd	r17, Y+5	; 0x05
     144:	c1 2c       	mov	r12, r1
     146:	d1 2c       	mov	r13, r1
     148:	0f 2e       	mov	r0, r31
     14a:	f2 ea       	ldi	r31, 0xA2	; 162
     14c:	ef 2e       	mov	r14, r31
     14e:	f1 e0       	ldi	r31, 0x01	; 1
     150:	ff 2e       	mov	r15, r31
     152:	f0 2d       	mov	r31, r0
     154:	20 e0       	ldi	r18, 0x00	; 0
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	a9 01       	movw	r20, r18
     15a:	60 e0       	ldi	r22, 0x00	; 0
     15c:	70 e0       	ldi	r23, 0x00	; 0
     15e:	cb 01       	movw	r24, r22
     160:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <async>
		AFTER(MSEC(200), self, holdJoyStick, 0);
     164:	0f 2e       	mov	r0, r31
     166:	f5 e9       	ldi	r31, 0x95	; 149
     168:	ef 2e       	mov	r14, r31
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	ff 2e       	mov	r15, r31
     16e:	f0 2d       	mov	r31, r0
     170:	8e 01       	movw	r16, r28
     172:	20 e0       	ldi	r18, 0x00	; 0
     174:	30 e0       	ldi	r19, 0x00	; 0
     176:	a9 01       	movw	r20, r18
     178:	6a e6       	ldi	r22, 0x6A	; 106
     17a:	78 e1       	ldi	r23, 0x18	; 24
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <async>
	}
	if (!(PINB & (1 << PB6))) { // UP
     184:	1e 99       	sbic	0x03, 6	; 3
     186:	22 c0       	rjmp	.+68     	; 0x1cc <holdJoyStick+0xa2>
		ASYNC(self->gui, freqUp, 0); // SYNC till ASYNC
     188:	0c 81       	ldd	r16, Y+4	; 0x04
     18a:	1d 81       	ldd	r17, Y+5	; 0x05
     18c:	c1 2c       	mov	r12, r1
     18e:	d1 2c       	mov	r13, r1
     190:	0f 2e       	mov	r0, r31
     192:	f9 e6       	ldi	r31, 0x69	; 105
     194:	ef 2e       	mov	r14, r31
     196:	f1 e0       	ldi	r31, 0x01	; 1
     198:	ff 2e       	mov	r15, r31
     19a:	f0 2d       	mov	r31, r0
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	a9 01       	movw	r20, r18
     1a2:	60 e0       	ldi	r22, 0x00	; 0
     1a4:	70 e0       	ldi	r23, 0x00	; 0
     1a6:	cb 01       	movw	r24, r22
     1a8:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <async>
		AFTER(MSEC(200), self, holdJoyStick, 0);
     1ac:	0f 2e       	mov	r0, r31
     1ae:	f5 e9       	ldi	r31, 0x95	; 149
     1b0:	ef 2e       	mov	r14, r31
     1b2:	f0 e0       	ldi	r31, 0x00	; 0
     1b4:	ff 2e       	mov	r15, r31
     1b6:	f0 2d       	mov	r31, r0
     1b8:	8e 01       	movw	r16, r28
     1ba:	20 e0       	ldi	r18, 0x00	; 0
     1bc:	30 e0       	ldi	r19, 0x00	; 0
     1be:	a9 01       	movw	r20, r18
     1c0:	6a e6       	ldi	r22, 0x6A	; 106
     1c2:	78 e1       	ldi	r23, 0x18	; 24
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <async>
	}
	return 0;
}
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	df 91       	pop	r29
     1d2:	cf 91       	pop	r28
     1d4:	1f 91       	pop	r17
     1d6:	0f 91       	pop	r16
     1d8:	ff 90       	pop	r15
     1da:	ef 90       	pop	r14
     1dc:	df 90       	pop	r13
     1de:	cf 90       	pop	r12
     1e0:	08 95       	ret

000001e2 <joyStickHorizontalControll>:

int joyStickHorizontalControll(Joystick *self, int unUsed){
     1e2:	cf 92       	push	r12
     1e4:	df 92       	push	r13
     1e6:	ef 92       	push	r14
     1e8:	ff 92       	push	r15
     1ea:	0f 93       	push	r16
     1ec:	1f 93       	push	r17
	if((!(PINE & (1 << PE1)) || !(PINE & (1 << PE6)))){
     1ee:	61 9b       	sbis	0x0c, 1	; 12
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <joyStickHorizontalControll+0x14>
     1f2:	66 99       	sbic	0x0c, 6	; 12
     1f4:	14 c0       	rjmp	.+40     	; 0x21e <__EEPROM_REGION_LENGTH__+0x1e>
     1f6:	fc 01       	movw	r30, r24
		//ASYNC(self->gui, switchState,0);
		AFTER(MSEC(200), self->gui, switchState, 0);
     1f8:	04 81       	ldd	r16, Z+4	; 0x04
     1fa:	15 81       	ldd	r17, Z+5	; 0x05
     1fc:	c1 2c       	mov	r12, r1
     1fe:	d1 2c       	mov	r13, r1
     200:	0f 2e       	mov	r0, r31
     202:	fb ed       	ldi	r31, 0xDB	; 219
     204:	ef 2e       	mov	r14, r31
     206:	f1 e0       	ldi	r31, 0x01	; 1
     208:	ff 2e       	mov	r15, r31
     20a:	f0 2d       	mov	r31, r0
     20c:	20 e0       	ldi	r18, 0x00	; 0
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	a9 01       	movw	r20, r18
     212:	6a e6       	ldi	r22, 0x6A	; 106
     214:	78 e1       	ldi	r23, 0x18	; 24
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <async>
	}
	return 0;
}
     21e:	80 e0       	ldi	r24, 0x00	; 0
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	1f 91       	pop	r17
     224:	0f 91       	pop	r16
     226:	ff 90       	pop	r15
     228:	ef 90       	pop	r14
     22a:	df 90       	pop	r13
     22c:	cf 90       	pop	r12
     22e:	08 95       	ret

00000230 <joyStickVerticalControll>:

int joyStickVerticalControll(Joystick *self, int unUsed){
     230:	cf 92       	push	r12
     232:	df 92       	push	r13
     234:	ef 92       	push	r14
     236:	ff 92       	push	r15
     238:	0f 93       	push	r16
     23a:	1f 93       	push	r17
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	ec 01       	movw	r28, r24
	if (!(PINB & (1 << PB7))) { //DOWN
     242:	1f 99       	sbic	0x03, 7	; 3
     244:	12 c0       	rjmp	.+36     	; 0x26a <joyStickVerticalControll+0x3a>
		//ASYNC(self, freqDown, 0);
		AFTER(MSEC(50), self, holdJoyStick, 0);
     246:	c1 2c       	mov	r12, r1
     248:	d1 2c       	mov	r13, r1
     24a:	0f 2e       	mov	r0, r31
     24c:	f5 e9       	ldi	r31, 0x95	; 149
     24e:	ef 2e       	mov	r14, r31
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	ff 2e       	mov	r15, r31
     254:	f0 2d       	mov	r31, r0
     256:	8c 01       	movw	r16, r24
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	a9 01       	movw	r20, r18
     25e:	6a e1       	ldi	r22, 0x1A	; 26
     260:	76 e0       	ldi	r23, 0x06	; 6
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <async>
	}
	if (!(PINB & (1 << PB6))) { //UP
     26a:	1e 99       	sbic	0x03, 6	; 3
     26c:	12 c0       	rjmp	.+36     	; 0x292 <joyStickVerticalControll+0x62>
		//ASYNC(self, freqUp, 0);
		AFTER(MSEC(50), self, holdJoyStick, 0);
     26e:	c1 2c       	mov	r12, r1
     270:	d1 2c       	mov	r13, r1
     272:	0f 2e       	mov	r0, r31
     274:	f5 e9       	ldi	r31, 0x95	; 149
     276:	ef 2e       	mov	r14, r31
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	ff 2e       	mov	r15, r31
     27c:	f0 2d       	mov	r31, r0
     27e:	8e 01       	movw	r16, r28
     280:	20 e0       	ldi	r18, 0x00	; 0
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	a9 01       	movw	r20, r18
     286:	6a e1       	ldi	r22, 0x1A	; 26
     288:	76 e0       	ldi	r23, 0x06	; 6
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <async>
		
	}
	if (!(PINB & (1 << PB4))) { //PRESS
     292:	1c 99       	sbic	0x03, 4	; 3
     294:	13 c0       	rjmp	.+38     	; 0x2bc <joyStickVerticalControll+0x8c>
		//ASYNC(self->gui, press, 0);
		AFTER(MSEC(50), self->gui, press, 0);
     296:	0c 81       	ldd	r16, Y+4	; 0x04
     298:	1d 81       	ldd	r17, Y+5	; 0x05
     29a:	c1 2c       	mov	r12, r1
     29c:	d1 2c       	mov	r13, r1
     29e:	0f 2e       	mov	r0, r31
     2a0:	f8 ee       	ldi	r31, 0xE8	; 232
     2a2:	ef 2e       	mov	r14, r31
     2a4:	f1 e0       	ldi	r31, 0x01	; 1
     2a6:	ff 2e       	mov	r15, r31
     2a8:	f0 2d       	mov	r31, r0
     2aa:	20 e0       	ldi	r18, 0x00	; 0
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	a9 01       	movw	r20, r18
     2b0:	6a e1       	ldi	r22, 0x1A	; 26
     2b2:	76 e0       	ldi	r23, 0x06	; 6
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <async>
	}
	return 0;
}
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	ff 90       	pop	r15
     2ca:	ef 90       	pop	r14
     2cc:	df 90       	pop	r13
     2ce:	cf 90       	pop	r12
     2d0:	08 95       	ret

000002d2 <freqUp>:
#include "LCD_Driver.h"
#include "PulseGenerator.h"
#include <avr/io.h>
//TODO: Check every call if it should be SYNC or SYNC

int freqUp(GUI *self, int unUsed){
     2d2:	cf 92       	push	r12
     2d4:	df 92       	push	r13
     2d6:	ef 92       	push	r14
     2d8:	ff 92       	push	r15
     2da:	0f 93       	push	r16
     2dc:	1f 93       	push	r17
	if(self->isLeft){
     2de:	fc 01       	movw	r30, r24
     2e0:	24 81       	ldd	r18, Z+4	; 0x04
     2e2:	22 23       	and	r18, r18
     2e4:	99 f0       	breq	.+38     	; 0x30c <freqUp+0x3a>
		ASYNC(self->left, increase, 0);	
     2e6:	05 81       	ldd	r16, Z+5	; 0x05
     2e8:	16 81       	ldd	r17, Z+6	; 0x06
     2ea:	c1 2c       	mov	r12, r1
     2ec:	d1 2c       	mov	r13, r1
     2ee:	0f 2e       	mov	r0, r31
     2f0:	f4 e9       	ldi	r31, 0x94	; 148
     2f2:	ef 2e       	mov	r14, r31
     2f4:	f3 e0       	ldi	r31, 0x03	; 3
     2f6:	ff 2e       	mov	r15, r31
     2f8:	f0 2d       	mov	r31, r0
     2fa:	20 e0       	ldi	r18, 0x00	; 0
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	a9 01       	movw	r20, r18
     300:	60 e0       	ldi	r22, 0x00	; 0
     302:	70 e0       	ldi	r23, 0x00	; 0
     304:	cb 01       	movw	r24, r22
     306:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <async>
     30a:	13 c0       	rjmp	.+38     	; 0x332 <freqUp+0x60>
	}else{
		ASYNC(self->right, increase, 0);
     30c:	fc 01       	movw	r30, r24
     30e:	07 81       	ldd	r16, Z+7	; 0x07
     310:	10 85       	ldd	r17, Z+8	; 0x08
     312:	c1 2c       	mov	r12, r1
     314:	d1 2c       	mov	r13, r1
     316:	0f 2e       	mov	r0, r31
     318:	f4 e9       	ldi	r31, 0x94	; 148
     31a:	ef 2e       	mov	r14, r31
     31c:	f3 e0       	ldi	r31, 0x03	; 3
     31e:	ff 2e       	mov	r15, r31
     320:	f0 2d       	mov	r31, r0
     322:	20 e0       	ldi	r18, 0x00	; 0
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	a9 01       	movw	r20, r18
     328:	60 e0       	ldi	r22, 0x00	; 0
     32a:	70 e0       	ldi	r23, 0x00	; 0
     32c:	cb 01       	movw	r24, r22
     32e:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <async>
	}
	
	return 0;
}
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	1f 91       	pop	r17
     338:	0f 91       	pop	r16
     33a:	ff 90       	pop	r15
     33c:	ef 90       	pop	r14
     33e:	df 90       	pop	r13
     340:	cf 90       	pop	r12
     342:	08 95       	ret

00000344 <freqDown>:

int freqDown(GUI *self, int unUsed){
     344:	cf 92       	push	r12
     346:	df 92       	push	r13
     348:	ef 92       	push	r14
     34a:	ff 92       	push	r15
     34c:	0f 93       	push	r16
     34e:	1f 93       	push	r17
	if(self->isLeft){
     350:	fc 01       	movw	r30, r24
     352:	24 81       	ldd	r18, Z+4	; 0x04
     354:	22 23       	and	r18, r18
     356:	99 f0       	breq	.+38     	; 0x37e <freqDown+0x3a>
		ASYNC(self->left, decrease, 0);
     358:	05 81       	ldd	r16, Z+5	; 0x05
     35a:	16 81       	ldd	r17, Z+6	; 0x06
     35c:	c1 2c       	mov	r12, r1
     35e:	d1 2c       	mov	r13, r1
     360:	0f 2e       	mov	r0, r31
     362:	f2 ee       	ldi	r31, 0xE2	; 226
     364:	ef 2e       	mov	r14, r31
     366:	f3 e0       	ldi	r31, 0x03	; 3
     368:	ff 2e       	mov	r15, r31
     36a:	f0 2d       	mov	r31, r0
     36c:	20 e0       	ldi	r18, 0x00	; 0
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	a9 01       	movw	r20, r18
     372:	60 e0       	ldi	r22, 0x00	; 0
     374:	70 e0       	ldi	r23, 0x00	; 0
     376:	cb 01       	movw	r24, r22
     378:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <async>
     37c:	13 c0       	rjmp	.+38     	; 0x3a4 <freqDown+0x60>
	}else{
		ASYNC(self->right, decrease, 0);
     37e:	fc 01       	movw	r30, r24
     380:	07 81       	ldd	r16, Z+7	; 0x07
     382:	10 85       	ldd	r17, Z+8	; 0x08
     384:	c1 2c       	mov	r12, r1
     386:	d1 2c       	mov	r13, r1
     388:	0f 2e       	mov	r0, r31
     38a:	f2 ee       	ldi	r31, 0xE2	; 226
     38c:	ef 2e       	mov	r14, r31
     38e:	f3 e0       	ldi	r31, 0x03	; 3
     390:	ff 2e       	mov	r15, r31
     392:	f0 2d       	mov	r31, r0
     394:	20 e0       	ldi	r18, 0x00	; 0
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	a9 01       	movw	r20, r18
     39a:	60 e0       	ldi	r22, 0x00	; 0
     39c:	70 e0       	ldi	r23, 0x00	; 0
     39e:	cb 01       	movw	r24, r22
     3a0:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <async>
	}
	return 0;
}
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	1f 91       	pop	r17
     3aa:	0f 91       	pop	r16
     3ac:	ff 90       	pop	r15
     3ae:	ef 90       	pop	r14
     3b0:	df 90       	pop	r13
     3b2:	cf 90       	pop	r12
     3b4:	08 95       	ret

000003b6 <switchState>:

int switchState(GUI *self, int unUsed){
     3b6:	fc 01       	movw	r30, r24
    self->isLeft ^= true;
     3b8:	24 81       	ldd	r18, Z+4	; 0x04
     3ba:	91 e0       	ldi	r25, 0x01	; 1
     3bc:	29 27       	eor	r18, r25
     3be:	24 83       	std	Z+4, r18	; 0x04
	LCDDR13 ^= 1;
     3c0:	e9 ef       	ldi	r30, 0xF9	; 249
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	80 81       	ld	r24, Z
     3c6:	98 27       	eor	r25, r24
     3c8:	90 83       	st	Z, r25
	return 0;
}
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	08 95       	ret

000003d0 <press>:

int press(GUI *self, int unUsed){
     3d0:	cf 92       	push	r12
     3d2:	df 92       	push	r13
     3d4:	ef 92       	push	r14
     3d6:	ff 92       	push	r15
     3d8:	0f 93       	push	r16
     3da:	1f 93       	push	r17
	if(self->isLeft){
     3dc:	fc 01       	movw	r30, r24
     3de:	24 81       	ldd	r18, Z+4	; 0x04
     3e0:	22 23       	and	r18, r18
     3e2:	99 f0       	breq	.+38     	; 0x40a <__DATA_REGION_LENGTH__+0xa>
		ASYNC(self->left, reset, 0);  
     3e4:	05 81       	ldd	r16, Z+5	; 0x05
     3e6:	16 81       	ldd	r17, Z+6	; 0x06
     3e8:	c1 2c       	mov	r12, r1
     3ea:	d1 2c       	mov	r13, r1
     3ec:	0f 2e       	mov	r0, r31
     3ee:	f0 e3       	ldi	r31, 0x30	; 48
     3f0:	ef 2e       	mov	r14, r31
     3f2:	f4 e0       	ldi	r31, 0x04	; 4
     3f4:	ff 2e       	mov	r15, r31
     3f6:	f0 2d       	mov	r31, r0
     3f8:	20 e0       	ldi	r18, 0x00	; 0
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	a9 01       	movw	r20, r18
     3fe:	60 e0       	ldi	r22, 0x00	; 0
     400:	70 e0       	ldi	r23, 0x00	; 0
     402:	cb 01       	movw	r24, r22
     404:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <async>
     408:	13 c0       	rjmp	.+38     	; 0x430 <__DATA_REGION_LENGTH__+0x30>
	} else {
		ASYNC(self->right, reset, 0); 
     40a:	fc 01       	movw	r30, r24
     40c:	07 81       	ldd	r16, Z+7	; 0x07
     40e:	10 85       	ldd	r17, Z+8	; 0x08
     410:	c1 2c       	mov	r12, r1
     412:	d1 2c       	mov	r13, r1
     414:	0f 2e       	mov	r0, r31
     416:	f0 e3       	ldi	r31, 0x30	; 48
     418:	ef 2e       	mov	r14, r31
     41a:	f4 e0       	ldi	r31, 0x04	; 4
     41c:	ff 2e       	mov	r15, r31
     41e:	f0 2d       	mov	r31, r0
     420:	20 e0       	ldi	r18, 0x00	; 0
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	a9 01       	movw	r20, r18
     426:	60 e0       	ldi	r22, 0x00	; 0
     428:	70 e0       	ldi	r23, 0x00	; 0
     42a:	cb 01       	movw	r24, r22
     42c:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <async>
	}
	return 0;
}
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	1f 91       	pop	r17
     436:	0f 91       	pop	r16
     438:	ff 90       	pop	r15
     43a:	ef 90       	pop	r14
     43c:	df 90       	pop	r13
     43e:	cf 90       	pop	r12
     440:	08 95       	ret

00000442 <CPUCLK_Init>:
#include "LCD_Driver.h"
#include <avr/io.h>
#include <stdbool.h>

void CPUCLK_Init(void){
	CLKPR = 0x80;
     442:	e1 e6       	ldi	r30, 0x61	; 97
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	80 e8       	ldi	r24, 0x80	; 128
     448:	80 83       	st	Z, r24
	CLKPR = 0x00;
     44a:	10 82       	st	Z, r1
     44c:	08 95       	ret

0000044e <LCD_Init>:
}

void LCD_Init(void){
	//Use 32 kHz crystal oscillator
	//1/3 Bias and 1/4 duty, SEG0:SEG24 is used as port pins
	LCDCRB = (1<<LCDCS) | (1<<LCDMUX0)| (1<<LCDMUX1)|(1<<LCDPM0) |(1<<LCDPM1) |(1<<LCDPM2);
     44e:	87 eb       	ldi	r24, 0xB7	; 183
     450:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	/* Using 16 as prescaler selection and 8 as LCD Clock Divide */
	/* gives a frame rate of 32 Hz */
	LCDFRR = (1<<LCDCD0) | (1<<LCDCD1) | (1<<LCDCD2);
     454:	87 e0       	ldi	r24, 0x07	; 7
     456:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
	/* Set segment drive time to 300 μs and output voltage to 3.35 V*/
	LCDCCR = (1<<LCDDC0) | (1<<LCDCC1) | (1<<LCDCC2) | (1<<LCDCC3);
     45a:	8e e2       	ldi	r24, 0x2E	; 46
     45c:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	/* Enable LCD, low power waveform and no interrupt enabled */
	LCDCRA = (1<<LCDEN);
     460:	80 e8       	ldi	r24, 0x80	; 128
     462:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>

	//Indicator bits 
	LCDDR13 ^= 1;
     466:	e9 ef       	ldi	r30, 0xF9	; 249
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	90 81       	ld	r25, Z
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	89 27       	eor	r24, r25
     470:	80 83       	st	Z, r24
     472:	08 95       	ret

00000474 <CLK_Init>:
}

void CLK_Init(){
	// Timer
	DDRE |= (1 << PE4) | (1<< PE6) | (1<<PE5);
     474:	8d b1       	in	r24, 0x0d	; 13
     476:	80 67       	ori	r24, 0x70	; 112
     478:	8d b9       	out	0x0d, r24	; 13
	PORTE |= (1<<PE5);
     47a:	8e b1       	in	r24, 0x0e	; 14
     47c:	80 62       	ori	r24, 0x20	; 32
     47e:	8e b9       	out	0x0e, r24	; 14
     480:	08 95       	ret

00000482 <BUTTON_Init>:
}

void BUTTON_Init(){
	PORTB |= (1 << 7) | (1 << 6) | (1 << 4);
     482:	85 b1       	in	r24, 0x05	; 5
     484:	80 6d       	ori	r24, 0xD0	; 208
     486:	85 b9       	out	0x05, r24	; 5
	PORTE |= (1 << 3) | (1 << 2);
     488:	8e b1       	in	r24, 0x0e	; 14
     48a:	8c 60       	ori	r24, 0x0C	; 12
     48c:	8e b9       	out	0x0e, r24	; 14

    //Interrupt enables
	EIMSK  |= (1 << PCIE1) | (1 << PCIE0);
     48e:	8d b3       	in	r24, 0x1d	; 29
     490:	80 6c       	ori	r24, 0xC0	; 192
     492:	8d bb       	out	0x1d, r24	; 29
	PCMSK1 |= (1 << PCINT12) | (1 << PCINT14) | (1 << PCINT15);
     494:	ec e6       	ldi	r30, 0x6C	; 108
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	80 81       	ld	r24, Z
     49a:	80 6d       	ori	r24, 0xD0	; 208
     49c:	80 83       	st	Z, r24
	
	PCMSK0 |= (1 << PCINT2) | (1 << PCINT3);
     49e:	eb e6       	ldi	r30, 0x6B	; 107
     4a0:	f0 e0       	ldi	r31, 0x00	; 0
     4a2:	80 81       	ld	r24, Z
     4a4:	8c 60       	ori	r24, 0x0C	; 12
     4a6:	80 83       	st	Z, r24
     4a8:	08 95       	ret

000004aa <INIT>:
}

void INIT(){
	CPUCLK_Init();
     4aa:	0e 94 21 02 	call	0x442	; 0x442 <CPUCLK_Init>
	LCD_Init();
     4ae:	0e 94 27 02 	call	0x44e	; 0x44e <LCD_Init>
	CLK_Init();
     4b2:	0e 94 3a 02 	call	0x474	; 0x474 <CLK_Init>
	BUTTON_Init();
     4b6:	0e 94 41 02 	call	0x482	; 0x482 <BUTTON_Init>
     4ba:	08 95       	ret

000004bc <writeChar>:
	LCDDR6 = data2;
}

void writeChar(char ch, int pos){
	/* Returns if given input is not possible to print */
	if(pos < 0 || pos > 5 || ch < 48 || ch > 57){
     4bc:	66 30       	cpi	r22, 0x06	; 6
     4be:	71 05       	cpc	r23, r1
     4c0:	08 f0       	brcs	.+2      	; 0x4c4 <writeChar+0x8>
     4c2:	6e c0       	rjmp	.+220    	; 0x5a0 <__stack+0xa1>
     4c4:	80 33       	cpi	r24, 0x30	; 48
     4c6:	08 f4       	brcc	.+2      	; 0x4ca <writeChar+0xe>
     4c8:	6b c0       	rjmp	.+214    	; 0x5a0 <__stack+0xa1>
     4ca:	8a 33       	cpi	r24, 0x3A	; 58
     4cc:	08 f0       	brcs	.+2      	; 0x4d0 <writeChar+0x14>
     4ce:	68 c0       	rjmp	.+208    	; 0x5a0 <__stack+0xa1>
		return;
	}
	volatile uint8_t *lcd_base = &LCDDR0 + offsetPos[pos];
     4d0:	fb 01       	movw	r30, r22
     4d2:	e2 5c       	subi	r30, 0xC2	; 194
     4d4:	fe 4f       	sbci	r31, 0xFE	; 254
     4d6:	e0 81       	ld	r30, Z
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	e4 51       	subi	r30, 0x14	; 20
     4dc:	ff 4f       	sbci	r31, 0xFF	; 255
	
	int number = (int)ch - 48;
     4de:	a8 2f       	mov	r26, r24
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	d0 97       	sbiw	r26, 0x30	; 48
	int shift = 0;
	/*Clears the part of the display we want to write onto */
	if (pos % 2 == 1){
     4e4:	61 70       	andi	r22, 0x01	; 1
     4e6:	70 78       	andi	r23, 0x80	; 128
     4e8:	77 23       	and	r23, r23
     4ea:	34 f4       	brge	.+12     	; 0x4f8 <writeChar+0x3c>
     4ec:	61 50       	subi	r22, 0x01	; 1
     4ee:	71 09       	sbc	r23, r1
     4f0:	6e 6f       	ori	r22, 0xFE	; 254
     4f2:	7f 6f       	ori	r23, 0xFF	; 255
     4f4:	6f 5f       	subi	r22, 0xFF	; 255
     4f6:	7f 4f       	sbci	r23, 0xFF	; 255
     4f8:	61 30       	cpi	r22, 0x01	; 1
     4fa:	71 05       	cpc	r23, r1
     4fc:	71 f4       	brne	.+28     	; 0x51a <__stack+0x1b>
		shift = 4;
		lcd_base[0]  = lcd_base[0]  & 0x0F;
     4fe:	80 81       	ld	r24, Z
     500:	8f 70       	andi	r24, 0x0F	; 15
     502:	80 83       	st	Z, r24
		lcd_base[5]  = lcd_base[5]  & 0x0F;
     504:	85 81       	ldd	r24, Z+5	; 0x05
     506:	8f 70       	andi	r24, 0x0F	; 15
     508:	85 83       	std	Z+5, r24	; 0x05
		lcd_base[10] = lcd_base[10] & 0x0F;
     50a:	82 85       	ldd	r24, Z+10	; 0x0a
     50c:	8f 70       	andi	r24, 0x0F	; 15
     50e:	82 87       	std	Z+10, r24	; 0x0a
		lcd_base[15] = lcd_base[15] & 0x0F;
     510:	87 85       	ldd	r24, Z+15	; 0x0f
     512:	8f 70       	andi	r24, 0x0F	; 15
     514:	87 87       	std	Z+15, r24	; 0x0f
	
	int number = (int)ch - 48;
	int shift = 0;
	/*Clears the part of the display we want to write onto */
	if (pos % 2 == 1){
		shift = 4;
     516:	24 e0       	ldi	r18, 0x04	; 4
     518:	0d c0       	rjmp	.+26     	; 0x534 <__stack+0x35>
		lcd_base[0]  = lcd_base[0]  & 0x0F;
		lcd_base[5]  = lcd_base[5]  & 0x0F;
		lcd_base[10] = lcd_base[10] & 0x0F;
		lcd_base[15] = lcd_base[15] & 0x0F;
		}else{
		lcd_base[0]  = lcd_base[0]  & 0xF0;
     51a:	80 81       	ld	r24, Z
     51c:	80 7f       	andi	r24, 0xF0	; 240
     51e:	80 83       	st	Z, r24
		lcd_base[5]  = lcd_base[5]  & 0xF0;
     520:	85 81       	ldd	r24, Z+5	; 0x05
     522:	80 7f       	andi	r24, 0xF0	; 240
     524:	85 83       	std	Z+5, r24	; 0x05
		lcd_base[10] = lcd_base[10] & 0xF0;
     526:	82 85       	ldd	r24, Z+10	; 0x0a
     528:	80 7f       	andi	r24, 0xF0	; 240
     52a:	82 87       	std	Z+10, r24	; 0x0a
		lcd_base[15] = lcd_base[15] & 0xF0;
     52c:	87 85       	ldd	r24, Z+15	; 0x0f
     52e:	80 7f       	andi	r24, 0xF0	; 240
     530:	87 87       	std	Z+15, r24	; 0x0f
		return;
	}
	volatile uint8_t *lcd_base = &LCDDR0 + offsetPos[pos];
	
	int number = (int)ch - 48;
	int shift = 0;
     532:	20 e0       	ldi	r18, 0x00	; 0
		lcd_base[5]  = lcd_base[5]  & 0xF0;
		lcd_base[10] = lcd_base[10] & 0xF0;
		lcd_base[15] = lcd_base[15] & 0xF0;
	}
	/*Writes to the display*/
	lcd_base[0]  = charCodes[number][0]<<shift | lcd_base[0] ;
     534:	aa 0f       	add	r26, r26
     536:	bb 1f       	adc	r27, r27
     538:	aa 0f       	add	r26, r26
     53a:	bb 1f       	adc	r27, r27
     53c:	aa 5b       	subi	r26, 0xBA	; 186
     53e:	be 4f       	sbci	r27, 0xFE	; 254
     540:	8c 91       	ld	r24, X
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	02 2e       	mov	r0, r18
     546:	02 c0       	rjmp	.+4      	; 0x54c <__stack+0x4d>
     548:	88 0f       	add	r24, r24
     54a:	99 1f       	adc	r25, r25
     54c:	0a 94       	dec	r0
     54e:	e2 f7       	brpl	.-8      	; 0x548 <__stack+0x49>
     550:	90 81       	ld	r25, Z
     552:	89 2b       	or	r24, r25
     554:	80 83       	st	Z, r24
	lcd_base[5]  = charCodes[number][1]<<shift | lcd_base[5] ;
     556:	11 96       	adiw	r26, 0x01	; 1
     558:	8c 91       	ld	r24, X
     55a:	11 97       	sbiw	r26, 0x01	; 1
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	02 2e       	mov	r0, r18
     560:	02 c0       	rjmp	.+4      	; 0x566 <__stack+0x67>
     562:	88 0f       	add	r24, r24
     564:	99 1f       	adc	r25, r25
     566:	0a 94       	dec	r0
     568:	e2 f7       	brpl	.-8      	; 0x562 <__stack+0x63>
     56a:	95 81       	ldd	r25, Z+5	; 0x05
     56c:	89 2b       	or	r24, r25
     56e:	85 83       	std	Z+5, r24	; 0x05
	lcd_base[10] = charCodes[number][2]<<shift | lcd_base[10];
     570:	12 96       	adiw	r26, 0x02	; 2
     572:	8c 91       	ld	r24, X
     574:	12 97       	sbiw	r26, 0x02	; 2
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	02 2e       	mov	r0, r18
     57a:	02 c0       	rjmp	.+4      	; 0x580 <__stack+0x81>
     57c:	88 0f       	add	r24, r24
     57e:	99 1f       	adc	r25, r25
     580:	0a 94       	dec	r0
     582:	e2 f7       	brpl	.-8      	; 0x57c <__stack+0x7d>
     584:	92 85       	ldd	r25, Z+10	; 0x0a
     586:	89 2b       	or	r24, r25
     588:	82 87       	std	Z+10, r24	; 0x0a
	lcd_base[15] = charCodes[number][3]<<shift | lcd_base[15];
     58a:	13 96       	adiw	r26, 0x03	; 3
     58c:	8c 91       	ld	r24, X
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	02 c0       	rjmp	.+4      	; 0x596 <__stack+0x97>
     592:	88 0f       	add	r24, r24
     594:	99 1f       	adc	r25, r25
     596:	2a 95       	dec	r18
     598:	e2 f7       	brpl	.-8      	; 0x592 <__stack+0x93>
     59a:	97 85       	ldd	r25, Z+15	; 0x0f
     59c:	89 2b       	or	r24, r25
     59e:	87 87       	std	Z+15, r24	; 0x0f
     5a0:	08 95       	ret

000005a2 <printAt>:
}
	
int printAt(LCD_Driver *self, const int map) {
     5a2:	ef 92       	push	r14
     5a4:	ff 92       	push	r15
     5a6:	0f 93       	push	r16
     5a8:	1f 93       	push	r17
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
	union PrintPun p = {.map = map};
	int pp;
	pp = p.args.pos;
     5ae:	c6 2f       	mov	r28, r22
     5b0:	cc 1f       	adc	r28, r28
     5b2:	cc 27       	eor	r28, r28
     5b4:	cc 1f       	adc	r28, r28
     5b6:	73 70       	andi	r23, 0x03	; 3
     5b8:	77 0f       	add	r23, r23
     5ba:	7c 2b       	or	r23, r28
     5bc:	c7 2f       	mov	r28, r23
     5be:	d0 e0       	ldi	r29, 0x00	; 0
	int num = p.args.num;
     5c0:	6f 77       	andi	r22, 0x7F	; 127
     5c2:	06 2f       	mov	r16, r22
     5c4:	10 e0       	ldi	r17, 0x00	; 0
	writeChar( (num % 100) / 10 + '0', pp);
     5c6:	c8 01       	movw	r24, r16
     5c8:	64 e6       	ldi	r22, 0x64	; 100
     5ca:	70 e0       	ldi	r23, 0x00	; 0
     5cc:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__divmodhi4>
     5d0:	0f 2e       	mov	r0, r31
     5d2:	fa e0       	ldi	r31, 0x0A	; 10
     5d4:	ef 2e       	mov	r14, r31
     5d6:	f1 2c       	mov	r15, r1
     5d8:	f0 2d       	mov	r31, r0
     5da:	b7 01       	movw	r22, r14
     5dc:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__divmodhi4>
     5e0:	86 2f       	mov	r24, r22
     5e2:	be 01       	movw	r22, r28
     5e4:	80 5d       	subi	r24, 0xD0	; 208
     5e6:	0e 94 5e 02 	call	0x4bc	; 0x4bc <writeChar>
	pp++;
     5ea:	21 96       	adiw	r28, 0x01	; 1
	writeChar( num % 10 + '0', pp);
     5ec:	c8 01       	movw	r24, r16
     5ee:	b7 01       	movw	r22, r14
     5f0:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__divmodhi4>
     5f4:	be 01       	movw	r22, r28
     5f6:	80 5d       	subi	r24, 0xD0	; 208
     5f8:	0e 94 5e 02 	call	0x4bc	; 0x4bc <writeChar>
	
	return 0;
}
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	df 91       	pop	r29
     602:	cf 91       	pop	r28
     604:	1f 91       	pop	r17
     606:	0f 91       	pop	r16
     608:	ff 90       	pop	r15
     60a:	ef 90       	pop	r14
     60c:	08 95       	ret

0000060e <main>:
InterruptHandler inter = initInterruptHandler(&joy);


int main(void)
{    
	INIT();
     60e:	0e 94 55 02 	call	0x4aa	; 0x4aa <INIT>
	INSTALL(&inter, Switch, IRQ_PCINT0);
     612:	41 e0       	ldi	r20, 0x01	; 1
     614:	6d e4       	ldi	r22, 0x4D	; 77
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	0e 94 c6 10 	call	0x218c	; 0x218c <install>
	INSTALL(&inter, Change, IRQ_PCINT1);
     620:	42 e0       	ldi	r20, 0x02	; 2
     622:	65 e7       	ldi	r22, 0x75	; 117
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	91 e0       	ldi	r25, 0x01	; 1
     62a:	0e 94 c6 10 	call	0x218c	; 0x218c <install>
	return TINYTIMBER(NULL, NULL, NULL);
     62e:	40 e0       	ldi	r20, 0x00	; 0
     630:	50 e0       	ldi	r21, 0x00	; 0
     632:	60 e0       	ldi	r22, 0x00	; 0
     634:	70 e0       	ldi	r23, 0x00	; 0
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <tinytimber>
     63e:	08 95       	ret

00000640 <sendSignal>:
#include "PulseController.h"
#include <avr/io.h>
#include "LCD_Driver.h"

int sendSignal(PulseController *self, int pin){
	if(pin == 1){
     640:	61 30       	cpi	r22, 0x01	; 1
     642:	71 05       	cpc	r23, r1
     644:	29 f4       	brne	.+10     	; 0x650 <sendSignal+0x10>
		PORTE ^= (1 << PE4);
     646:	9e b1       	in	r25, 0x0e	; 14
     648:	80 e1       	ldi	r24, 0x10	; 16
     64a:	89 27       	eor	r24, r25
     64c:	8e b9       	out	0x0e, r24	; 14
     64e:	07 c0       	rjmp	.+14     	; 0x65e <sendSignal+0x1e>
		}else if(pin == 3){
     650:	63 30       	cpi	r22, 0x03	; 3
     652:	71 05       	cpc	r23, r1
     654:	21 f4       	brne	.+8      	; 0x65e <sendSignal+0x1e>
		PORTE ^= (1 << PE6);
     656:	9e b1       	in	r25, 0x0e	; 14
     658:	80 e4       	ldi	r24, 0x40	; 64
     65a:	89 27       	eor	r24, r25
     65c:	8e b9       	out	0x0e, r24	; 14
	}
	
	//LCDDR18 ^= 1;
	return 0;
}
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	08 95       	ret

00000664 <setLow>:

int setLow(PulseController *self, int pin){
	if(pin == 1){
     664:	61 30       	cpi	r22, 0x01	; 1
     666:	71 05       	cpc	r23, r1
     668:	11 f4       	brne	.+4      	; 0x66e <setLow+0xa>
		PORTE = (0 << PE4);
     66a:	1e b8       	out	0x0e, r1	; 14
     66c:	04 c0       	rjmp	.+8      	; 0x676 <setLow+0x12>
		}else if(pin == 3){
     66e:	63 30       	cpi	r22, 0x03	; 3
     670:	71 05       	cpc	r23, r1
     672:	09 f4       	brne	.+2      	; 0x676 <setLow+0x12>
		PORTE = (0 << PE6);
     674:	1e b8       	out	0x0e, r1	; 14
	}
	return 0;
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	08 95       	ret

0000067c <generator>:
	ASYNC(self->display, printAt, PACK_PRINT(self->currentFreq, self->pos));
	
	return 0;
}

int generator(PulseGenerator *self, int unused){
     67c:	cf 92       	push	r12
     67e:	df 92       	push	r13
     680:	ef 92       	push	r14
     682:	ff 92       	push	r15
     684:	0f 93       	push	r16
     686:	1f 93       	push	r17
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
	if(self->currentFreq){
     68c:	fc 01       	movw	r30, r24
     68e:	24 81       	ldd	r18, Z+4	; 0x04
     690:	35 81       	ldd	r19, Z+5	; 0x05
     692:	23 2b       	or	r18, r19
     694:	f1 f1       	breq	.+124    	; 0x712 <generator+0x96>
     696:	ec 01       	movw	r28, r24
		ASYNC(self->outPut, sendSignal, self->pin);
     698:	04 85       	ldd	r16, Z+12	; 0x0c
     69a:	15 85       	ldd	r17, Z+13	; 0x0d
     69c:	c2 84       	ldd	r12, Z+10	; 0x0a
     69e:	d3 84       	ldd	r13, Z+11	; 0x0b
     6a0:	0f 2e       	mov	r0, r31
     6a2:	f0 e2       	ldi	r31, 0x20	; 32
     6a4:	ef 2e       	mov	r14, r31
     6a6:	f3 e0       	ldi	r31, 0x03	; 3
     6a8:	ff 2e       	mov	r15, r31
     6aa:	f0 2d       	mov	r31, r0
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	a9 01       	movw	r20, r18
     6b2:	60 e0       	ldi	r22, 0x00	; 0
     6b4:	70 e0       	ldi	r23, 0x00	; 0
     6b6:	cb 01       	movw	r24, r22
     6b8:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <async>
		int fre = (500/self->currentFreq);
     6bc:	6c 81       	ldd	r22, Y+4	; 0x04
     6be:	7d 81       	ldd	r23, Y+5	; 0x05
     6c0:	84 ef       	ldi	r24, 0xF4	; 244
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__divmodhi4>
		AFTER(MSEC(fre), self, generator, 0);
     6c8:	2d e7       	ldi	r18, 0x7D	; 125
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	db 01       	movw	r26, r22
     6ce:	0e 94 0c 11 	call	0x2218	; 0x2218 <__usmulhisi3>
     6d2:	8b 01       	movw	r16, r22
     6d4:	9c 01       	movw	r18, r24
     6d6:	99 23       	and	r25, r25
     6d8:	24 f4       	brge	.+8      	; 0x6e2 <generator+0x66>
     6da:	0d 5f       	subi	r16, 0xFD	; 253
     6dc:	1f 4f       	sbci	r17, 0xFF	; 255
     6de:	2f 4f       	sbci	r18, 0xFF	; 255
     6e0:	3f 4f       	sbci	r19, 0xFF	; 255
     6e2:	c9 01       	movw	r24, r18
     6e4:	b8 01       	movw	r22, r16
     6e6:	95 95       	asr	r25
     6e8:	87 95       	ror	r24
     6ea:	77 95       	ror	r23
     6ec:	67 95       	ror	r22
     6ee:	95 95       	asr	r25
     6f0:	87 95       	ror	r24
     6f2:	77 95       	ror	r23
     6f4:	67 95       	ror	r22
     6f6:	c1 2c       	mov	r12, r1
     6f8:	d1 2c       	mov	r13, r1
     6fa:	0f 2e       	mov	r0, r31
     6fc:	fe e3       	ldi	r31, 0x3E	; 62
     6fe:	ef 2e       	mov	r14, r31
     700:	f3 e0       	ldi	r31, 0x03	; 3
     702:	ff 2e       	mov	r15, r31
     704:	f0 2d       	mov	r31, r0
     706:	8e 01       	movw	r16, r28
     708:	20 e0       	ldi	r18, 0x00	; 0
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	a9 01       	movw	r20, r18
     70e:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <async>
	}

	return 0;
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	1f 91       	pop	r17
     71c:	0f 91       	pop	r16
     71e:	ff 90       	pop	r15
     720:	ef 90       	pop	r14
     722:	df 90       	pop	r13
     724:	cf 90       	pop	r12
     726:	08 95       	ret

00000728 <increase>:
#include "PulseGenerator.h"

int increase(PulseGenerator *self, int unused){
     728:	cf 92       	push	r12
     72a:	df 92       	push	r13
     72c:	ef 92       	push	r14
     72e:	ff 92       	push	r15
     730:	0f 93       	push	r16
     732:	1f 93       	push	r17
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	ec 01       	movw	r28, r24
	if (!(self->currentFreq >= 99)){
     73a:	cc 80       	ldd	r12, Y+4	; 0x04
     73c:	dd 80       	ldd	r13, Y+5	; 0x05
     73e:	83 e6       	ldi	r24, 0x63	; 99
     740:	c8 16       	cp	r12, r24
     742:	d1 04       	cpc	r13, r1
     744:	fc f4       	brge	.+62     	; 0x784 <increase+0x5c>
		 self->currentFreq += 1;
     746:	c6 01       	movw	r24, r12
     748:	01 96       	adiw	r24, 0x01	; 1
     74a:	9d 83       	std	Y+5, r25	; 0x05
     74c:	8c 83       	std	Y+4, r24	; 0x04
		ASYNC(self->display, printAt, PACK_PRINT(self->currentFreq, self->pos));
     74e:	d8 84       	ldd	r13, Y+8	; 0x08
     750:	cd 2c       	mov	r12, r13
     752:	c7 94       	ror	r12
     754:	cc 24       	eor	r12, r12
     756:	c7 94       	ror	r12
     758:	8f 77       	andi	r24, 0x7F	; 127
     75a:	c8 2a       	or	r12, r24
     75c:	8d 2d       	mov	r24, r13
     75e:	86 95       	lsr	r24
     760:	83 70       	andi	r24, 0x03	; 3
     762:	d8 2e       	mov	r13, r24
     764:	0e 85       	ldd	r16, Y+14	; 0x0e
     766:	1f 85       	ldd	r17, Y+15	; 0x0f
     768:	0f 2e       	mov	r0, r31
     76a:	f1 ed       	ldi	r31, 0xD1	; 209
     76c:	ef 2e       	mov	r14, r31
     76e:	f2 e0       	ldi	r31, 0x02	; 2
     770:	ff 2e       	mov	r15, r31
     772:	f0 2d       	mov	r31, r0
     774:	20 e0       	ldi	r18, 0x00	; 0
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	a9 01       	movw	r20, r18
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	70 e0       	ldi	r23, 0x00	; 0
     77e:	cb 01       	movw	r24, r22
     780:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <async>
	}
	if(self->currentFreq == 1){
     784:	8c 81       	ldd	r24, Y+4	; 0x04
     786:	9d 81       	ldd	r25, Y+5	; 0x05
     788:	01 97       	sbiw	r24, 0x01	; 1
     78a:	89 f4       	brne	.+34     	; 0x7ae <increase+0x86>
		ASYNC(self, generator, 0);
     78c:	c1 2c       	mov	r12, r1
     78e:	d1 2c       	mov	r13, r1
     790:	0f 2e       	mov	r0, r31
     792:	fe e3       	ldi	r31, 0x3E	; 62
     794:	ef 2e       	mov	r14, r31
     796:	f3 e0       	ldi	r31, 0x03	; 3
     798:	ff 2e       	mov	r15, r31
     79a:	f0 2d       	mov	r31, r0
     79c:	8e 01       	movw	r16, r28
     79e:	20 e0       	ldi	r18, 0x00	; 0
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	a9 01       	movw	r20, r18
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	70 e0       	ldi	r23, 0x00	; 0
     7a8:	cb 01       	movw	r24, r22
     7aa:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <async>
	}
	return 0;
}
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	1f 91       	pop	r17
     7b8:	0f 91       	pop	r16
     7ba:	ff 90       	pop	r15
     7bc:	ef 90       	pop	r14
     7be:	df 90       	pop	r13
     7c0:	cf 90       	pop	r12
     7c2:	08 95       	ret

000007c4 <decrease>:

int decrease(PulseGenerator *self, int unused){
     7c4:	cf 92       	push	r12
     7c6:	df 92       	push	r13
     7c8:	ef 92       	push	r14
     7ca:	ff 92       	push	r15
     7cc:	0f 93       	push	r16
     7ce:	1f 93       	push	r17
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
     7d4:	ec 01       	movw	r28, r24
	if (self->currentFreq > 0) self->currentFreq -= 1;
     7d6:	8c 81       	ldd	r24, Y+4	; 0x04
     7d8:	9d 81       	ldd	r25, Y+5	; 0x05
     7da:	18 16       	cp	r1, r24
     7dc:	19 06       	cpc	r1, r25
     7de:	1c f4       	brge	.+6      	; 0x7e6 <decrease+0x22>
     7e0:	01 97       	sbiw	r24, 0x01	; 1
     7e2:	9d 83       	std	Y+5, r25	; 0x05
     7e4:	8c 83       	std	Y+4, r24	; 0x04
	
	if(self->currentFreq == 0){
     7e6:	8c 81       	ldd	r24, Y+4	; 0x04
     7e8:	9d 81       	ldd	r25, Y+5	; 0x05
     7ea:	89 2b       	or	r24, r25
     7ec:	89 f4       	brne	.+34     	; 0x810 <decrease+0x4c>
		ASYNC(self, setLow, self->pin);
     7ee:	ca 84       	ldd	r12, Y+10	; 0x0a
     7f0:	db 84       	ldd	r13, Y+11	; 0x0b
     7f2:	0f 2e       	mov	r0, r31
     7f4:	f2 e3       	ldi	r31, 0x32	; 50
     7f6:	ef 2e       	mov	r14, r31
     7f8:	f3 e0       	ldi	r31, 0x03	; 3
     7fa:	ff 2e       	mov	r15, r31
     7fc:	f0 2d       	mov	r31, r0
     7fe:	8e 01       	movw	r16, r28
     800:	20 e0       	ldi	r18, 0x00	; 0
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	a9 01       	movw	r20, r18
     806:	60 e0       	ldi	r22, 0x00	; 0
     808:	70 e0       	ldi	r23, 0x00	; 0
     80a:	cb 01       	movw	r24, r22
     80c:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <async>
		
	}
	ASYNC(self->display, printAt, PACK_PRINT(self->currentFreq, self->pos));
     810:	9c 81       	ldd	r25, Y+4	; 0x04
     812:	d8 84       	ldd	r13, Y+8	; 0x08
     814:	8d 2d       	mov	r24, r13
     816:	87 95       	ror	r24
     818:	88 27       	eor	r24, r24
     81a:	87 95       	ror	r24
     81c:	9f 77       	andi	r25, 0x7F	; 127
     81e:	c9 2e       	mov	r12, r25
     820:	c8 2a       	or	r12, r24
     822:	8d 2d       	mov	r24, r13
     824:	86 95       	lsr	r24
     826:	83 70       	andi	r24, 0x03	; 3
     828:	d8 2e       	mov	r13, r24
     82a:	0e 85       	ldd	r16, Y+14	; 0x0e
     82c:	1f 85       	ldd	r17, Y+15	; 0x0f
     82e:	0f 2e       	mov	r0, r31
     830:	f1 ed       	ldi	r31, 0xD1	; 209
     832:	ef 2e       	mov	r14, r31
     834:	f2 e0       	ldi	r31, 0x02	; 2
     836:	ff 2e       	mov	r15, r31
     838:	f0 2d       	mov	r31, r0
     83a:	20 e0       	ldi	r18, 0x00	; 0
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	a9 01       	movw	r20, r18
     840:	60 e0       	ldi	r22, 0x00	; 0
     842:	70 e0       	ldi	r23, 0x00	; 0
     844:	cb 01       	movw	r24, r22
     846:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <async>
	
	return 0;
}
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	1f 91       	pop	r17
     854:	0f 91       	pop	r16
     856:	ff 90       	pop	r15
     858:	ef 90       	pop	r14
     85a:	df 90       	pop	r13
     85c:	cf 90       	pop	r12
     85e:	08 95       	ret

00000860 <reset>:

int reset(PulseGenerator *self, int unused){
     860:	cf 92       	push	r12
     862:	df 92       	push	r13
     864:	ef 92       	push	r14
     866:	ff 92       	push	r15
     868:	0f 93       	push	r16
     86a:	1f 93       	push	r17
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
     870:	ec 01       	movw	r28, r24
	if (self->currentFreq == 0){
     872:	8c 81       	ldd	r24, Y+4	; 0x04
     874:	9d 81       	ldd	r25, Y+5	; 0x05
     876:	00 97       	sbiw	r24, 0x00	; 0
     878:	c1 f4       	brne	.+48     	; 0x8aa <reset+0x4a>
		self->currentFreq = self->lastFreq;
     87a:	8e 81       	ldd	r24, Y+6	; 0x06
     87c:	9f 81       	ldd	r25, Y+7	; 0x07
     87e:	9d 83       	std	Y+5, r25	; 0x05
     880:	8c 83       	std	Y+4, r24	; 0x04
		if(self->currentFreq != 0) ASYNC(self, generator, 0);
     882:	89 2b       	or	r24, r25
     884:	39 f1       	breq	.+78     	; 0x8d4 <reset+0x74>
     886:	c1 2c       	mov	r12, r1
     888:	d1 2c       	mov	r13, r1
     88a:	0f 2e       	mov	r0, r31
     88c:	fe e3       	ldi	r31, 0x3E	; 62
     88e:	ef 2e       	mov	r14, r31
     890:	f3 e0       	ldi	r31, 0x03	; 3
     892:	ff 2e       	mov	r15, r31
     894:	f0 2d       	mov	r31, r0
     896:	8e 01       	movw	r16, r28
     898:	20 e0       	ldi	r18, 0x00	; 0
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	a9 01       	movw	r20, r18
     89e:	60 e0       	ldi	r22, 0x00	; 0
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	cb 01       	movw	r24, r22
     8a4:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <async>
     8a8:	15 c0       	rjmp	.+42     	; 0x8d4 <reset+0x74>
	}
	else{
		self->lastFreq = self->currentFreq;
     8aa:	9f 83       	std	Y+7, r25	; 0x07
     8ac:	8e 83       	std	Y+6, r24	; 0x06
		self->currentFreq = 0;
     8ae:	1d 82       	std	Y+5, r1	; 0x05
     8b0:	1c 82       	std	Y+4, r1	; 0x04
		ASYNC(self, setLow, self->pin);
     8b2:	ca 84       	ldd	r12, Y+10	; 0x0a
     8b4:	db 84       	ldd	r13, Y+11	; 0x0b
     8b6:	0f 2e       	mov	r0, r31
     8b8:	f2 e3       	ldi	r31, 0x32	; 50
     8ba:	ef 2e       	mov	r14, r31
     8bc:	f3 e0       	ldi	r31, 0x03	; 3
     8be:	ff 2e       	mov	r15, r31
     8c0:	f0 2d       	mov	r31, r0
     8c2:	8e 01       	movw	r16, r28
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	a9 01       	movw	r20, r18
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	cb 01       	movw	r24, r22
     8d0:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <async>
	}
	ASYNC(self->display, printAt, PACK_PRINT(self->currentFreq, self->pos));
     8d4:	9c 81       	ldd	r25, Y+4	; 0x04
     8d6:	d8 84       	ldd	r13, Y+8	; 0x08
     8d8:	8d 2d       	mov	r24, r13
     8da:	87 95       	ror	r24
     8dc:	88 27       	eor	r24, r24
     8de:	87 95       	ror	r24
     8e0:	9f 77       	andi	r25, 0x7F	; 127
     8e2:	c9 2e       	mov	r12, r25
     8e4:	c8 2a       	or	r12, r24
     8e6:	8d 2d       	mov	r24, r13
     8e8:	86 95       	lsr	r24
     8ea:	83 70       	andi	r24, 0x03	; 3
     8ec:	d8 2e       	mov	r13, r24
     8ee:	0e 85       	ldd	r16, Y+14	; 0x0e
     8f0:	1f 85       	ldd	r17, Y+15	; 0x0f
     8f2:	0f 2e       	mov	r0, r31
     8f4:	f1 ed       	ldi	r31, 0xD1	; 209
     8f6:	ef 2e       	mov	r14, r31
     8f8:	f2 e0       	ldi	r31, 0x02	; 2
     8fa:	ff 2e       	mov	r15, r31
     8fc:	f0 2d       	mov	r31, r0
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	a9 01       	movw	r20, r18
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	70 e0       	ldi	r23, 0x00	; 0
     908:	cb 01       	movw	r24, r22
     90a:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <async>
	
	return 0;
}
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	1f 91       	pop	r17
     918:	0f 91       	pop	r16
     91a:	ff 90       	pop	r15
     91c:	ef 90       	pop	r14
     91e:	df 90       	pop	r13
     920:	cf 90       	pop	r12
     922:	08 95       	ret

00000924 <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
     928:	00 d0       	rcall	.+0      	; 0x92a <initialize+0x6>
     92a:	00 d0       	rcall	.+0      	; 0x92c <initialize+0x8>
     92c:	cd b7       	in	r28, 0x3d	; 61
     92e:	de b7       	in	r29, 0x3e	; 62
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	18 c0       	rjmp	.+48     	; 0x966 <initialize+0x42>
     936:	ac 01       	movw	r20, r24
     938:	4f 5f       	subi	r20, 0xFF	; 255
     93a:	5f 4f       	sbci	r21, 0xFF	; 255
     93c:	9a 01       	movw	r18, r20
     93e:	22 95       	swap	r18
     940:	32 95       	swap	r19
     942:	30 7f       	andi	r19, 0xF0	; 240
     944:	32 27       	eor	r19, r18
     946:	20 7f       	andi	r18, 0xF0	; 240
     948:	32 27       	eor	r19, r18
     94a:	27 5a       	subi	r18, 0xA7	; 167
     94c:	3d 4f       	sbci	r19, 0xFD	; 253
     94e:	82 95       	swap	r24
     950:	92 95       	swap	r25
     952:	90 7f       	andi	r25, 0xF0	; 240
     954:	98 27       	eor	r25, r24
     956:	80 7f       	andi	r24, 0xF0	; 240
     958:	98 27       	eor	r25, r24
     95a:	fc 01       	movw	r30, r24
     95c:	e7 5a       	subi	r30, 0xA7	; 167
     95e:	fd 4f       	sbci	r31, 0xFD	; 253
     960:	31 83       	std	Z+1, r19	; 0x01
     962:	20 83       	st	Z, r18
     964:	ca 01       	movw	r24, r20
     966:	8e 30       	cpi	r24, 0x0E	; 14
     968:	91 05       	cpc	r25, r1
     96a:	2c f3       	brlt	.-54     	; 0x936 <initialize+0x12>
     96c:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <messages+0xe1>
     970:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <messages+0xe0>
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	15 c0       	rjmp	.+42     	; 0x9a4 <initialize+0x80>
     97a:	ac 01       	movw	r20, r24
     97c:	4f 5f       	subi	r20, 0xFF	; 255
     97e:	5f 4f       	sbci	r21, 0xFF	; 255
     980:	6d e1       	ldi	r22, 0x1D	; 29
     982:	64 9f       	mul	r22, r20
     984:	90 01       	movw	r18, r0
     986:	65 9f       	mul	r22, r21
     988:	30 0d       	add	r19, r0
     98a:	11 24       	eor	r1, r1
     98c:	2c 55       	subi	r18, 0x5C	; 92
     98e:	3e 4f       	sbci	r19, 0xFE	; 254
     990:	68 9f       	mul	r22, r24
     992:	f0 01       	movw	r30, r0
     994:	69 9f       	mul	r22, r25
     996:	f0 0d       	add	r31, r0
     998:	11 24       	eor	r1, r1
     99a:	ec 55       	subi	r30, 0x5C	; 92
     99c:	fe 4f       	sbci	r31, 0xFE	; 254
     99e:	31 83       	std	Z+1, r19	; 0x01
     9a0:	20 83       	st	Z, r18
     9a2:	ca 01       	movw	r24, r20
     9a4:	83 30       	cpi	r24, 0x03	; 3
     9a6:	91 05       	cpc	r25, r1
     9a8:	44 f3       	brlt	.-48     	; 0x97a <initialize+0x56>
     9aa:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <threads+0x58>
     9ae:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <threads+0x57>
     9b2:	1a 82       	std	Y+2, r1	; 0x02
     9b4:	19 82       	std	Y+1, r1	; 0x01
     9b6:	32 c0       	rjmp	.+100    	; 0xa1c <initialize+0xf8>
     9b8:	2d e1       	ldi	r18, 0x1D	; 29
     9ba:	49 81       	ldd	r20, Y+1	; 0x01
     9bc:	5a 81       	ldd	r21, Y+2	; 0x02
     9be:	24 9f       	mul	r18, r20
     9c0:	c0 01       	movw	r24, r0
     9c2:	25 9f       	mul	r18, r21
     9c4:	90 0d       	add	r25, r0
     9c6:	11 24       	eor	r1, r1
     9c8:	fc 01       	movw	r30, r24
     9ca:	e6 55       	subi	r30, 0x56	; 86
     9cc:	fe 4f       	sbci	r31, 0xFE	; 254
     9ce:	fc 83       	std	Y+4, r31	; 0x04
     9d0:	eb 83       	std	Y+3, r30	; 0x03
     9d2:	cf 01       	movw	r24, r30
     9d4:	0e 94 36 11 	call	0x226c	; 0x226c <setjmp>
     9d8:	20 e6       	ldi	r18, 0x60	; 96
     9da:	49 81       	ldd	r20, Y+1	; 0x01
     9dc:	5a 81       	ldd	r21, Y+2	; 0x02
     9de:	24 9f       	mul	r18, r20
     9e0:	c0 01       	movw	r24, r0
     9e2:	25 9f       	mul	r18, r21
     9e4:	90 0d       	add	r25, r0
     9e6:	11 24       	eor	r1, r1
     9e8:	8b 55       	subi	r24, 0x5B	; 91
     9ea:	9c 4f       	sbci	r25, 0xFC	; 252
     9ec:	eb 81       	ldd	r30, Y+3	; 0x03
     9ee:	fc 81       	ldd	r31, Y+4	; 0x04
     9f0:	91 8b       	std	Z+17, r25	; 0x11
     9f2:	80 8b       	std	Z+16, r24	; 0x10
     9f4:	93 8b       	std	Z+19, r25	; 0x13
     9f6:	82 8b       	std	Z+18, r24	; 0x12
     9f8:	8e e6       	ldi	r24, 0x6E	; 110
     9fa:	90 e1       	ldi	r25, 0x10	; 16
     9fc:	96 8b       	std	Z+22, r25	; 0x16
     9fe:	85 8b       	std	Z+21, r24	; 0x15
     a00:	8d e1       	ldi	r24, 0x1D	; 29
     a02:	84 9f       	mul	r24, r20
     a04:	f0 01       	movw	r30, r0
     a06:	85 9f       	mul	r24, r21
     a08:	f0 0d       	add	r31, r0
     a0a:	11 24       	eor	r1, r1
     a0c:	ec 55       	subi	r30, 0x5C	; 92
     a0e:	fe 4f       	sbci	r31, 0xFE	; 254
     a10:	15 82       	std	Z+5, r1	; 0x05
     a12:	14 82       	std	Z+4, r1	; 0x04
     a14:	4f 5f       	subi	r20, 0xFF	; 255
     a16:	5f 4f       	sbci	r21, 0xFF	; 255
     a18:	5a 83       	std	Y+2, r21	; 0x02
     a1a:	49 83       	std	Y+1, r20	; 0x01
     a1c:	29 81       	ldd	r18, Y+1	; 0x01
     a1e:	3a 81       	ldd	r19, Y+2	; 0x02
     a20:	24 30       	cpi	r18, 0x04	; 4
     a22:	31 05       	cpc	r19, r1
     a24:	4c f2       	brlt	.-110    	; 0x9b8 <initialize+0x94>
     a26:	ec e3       	ldi	r30, 0x3C	; 60
     a28:	f2 e0       	ldi	r31, 0x02	; 2
     a2a:	11 82       	std	Z+1, r1	; 0x01
     a2c:	10 82       	st	Z, r1
     a2e:	15 82       	std	Z+5, r1	; 0x05
     a30:	14 82       	std	Z+4, r1	; 0x04
     a32:	13 82       	std	Z+3, r1	; 0x03
     a34:	12 82       	std	Z+2, r1	; 0x02
     a36:	e1 e6       	ldi	r30, 0x61	; 97
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	80 e8       	ldi	r24, 0x80	; 128
     a3c:	80 83       	st	Z, r24
     a3e:	10 82       	st	Z, r1
     a40:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a44:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a48:	84 e0       	ldi	r24, 0x04	; 4
     a4a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     a54:	0f 90       	pop	r0
     a56:	0f 90       	pop	r0
     a58:	0f 90       	pop	r0
     a5a:	0f 90       	pop	r0
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	08 95       	ret

00000a62 <dispatch>:
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	00 d0       	rcall	.+0      	; 0xa68 <dispatch+0x6>
     a68:	cd b7       	in	r28, 0x3d	; 61
     a6a:	de b7       	in	r29, 0x3e	; 62
     a6c:	9a 83       	std	Y+2, r25	; 0x02
     a6e:	89 83       	std	Y+1, r24	; 0x01
     a70:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <current>
     a74:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <current+0x1>
     a78:	06 96       	adiw	r24, 0x06	; 6
     a7a:	0e 94 36 11 	call	0x226c	; 0x226c <setjmp>
     a7e:	89 2b       	or	r24, r25
     a80:	59 f4       	brne	.+22     	; 0xa98 <dispatch+0x36>
     a82:	89 81       	ldd	r24, Y+1	; 0x01
     a84:	9a 81       	ldd	r25, Y+2	; 0x02
     a86:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <current+0x1>
     a8a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <current>
     a8e:	61 e0       	ldi	r22, 0x01	; 1
     a90:	70 e0       	ldi	r23, 0x00	; 0
     a92:	06 96       	adiw	r24, 0x06	; 6
     a94:	0e 94 56 11 	call	0x22ac	; 0x22ac <longjmp>
     a98:	0f 90       	pop	r0
     a9a:	0f 90       	pop	r0
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	08 95       	ret

00000aa2 <enqueueByDeadline>:
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	dc 01       	movw	r26, r24
     aac:	cb 01       	movw	r24, r22
     aae:	eb 01       	movw	r28, r22
     ab0:	e8 81       	ld	r30, Y
     ab2:	f9 81       	ldd	r31, Y+1	; 0x01
     ab4:	c0 e0       	ldi	r28, 0x00	; 0
     ab6:	d0 e0       	ldi	r29, 0x00	; 0
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <enqueueByDeadline+0x20>
     aba:	ef 01       	movw	r28, r30
     abc:	01 90       	ld	r0, Z+
     abe:	f0 81       	ld	r31, Z
     ac0:	e0 2d       	mov	r30, r0
     ac2:	30 97       	sbiw	r30, 0x00	; 0
     ac4:	79 f0       	breq	.+30     	; 0xae4 <enqueueByDeadline+0x42>
     ac6:	06 81       	ldd	r16, Z+6	; 0x06
     ac8:	17 81       	ldd	r17, Z+7	; 0x07
     aca:	20 85       	ldd	r18, Z+8	; 0x08
     acc:	31 85       	ldd	r19, Z+9	; 0x09
     ace:	16 96       	adiw	r26, 0x06	; 6
     ad0:	4d 91       	ld	r20, X+
     ad2:	5d 91       	ld	r21, X+
     ad4:	6d 91       	ld	r22, X+
     ad6:	7c 91       	ld	r23, X
     ad8:	19 97       	sbiw	r26, 0x09	; 9
     ada:	40 17       	cp	r20, r16
     adc:	51 07       	cpc	r21, r17
     ade:	62 07       	cpc	r22, r18
     ae0:	73 07       	cpc	r23, r19
     ae2:	5c f7       	brge	.-42     	; 0xaba <enqueueByDeadline+0x18>
     ae4:	11 96       	adiw	r26, 0x01	; 1
     ae6:	fc 93       	st	X, r31
     ae8:	ee 93       	st	-X, r30
     aea:	20 97       	sbiw	r28, 0x00	; 0
     aec:	21 f4       	brne	.+8      	; 0xaf6 <enqueueByDeadline+0x54>
     aee:	fc 01       	movw	r30, r24
     af0:	b1 83       	std	Z+1, r27	; 0x01
     af2:	a0 83       	st	Z, r26
     af4:	02 c0       	rjmp	.+4      	; 0xafa <enqueueByDeadline+0x58>
     af6:	b9 83       	std	Y+1, r27	; 0x01
     af8:	a8 83       	st	Y, r26
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	08 95       	ret

00000b04 <enqueueByBaseline>:
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	dc 01       	movw	r26, r24
     b0e:	cb 01       	movw	r24, r22
     b10:	eb 01       	movw	r28, r22
     b12:	e8 81       	ld	r30, Y
     b14:	f9 81       	ldd	r31, Y+1	; 0x01
     b16:	c0 e0       	ldi	r28, 0x00	; 0
     b18:	d0 e0       	ldi	r29, 0x00	; 0
     b1a:	04 c0       	rjmp	.+8      	; 0xb24 <enqueueByBaseline+0x20>
     b1c:	ef 01       	movw	r28, r30
     b1e:	01 90       	ld	r0, Z+
     b20:	f0 81       	ld	r31, Z
     b22:	e0 2d       	mov	r30, r0
     b24:	30 97       	sbiw	r30, 0x00	; 0
     b26:	79 f0       	breq	.+30     	; 0xb46 <enqueueByBaseline+0x42>
     b28:	02 81       	ldd	r16, Z+2	; 0x02
     b2a:	13 81       	ldd	r17, Z+3	; 0x03
     b2c:	24 81       	ldd	r18, Z+4	; 0x04
     b2e:	35 81       	ldd	r19, Z+5	; 0x05
     b30:	12 96       	adiw	r26, 0x02	; 2
     b32:	4d 91       	ld	r20, X+
     b34:	5d 91       	ld	r21, X+
     b36:	6d 91       	ld	r22, X+
     b38:	7c 91       	ld	r23, X
     b3a:	15 97       	sbiw	r26, 0x05	; 5
     b3c:	40 17       	cp	r20, r16
     b3e:	51 07       	cpc	r21, r17
     b40:	62 07       	cpc	r22, r18
     b42:	73 07       	cpc	r23, r19
     b44:	5c f7       	brge	.-42     	; 0xb1c <enqueueByBaseline+0x18>
     b46:	11 96       	adiw	r26, 0x01	; 1
     b48:	fc 93       	st	X, r31
     b4a:	ee 93       	st	-X, r30
     b4c:	20 97       	sbiw	r28, 0x00	; 0
     b4e:	21 f4       	brne	.+8      	; 0xb58 <enqueueByBaseline+0x54>
     b50:	fc 01       	movw	r30, r24
     b52:	b1 83       	std	Z+1, r27	; 0x01
     b54:	a0 83       	st	Z, r26
     b56:	02 c0       	rjmp	.+4      	; 0xb5c <enqueueByBaseline+0x58>
     b58:	b9 83       	std	Y+1, r27	; 0x01
     b5a:	a8 83       	st	Y, r26
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	1f 91       	pop	r17
     b62:	0f 91       	pop	r16
     b64:	08 95       	ret

00000b66 <dequeue>:
     b66:	dc 01       	movw	r26, r24
     b68:	ed 91       	ld	r30, X+
     b6a:	fc 91       	ld	r31, X
     b6c:	11 97       	sbiw	r26, 0x01	; 1
     b6e:	30 97       	sbiw	r30, 0x00	; 0
     b70:	59 f4       	brne	.+22     	; 0xb88 <dequeue+0x22>
     b72:	8f ef       	ldi	r24, 0xFF	; 255
     b74:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     b78:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     b7c:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	83 bf       	out	0x33, r24	; 51
     b84:	88 95       	sleep
     b86:	fc cf       	rjmp	.-8      	; 0xb80 <dequeue+0x1a>
     b88:	20 81       	ld	r18, Z
     b8a:	31 81       	ldd	r19, Z+1	; 0x01
     b8c:	2d 93       	st	X+, r18
     b8e:	3c 93       	st	X, r19
     b90:	cf 01       	movw	r24, r30
     b92:	08 95       	ret

00000b94 <insert>:
     b94:	fb 01       	movw	r30, r22
     b96:	20 81       	ld	r18, Z
     b98:	31 81       	ldd	r19, Z+1	; 0x01
     b9a:	fc 01       	movw	r30, r24
     b9c:	31 83       	std	Z+1, r19	; 0x01
     b9e:	20 83       	st	Z, r18
     ba0:	fb 01       	movw	r30, r22
     ba2:	91 83       	std	Z+1, r25	; 0x01
     ba4:	80 83       	st	Z, r24
     ba6:	08 95       	ret

00000ba8 <push>:
     ba8:	fb 01       	movw	r30, r22
     baa:	20 81       	ld	r18, Z
     bac:	31 81       	ldd	r19, Z+1	; 0x01
     bae:	fc 01       	movw	r30, r24
     bb0:	31 83       	std	Z+1, r19	; 0x01
     bb2:	20 83       	st	Z, r18
     bb4:	fb 01       	movw	r30, r22
     bb6:	91 83       	std	Z+1, r25	; 0x01
     bb8:	80 83       	st	Z, r24
     bba:	08 95       	ret

00000bbc <pop>:
     bbc:	dc 01       	movw	r26, r24
     bbe:	ed 91       	ld	r30, X+
     bc0:	fc 91       	ld	r31, X
     bc2:	11 97       	sbiw	r26, 0x01	; 1
     bc4:	20 81       	ld	r18, Z
     bc6:	31 81       	ldd	r19, Z+1	; 0x01
     bc8:	2d 93       	st	X+, r18
     bca:	3c 93       	st	X, r19
     bcc:	cf 01       	movw	r24, r30
     bce:	08 95       	ret

00000bd0 <schedule>:
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <activeStack>
     bd8:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <activeStack+0x1>
     bdc:	c2 81       	ldd	r28, Z+2	; 0x02
     bde:	d3 81       	ldd	r29, Z+3	; 0x03
     be0:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <msgQ>
     be4:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <msgQ+0x1>
     be8:	30 97       	sbiw	r30, 0x00	; 0
     bea:	19 f1       	breq	.+70     	; 0xc32 <schedule+0x62>
     bec:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <threadPool>
     bf0:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <threadPool+0x1>
     bf4:	89 2b       	or	r24, r25
     bf6:	e9 f0       	breq	.+58     	; 0xc32 <schedule+0x62>
     bf8:	20 97       	sbiw	r28, 0x00	; 0
     bfa:	69 f0       	breq	.+26     	; 0xc16 <schedule+0x46>
     bfc:	86 81       	ldd	r24, Z+6	; 0x06
     bfe:	97 81       	ldd	r25, Z+7	; 0x07
     c00:	a0 85       	ldd	r26, Z+8	; 0x08
     c02:	b1 85       	ldd	r27, Z+9	; 0x09
     c04:	4e 81       	ldd	r20, Y+6	; 0x06
     c06:	5f 81       	ldd	r21, Y+7	; 0x07
     c08:	68 85       	ldd	r22, Y+8	; 0x08
     c0a:	79 85       	ldd	r23, Y+9	; 0x09
     c0c:	84 1b       	sub	r24, r20
     c0e:	95 0b       	sbc	r25, r21
     c10:	a6 0b       	sbc	r26, r22
     c12:	b7 0b       	sbc	r27, r23
     c14:	72 f4       	brpl	.+28     	; 0xc32 <schedule+0x62>
     c16:	8a e3       	ldi	r24, 0x3A	; 58
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	0e 94 de 05 	call	0xbbc	; 0xbbc <pop>
     c1e:	68 e3       	ldi	r22, 0x38	; 56
     c20:	71 e0       	ldi	r23, 0x01	; 1
     c22:	0e 94 d4 05 	call	0xba8	; 0xba8 <push>
     c26:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <activeStack>
     c2a:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <activeStack+0x1>
     c2e:	0e 94 31 05 	call	0xa62	; 0xa62 <dispatch>
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	08 95       	ret

00000c38 <__vector_1>:
     c38:	1f 92       	push	r1
     c3a:	0f 92       	push	r0
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	0f 92       	push	r0
     c40:	11 24       	eor	r1, r1
     c42:	0f 93       	push	r16
     c44:	1f 93       	push	r17
     c46:	2f 93       	push	r18
     c48:	3f 93       	push	r19
     c4a:	4f 93       	push	r20
     c4c:	5f 93       	push	r21
     c4e:	6f 93       	push	r22
     c50:	7f 93       	push	r23
     c52:	8f 93       	push	r24
     c54:	9f 93       	push	r25
     c56:	af 93       	push	r26
     c58:	bf 93       	push	r27
     c5a:	ef 93       	push	r30
     c5c:	ff 93       	push	r31
     c5e:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <overflows>
     c62:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <overflows+0x1>
     c66:	ac 01       	movw	r20, r24
     c68:	09 2e       	mov	r0, r25
     c6a:	00 0c       	add	r0, r0
     c6c:	66 0b       	sbc	r22, r22
     c6e:	77 0b       	sbc	r23, r23
     c70:	9a 01       	movw	r18, r20
     c72:	11 27       	eor	r17, r17
     c74:	00 27       	eor	r16, r16
     c76:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c7a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c7e:	60 e0       	ldi	r22, 0x00	; 0
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	40 2b       	or	r20, r16
     c84:	51 2b       	or	r21, r17
     c86:	62 2b       	or	r22, r18
     c88:	73 2b       	or	r23, r19
     c8a:	40 93 78 01 	sts	0x0178, r20	; 0x800178 <timestamp>
     c8e:	50 93 79 01 	sts	0x0179, r21	; 0x800179 <timestamp+0x1>
     c92:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <timestamp+0x2>
     c96:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <timestamp+0x3>
     c9a:	b0 9b       	sbis	0x16, 0	; 22
     c9c:	1a c0       	rjmp	.+52     	; 0xcd2 <__vector_1+0x9a>
     c9e:	01 96       	adiw	r24, 0x01	; 1
     ca0:	09 2e       	mov	r0, r25
     ca2:	00 0c       	add	r0, r0
     ca4:	aa 0b       	sbc	r26, r26
     ca6:	bb 0b       	sbc	r27, r27
     ca8:	bc 01       	movw	r22, r24
     caa:	55 27       	eor	r21, r21
     cac:	44 27       	eor	r20, r20
     cae:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cb2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cb6:	a0 e0       	ldi	r26, 0x00	; 0
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	84 2b       	or	r24, r20
     cbc:	95 2b       	or	r25, r21
     cbe:	a6 2b       	or	r26, r22
     cc0:	b7 2b       	or	r27, r23
     cc2:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <timestamp>
     cc6:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <timestamp+0x1>
     cca:	a0 93 7a 01 	sts	0x017A, r26	; 0x80017a <timestamp+0x2>
     cce:	b0 93 7b 01 	sts	0x017B, r27	; 0x80017b <timestamp+0x3>
     cd2:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <mtable>
     cd6:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <mtable+0x1>
     cda:	30 97       	sbiw	r30, 0x00	; 0
     cdc:	39 f0       	breq	.+14     	; 0xcec <__vector_1+0xb4>
     cde:	60 e0       	ldi	r22, 0x00	; 0
     ce0:	70 e0       	ldi	r23, 0x00	; 0
     ce2:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <otable>
     ce6:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <otable+0x1>
     cea:	09 95       	icall
     cec:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <schedule>
     cf0:	ff 91       	pop	r31
     cf2:	ef 91       	pop	r30
     cf4:	bf 91       	pop	r27
     cf6:	af 91       	pop	r26
     cf8:	9f 91       	pop	r25
     cfa:	8f 91       	pop	r24
     cfc:	7f 91       	pop	r23
     cfe:	6f 91       	pop	r22
     d00:	5f 91       	pop	r21
     d02:	4f 91       	pop	r20
     d04:	3f 91       	pop	r19
     d06:	2f 91       	pop	r18
     d08:	1f 91       	pop	r17
     d0a:	0f 91       	pop	r16
     d0c:	0f 90       	pop	r0
     d0e:	0f be       	out	0x3f, r0	; 63
     d10:	0f 90       	pop	r0
     d12:	1f 90       	pop	r1
     d14:	18 95       	reti

00000d16 <__vector_2>:
     d16:	1f 92       	push	r1
     d18:	0f 92       	push	r0
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	0f 92       	push	r0
     d1e:	11 24       	eor	r1, r1
     d20:	0f 93       	push	r16
     d22:	1f 93       	push	r17
     d24:	2f 93       	push	r18
     d26:	3f 93       	push	r19
     d28:	4f 93       	push	r20
     d2a:	5f 93       	push	r21
     d2c:	6f 93       	push	r22
     d2e:	7f 93       	push	r23
     d30:	8f 93       	push	r24
     d32:	9f 93       	push	r25
     d34:	af 93       	push	r26
     d36:	bf 93       	push	r27
     d38:	ef 93       	push	r30
     d3a:	ff 93       	push	r31
     d3c:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <overflows>
     d40:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <overflows+0x1>
     d44:	ac 01       	movw	r20, r24
     d46:	09 2e       	mov	r0, r25
     d48:	00 0c       	add	r0, r0
     d4a:	66 0b       	sbc	r22, r22
     d4c:	77 0b       	sbc	r23, r23
     d4e:	9a 01       	movw	r18, r20
     d50:	11 27       	eor	r17, r17
     d52:	00 27       	eor	r16, r16
     d54:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d58:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	40 2b       	or	r20, r16
     d62:	51 2b       	or	r21, r17
     d64:	62 2b       	or	r22, r18
     d66:	73 2b       	or	r23, r19
     d68:	40 93 78 01 	sts	0x0178, r20	; 0x800178 <timestamp>
     d6c:	50 93 79 01 	sts	0x0179, r21	; 0x800179 <timestamp+0x1>
     d70:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <timestamp+0x2>
     d74:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <timestamp+0x3>
     d78:	b0 9b       	sbis	0x16, 0	; 22
     d7a:	1a c0       	rjmp	.+52     	; 0xdb0 <__vector_2+0x9a>
     d7c:	01 96       	adiw	r24, 0x01	; 1
     d7e:	09 2e       	mov	r0, r25
     d80:	00 0c       	add	r0, r0
     d82:	aa 0b       	sbc	r26, r26
     d84:	bb 0b       	sbc	r27, r27
     d86:	bc 01       	movw	r22, r24
     d88:	55 27       	eor	r21, r21
     d8a:	44 27       	eor	r20, r20
     d8c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d90:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d94:	a0 e0       	ldi	r26, 0x00	; 0
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	84 2b       	or	r24, r20
     d9a:	95 2b       	or	r25, r21
     d9c:	a6 2b       	or	r26, r22
     d9e:	b7 2b       	or	r27, r23
     da0:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <timestamp>
     da4:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <timestamp+0x1>
     da8:	a0 93 7a 01 	sts	0x017A, r26	; 0x80017a <timestamp+0x2>
     dac:	b0 93 7b 01 	sts	0x017B, r27	; 0x80017b <timestamp+0x3>
     db0:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <mtable+0x2>
     db4:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <mtable+0x3>
     db8:	30 97       	sbiw	r30, 0x00	; 0
     dba:	39 f0       	breq	.+14     	; 0xdca <__vector_2+0xb4>
     dbc:	61 e0       	ldi	r22, 0x01	; 1
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <otable+0x2>
     dc4:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <otable+0x3>
     dc8:	09 95       	icall
     dca:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <schedule>
     dce:	ff 91       	pop	r31
     dd0:	ef 91       	pop	r30
     dd2:	bf 91       	pop	r27
     dd4:	af 91       	pop	r26
     dd6:	9f 91       	pop	r25
     dd8:	8f 91       	pop	r24
     dda:	7f 91       	pop	r23
     ddc:	6f 91       	pop	r22
     dde:	5f 91       	pop	r21
     de0:	4f 91       	pop	r20
     de2:	3f 91       	pop	r19
     de4:	2f 91       	pop	r18
     de6:	1f 91       	pop	r17
     de8:	0f 91       	pop	r16
     dea:	0f 90       	pop	r0
     dec:	0f be       	out	0x3f, r0	; 63
     dee:	0f 90       	pop	r0
     df0:	1f 90       	pop	r1
     df2:	18 95       	reti

00000df4 <__vector_3>:
     df4:	1f 92       	push	r1
     df6:	0f 92       	push	r0
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	0f 92       	push	r0
     dfc:	11 24       	eor	r1, r1
     dfe:	0f 93       	push	r16
     e00:	1f 93       	push	r17
     e02:	2f 93       	push	r18
     e04:	3f 93       	push	r19
     e06:	4f 93       	push	r20
     e08:	5f 93       	push	r21
     e0a:	6f 93       	push	r22
     e0c:	7f 93       	push	r23
     e0e:	8f 93       	push	r24
     e10:	9f 93       	push	r25
     e12:	af 93       	push	r26
     e14:	bf 93       	push	r27
     e16:	ef 93       	push	r30
     e18:	ff 93       	push	r31
     e1a:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <overflows>
     e1e:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <overflows+0x1>
     e22:	ac 01       	movw	r20, r24
     e24:	09 2e       	mov	r0, r25
     e26:	00 0c       	add	r0, r0
     e28:	66 0b       	sbc	r22, r22
     e2a:	77 0b       	sbc	r23, r23
     e2c:	9a 01       	movw	r18, r20
     e2e:	11 27       	eor	r17, r17
     e30:	00 27       	eor	r16, r16
     e32:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e36:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	40 2b       	or	r20, r16
     e40:	51 2b       	or	r21, r17
     e42:	62 2b       	or	r22, r18
     e44:	73 2b       	or	r23, r19
     e46:	40 93 78 01 	sts	0x0178, r20	; 0x800178 <timestamp>
     e4a:	50 93 79 01 	sts	0x0179, r21	; 0x800179 <timestamp+0x1>
     e4e:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <timestamp+0x2>
     e52:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <timestamp+0x3>
     e56:	b0 9b       	sbis	0x16, 0	; 22
     e58:	1a c0       	rjmp	.+52     	; 0xe8e <__vector_3+0x9a>
     e5a:	01 96       	adiw	r24, 0x01	; 1
     e5c:	09 2e       	mov	r0, r25
     e5e:	00 0c       	add	r0, r0
     e60:	aa 0b       	sbc	r26, r26
     e62:	bb 0b       	sbc	r27, r27
     e64:	bc 01       	movw	r22, r24
     e66:	55 27       	eor	r21, r21
     e68:	44 27       	eor	r20, r20
     e6a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e6e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e72:	a0 e0       	ldi	r26, 0x00	; 0
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	84 2b       	or	r24, r20
     e78:	95 2b       	or	r25, r21
     e7a:	a6 2b       	or	r26, r22
     e7c:	b7 2b       	or	r27, r23
     e7e:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <timestamp>
     e82:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <timestamp+0x1>
     e86:	a0 93 7a 01 	sts	0x017A, r26	; 0x80017a <timestamp+0x2>
     e8a:	b0 93 7b 01 	sts	0x017B, r27	; 0x80017b <timestamp+0x3>
     e8e:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <mtable+0x4>
     e92:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <mtable+0x5>
     e96:	30 97       	sbiw	r30, 0x00	; 0
     e98:	39 f0       	breq	.+14     	; 0xea8 <__vector_3+0xb4>
     e9a:	62 e0       	ldi	r22, 0x02	; 2
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <otable+0x4>
     ea2:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <otable+0x5>
     ea6:	09 95       	icall
     ea8:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <schedule>
     eac:	ff 91       	pop	r31
     eae:	ef 91       	pop	r30
     eb0:	bf 91       	pop	r27
     eb2:	af 91       	pop	r26
     eb4:	9f 91       	pop	r25
     eb6:	8f 91       	pop	r24
     eb8:	7f 91       	pop	r23
     eba:	6f 91       	pop	r22
     ebc:	5f 91       	pop	r21
     ebe:	4f 91       	pop	r20
     ec0:	3f 91       	pop	r19
     ec2:	2f 91       	pop	r18
     ec4:	1f 91       	pop	r17
     ec6:	0f 91       	pop	r16
     ec8:	0f 90       	pop	r0
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	0f 90       	pop	r0
     ece:	1f 90       	pop	r1
     ed0:	18 95       	reti

00000ed2 <__vector_4>:
     ed2:	1f 92       	push	r1
     ed4:	0f 92       	push	r0
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	0f 92       	push	r0
     eda:	11 24       	eor	r1, r1
     edc:	0f 93       	push	r16
     ede:	1f 93       	push	r17
     ee0:	2f 93       	push	r18
     ee2:	3f 93       	push	r19
     ee4:	4f 93       	push	r20
     ee6:	5f 93       	push	r21
     ee8:	6f 93       	push	r22
     eea:	7f 93       	push	r23
     eec:	8f 93       	push	r24
     eee:	9f 93       	push	r25
     ef0:	af 93       	push	r26
     ef2:	bf 93       	push	r27
     ef4:	ef 93       	push	r30
     ef6:	ff 93       	push	r31
     ef8:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <overflows>
     efc:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <overflows+0x1>
     f00:	ac 01       	movw	r20, r24
     f02:	09 2e       	mov	r0, r25
     f04:	00 0c       	add	r0, r0
     f06:	66 0b       	sbc	r22, r22
     f08:	77 0b       	sbc	r23, r23
     f0a:	9a 01       	movw	r18, r20
     f0c:	11 27       	eor	r17, r17
     f0e:	00 27       	eor	r16, r16
     f10:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f14:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f18:	60 e0       	ldi	r22, 0x00	; 0
     f1a:	70 e0       	ldi	r23, 0x00	; 0
     f1c:	40 2b       	or	r20, r16
     f1e:	51 2b       	or	r21, r17
     f20:	62 2b       	or	r22, r18
     f22:	73 2b       	or	r23, r19
     f24:	40 93 78 01 	sts	0x0178, r20	; 0x800178 <timestamp>
     f28:	50 93 79 01 	sts	0x0179, r21	; 0x800179 <timestamp+0x1>
     f2c:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <timestamp+0x2>
     f30:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <timestamp+0x3>
     f34:	b0 9b       	sbis	0x16, 0	; 22
     f36:	1a c0       	rjmp	.+52     	; 0xf6c <__vector_4+0x9a>
     f38:	01 96       	adiw	r24, 0x01	; 1
     f3a:	09 2e       	mov	r0, r25
     f3c:	00 0c       	add	r0, r0
     f3e:	aa 0b       	sbc	r26, r26
     f40:	bb 0b       	sbc	r27, r27
     f42:	bc 01       	movw	r22, r24
     f44:	55 27       	eor	r21, r21
     f46:	44 27       	eor	r20, r20
     f48:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f4c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f50:	a0 e0       	ldi	r26, 0x00	; 0
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	84 2b       	or	r24, r20
     f56:	95 2b       	or	r25, r21
     f58:	a6 2b       	or	r26, r22
     f5a:	b7 2b       	or	r27, r23
     f5c:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <timestamp>
     f60:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <timestamp+0x1>
     f64:	a0 93 7a 01 	sts	0x017A, r26	; 0x80017a <timestamp+0x2>
     f68:	b0 93 7b 01 	sts	0x017B, r27	; 0x80017b <timestamp+0x3>
     f6c:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <mtable+0x6>
     f70:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <mtable+0x7>
     f74:	30 97       	sbiw	r30, 0x00	; 0
     f76:	39 f0       	breq	.+14     	; 0xf86 <__vector_4+0xb4>
     f78:	63 e0       	ldi	r22, 0x03	; 3
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <otable+0x6>
     f80:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <otable+0x7>
     f84:	09 95       	icall
     f86:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <schedule>
     f8a:	ff 91       	pop	r31
     f8c:	ef 91       	pop	r30
     f8e:	bf 91       	pop	r27
     f90:	af 91       	pop	r26
     f92:	9f 91       	pop	r25
     f94:	8f 91       	pop	r24
     f96:	7f 91       	pop	r23
     f98:	6f 91       	pop	r22
     f9a:	5f 91       	pop	r21
     f9c:	4f 91       	pop	r20
     f9e:	3f 91       	pop	r19
     fa0:	2f 91       	pop	r18
     fa2:	1f 91       	pop	r17
     fa4:	0f 91       	pop	r16
     fa6:	0f 90       	pop	r0
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	0f 90       	pop	r0
     fac:	1f 90       	pop	r1
     fae:	18 95       	reti

00000fb0 <__vector_5>:
     fb0:	1f 92       	push	r1
     fb2:	0f 92       	push	r0
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	0f 92       	push	r0
     fb8:	11 24       	eor	r1, r1
     fba:	0f 93       	push	r16
     fbc:	1f 93       	push	r17
     fbe:	2f 93       	push	r18
     fc0:	3f 93       	push	r19
     fc2:	4f 93       	push	r20
     fc4:	5f 93       	push	r21
     fc6:	6f 93       	push	r22
     fc8:	7f 93       	push	r23
     fca:	8f 93       	push	r24
     fcc:	9f 93       	push	r25
     fce:	af 93       	push	r26
     fd0:	bf 93       	push	r27
     fd2:	ef 93       	push	r30
     fd4:	ff 93       	push	r31
     fd6:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <overflows>
     fda:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <overflows+0x1>
     fde:	ac 01       	movw	r20, r24
     fe0:	09 2e       	mov	r0, r25
     fe2:	00 0c       	add	r0, r0
     fe4:	66 0b       	sbc	r22, r22
     fe6:	77 0b       	sbc	r23, r23
     fe8:	9a 01       	movw	r18, r20
     fea:	11 27       	eor	r17, r17
     fec:	00 27       	eor	r16, r16
     fee:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ff2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	70 e0       	ldi	r23, 0x00	; 0
     ffa:	40 2b       	or	r20, r16
     ffc:	51 2b       	or	r21, r17
     ffe:	62 2b       	or	r22, r18
    1000:	73 2b       	or	r23, r19
    1002:	40 93 78 01 	sts	0x0178, r20	; 0x800178 <timestamp>
    1006:	50 93 79 01 	sts	0x0179, r21	; 0x800179 <timestamp+0x1>
    100a:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <timestamp+0x2>
    100e:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <timestamp+0x3>
    1012:	b0 9b       	sbis	0x16, 0	; 22
    1014:	1a c0       	rjmp	.+52     	; 0x104a <__vector_5+0x9a>
    1016:	01 96       	adiw	r24, 0x01	; 1
    1018:	09 2e       	mov	r0, r25
    101a:	00 0c       	add	r0, r0
    101c:	aa 0b       	sbc	r26, r26
    101e:	bb 0b       	sbc	r27, r27
    1020:	bc 01       	movw	r22, r24
    1022:	55 27       	eor	r21, r21
    1024:	44 27       	eor	r20, r20
    1026:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    102a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    102e:	a0 e0       	ldi	r26, 0x00	; 0
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	84 2b       	or	r24, r20
    1034:	95 2b       	or	r25, r21
    1036:	a6 2b       	or	r26, r22
    1038:	b7 2b       	or	r27, r23
    103a:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <timestamp>
    103e:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <timestamp+0x1>
    1042:	a0 93 7a 01 	sts	0x017A, r26	; 0x80017a <timestamp+0x2>
    1046:	b0 93 7b 01 	sts	0x017B, r27	; 0x80017b <timestamp+0x3>
    104a:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <mtable+0x8>
    104e:	f0 91 21 02 	lds	r31, 0x0221	; 0x800221 <mtable+0x9>
    1052:	30 97       	sbiw	r30, 0x00	; 0
    1054:	39 f0       	breq	.+14     	; 0x1064 <__vector_5+0xb4>
    1056:	64 e0       	ldi	r22, 0x04	; 4
    1058:	70 e0       	ldi	r23, 0x00	; 0
    105a:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <otable+0x8>
    105e:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <otable+0x9>
    1062:	09 95       	icall
    1064:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <schedule>
    1068:	ff 91       	pop	r31
    106a:	ef 91       	pop	r30
    106c:	bf 91       	pop	r27
    106e:	af 91       	pop	r26
    1070:	9f 91       	pop	r25
    1072:	8f 91       	pop	r24
    1074:	7f 91       	pop	r23
    1076:	6f 91       	pop	r22
    1078:	5f 91       	pop	r21
    107a:	4f 91       	pop	r20
    107c:	3f 91       	pop	r19
    107e:	2f 91       	pop	r18
    1080:	1f 91       	pop	r17
    1082:	0f 91       	pop	r16
    1084:	0f 90       	pop	r0
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	0f 90       	pop	r0
    108a:	1f 90       	pop	r1
    108c:	18 95       	reti

0000108e <__vector_10>:
    108e:	1f 92       	push	r1
    1090:	0f 92       	push	r0
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	0f 92       	push	r0
    1096:	11 24       	eor	r1, r1
    1098:	0f 93       	push	r16
    109a:	1f 93       	push	r17
    109c:	2f 93       	push	r18
    109e:	3f 93       	push	r19
    10a0:	4f 93       	push	r20
    10a2:	5f 93       	push	r21
    10a4:	6f 93       	push	r22
    10a6:	7f 93       	push	r23
    10a8:	8f 93       	push	r24
    10aa:	9f 93       	push	r25
    10ac:	af 93       	push	r26
    10ae:	bf 93       	push	r27
    10b0:	ef 93       	push	r30
    10b2:	ff 93       	push	r31
    10b4:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <overflows>
    10b8:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <overflows+0x1>
    10bc:	ac 01       	movw	r20, r24
    10be:	09 2e       	mov	r0, r25
    10c0:	00 0c       	add	r0, r0
    10c2:	66 0b       	sbc	r22, r22
    10c4:	77 0b       	sbc	r23, r23
    10c6:	9a 01       	movw	r18, r20
    10c8:	11 27       	eor	r17, r17
    10ca:	00 27       	eor	r16, r16
    10cc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10d0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	70 e0       	ldi	r23, 0x00	; 0
    10d8:	40 2b       	or	r20, r16
    10da:	51 2b       	or	r21, r17
    10dc:	62 2b       	or	r22, r18
    10de:	73 2b       	or	r23, r19
    10e0:	40 93 78 01 	sts	0x0178, r20	; 0x800178 <timestamp>
    10e4:	50 93 79 01 	sts	0x0179, r21	; 0x800179 <timestamp+0x1>
    10e8:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <timestamp+0x2>
    10ec:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <timestamp+0x3>
    10f0:	b0 9b       	sbis	0x16, 0	; 22
    10f2:	1a c0       	rjmp	.+52     	; 0x1128 <__vector_10+0x9a>
    10f4:	01 96       	adiw	r24, 0x01	; 1
    10f6:	09 2e       	mov	r0, r25
    10f8:	00 0c       	add	r0, r0
    10fa:	aa 0b       	sbc	r26, r26
    10fc:	bb 0b       	sbc	r27, r27
    10fe:	bc 01       	movw	r22, r24
    1100:	55 27       	eor	r21, r21
    1102:	44 27       	eor	r20, r20
    1104:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1108:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    110c:	a0 e0       	ldi	r26, 0x00	; 0
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	84 2b       	or	r24, r20
    1112:	95 2b       	or	r25, r21
    1114:	a6 2b       	or	r26, r22
    1116:	b7 2b       	or	r27, r23
    1118:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <timestamp>
    111c:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <timestamp+0x1>
    1120:	a0 93 7a 01 	sts	0x017A, r26	; 0x80017a <timestamp+0x2>
    1124:	b0 93 7b 01 	sts	0x017B, r27	; 0x80017b <timestamp+0x3>
    1128:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <mtable+0xa>
    112c:	f0 91 23 02 	lds	r31, 0x0223	; 0x800223 <mtable+0xb>
    1130:	30 97       	sbiw	r30, 0x00	; 0
    1132:	39 f0       	breq	.+14     	; 0x1142 <__vector_10+0xb4>
    1134:	65 e0       	ldi	r22, 0x05	; 5
    1136:	70 e0       	ldi	r23, 0x00	; 0
    1138:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <otable+0xa>
    113c:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <otable+0xb>
    1140:	09 95       	icall
    1142:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <schedule>
    1146:	ff 91       	pop	r31
    1148:	ef 91       	pop	r30
    114a:	bf 91       	pop	r27
    114c:	af 91       	pop	r26
    114e:	9f 91       	pop	r25
    1150:	8f 91       	pop	r24
    1152:	7f 91       	pop	r23
    1154:	6f 91       	pop	r22
    1156:	5f 91       	pop	r21
    1158:	4f 91       	pop	r20
    115a:	3f 91       	pop	r19
    115c:	2f 91       	pop	r18
    115e:	1f 91       	pop	r17
    1160:	0f 91       	pop	r16
    1162:	0f 90       	pop	r0
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	0f 90       	pop	r0
    1168:	1f 90       	pop	r1
    116a:	18 95       	reti

0000116c <__vector_11>:
    116c:	1f 92       	push	r1
    116e:	0f 92       	push	r0
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	0f 92       	push	r0
    1174:	11 24       	eor	r1, r1
    1176:	0f 93       	push	r16
    1178:	1f 93       	push	r17
    117a:	2f 93       	push	r18
    117c:	3f 93       	push	r19
    117e:	4f 93       	push	r20
    1180:	5f 93       	push	r21
    1182:	6f 93       	push	r22
    1184:	7f 93       	push	r23
    1186:	8f 93       	push	r24
    1188:	9f 93       	push	r25
    118a:	af 93       	push	r26
    118c:	bf 93       	push	r27
    118e:	ef 93       	push	r30
    1190:	ff 93       	push	r31
    1192:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <overflows>
    1196:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <overflows+0x1>
    119a:	ac 01       	movw	r20, r24
    119c:	09 2e       	mov	r0, r25
    119e:	00 0c       	add	r0, r0
    11a0:	66 0b       	sbc	r22, r22
    11a2:	77 0b       	sbc	r23, r23
    11a4:	9a 01       	movw	r18, r20
    11a6:	11 27       	eor	r17, r17
    11a8:	00 27       	eor	r16, r16
    11aa:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11ae:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11b2:	60 e0       	ldi	r22, 0x00	; 0
    11b4:	70 e0       	ldi	r23, 0x00	; 0
    11b6:	40 2b       	or	r20, r16
    11b8:	51 2b       	or	r21, r17
    11ba:	62 2b       	or	r22, r18
    11bc:	73 2b       	or	r23, r19
    11be:	40 93 78 01 	sts	0x0178, r20	; 0x800178 <timestamp>
    11c2:	50 93 79 01 	sts	0x0179, r21	; 0x800179 <timestamp+0x1>
    11c6:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <timestamp+0x2>
    11ca:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <timestamp+0x3>
    11ce:	b0 9b       	sbis	0x16, 0	; 22
    11d0:	1a c0       	rjmp	.+52     	; 0x1206 <__vector_11+0x9a>
    11d2:	01 96       	adiw	r24, 0x01	; 1
    11d4:	09 2e       	mov	r0, r25
    11d6:	00 0c       	add	r0, r0
    11d8:	aa 0b       	sbc	r26, r26
    11da:	bb 0b       	sbc	r27, r27
    11dc:	bc 01       	movw	r22, r24
    11de:	55 27       	eor	r21, r21
    11e0:	44 27       	eor	r20, r20
    11e2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11e6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11ea:	a0 e0       	ldi	r26, 0x00	; 0
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	84 2b       	or	r24, r20
    11f0:	95 2b       	or	r25, r21
    11f2:	a6 2b       	or	r26, r22
    11f4:	b7 2b       	or	r27, r23
    11f6:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <timestamp>
    11fa:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <timestamp+0x1>
    11fe:	a0 93 7a 01 	sts	0x017A, r26	; 0x80017a <timestamp+0x2>
    1202:	b0 93 7b 01 	sts	0x017B, r27	; 0x80017b <timestamp+0x3>
    1206:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <mtable+0xc>
    120a:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <mtable+0xd>
    120e:	30 97       	sbiw	r30, 0x00	; 0
    1210:	39 f0       	breq	.+14     	; 0x1220 <__vector_11+0xb4>
    1212:	66 e0       	ldi	r22, 0x06	; 6
    1214:	70 e0       	ldi	r23, 0x00	; 0
    1216:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <otable+0xc>
    121a:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <otable+0xd>
    121e:	09 95       	icall
    1220:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <schedule>
    1224:	ff 91       	pop	r31
    1226:	ef 91       	pop	r30
    1228:	bf 91       	pop	r27
    122a:	af 91       	pop	r26
    122c:	9f 91       	pop	r25
    122e:	8f 91       	pop	r24
    1230:	7f 91       	pop	r23
    1232:	6f 91       	pop	r22
    1234:	5f 91       	pop	r21
    1236:	4f 91       	pop	r20
    1238:	3f 91       	pop	r19
    123a:	2f 91       	pop	r18
    123c:	1f 91       	pop	r17
    123e:	0f 91       	pop	r16
    1240:	0f 90       	pop	r0
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	0f 90       	pop	r0
    1246:	1f 90       	pop	r1
    1248:	18 95       	reti

0000124a <__vector_12>:
    124a:	1f 92       	push	r1
    124c:	0f 92       	push	r0
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	0f 92       	push	r0
    1252:	11 24       	eor	r1, r1
    1254:	0f 93       	push	r16
    1256:	1f 93       	push	r17
    1258:	2f 93       	push	r18
    125a:	3f 93       	push	r19
    125c:	4f 93       	push	r20
    125e:	5f 93       	push	r21
    1260:	6f 93       	push	r22
    1262:	7f 93       	push	r23
    1264:	8f 93       	push	r24
    1266:	9f 93       	push	r25
    1268:	af 93       	push	r26
    126a:	bf 93       	push	r27
    126c:	ef 93       	push	r30
    126e:	ff 93       	push	r31
    1270:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <overflows>
    1274:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <overflows+0x1>
    1278:	ac 01       	movw	r20, r24
    127a:	09 2e       	mov	r0, r25
    127c:	00 0c       	add	r0, r0
    127e:	66 0b       	sbc	r22, r22
    1280:	77 0b       	sbc	r23, r23
    1282:	9a 01       	movw	r18, r20
    1284:	11 27       	eor	r17, r17
    1286:	00 27       	eor	r16, r16
    1288:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    128c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1290:	60 e0       	ldi	r22, 0x00	; 0
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	40 2b       	or	r20, r16
    1296:	51 2b       	or	r21, r17
    1298:	62 2b       	or	r22, r18
    129a:	73 2b       	or	r23, r19
    129c:	40 93 78 01 	sts	0x0178, r20	; 0x800178 <timestamp>
    12a0:	50 93 79 01 	sts	0x0179, r21	; 0x800179 <timestamp+0x1>
    12a4:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <timestamp+0x2>
    12a8:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <timestamp+0x3>
    12ac:	b0 9b       	sbis	0x16, 0	; 22
    12ae:	1a c0       	rjmp	.+52     	; 0x12e4 <__vector_12+0x9a>
    12b0:	01 96       	adiw	r24, 0x01	; 1
    12b2:	09 2e       	mov	r0, r25
    12b4:	00 0c       	add	r0, r0
    12b6:	aa 0b       	sbc	r26, r26
    12b8:	bb 0b       	sbc	r27, r27
    12ba:	bc 01       	movw	r22, r24
    12bc:	55 27       	eor	r21, r21
    12be:	44 27       	eor	r20, r20
    12c0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12c4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12c8:	a0 e0       	ldi	r26, 0x00	; 0
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	84 2b       	or	r24, r20
    12ce:	95 2b       	or	r25, r21
    12d0:	a6 2b       	or	r26, r22
    12d2:	b7 2b       	or	r27, r23
    12d4:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <timestamp>
    12d8:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <timestamp+0x1>
    12dc:	a0 93 7a 01 	sts	0x017A, r26	; 0x80017a <timestamp+0x2>
    12e0:	b0 93 7b 01 	sts	0x017B, r27	; 0x80017b <timestamp+0x3>
    12e4:	e0 91 26 02 	lds	r30, 0x0226	; 0x800226 <mtable+0xe>
    12e8:	f0 91 27 02 	lds	r31, 0x0227	; 0x800227 <mtable+0xf>
    12ec:	30 97       	sbiw	r30, 0x00	; 0
    12ee:	39 f0       	breq	.+14     	; 0x12fe <__vector_12+0xb4>
    12f0:	67 e0       	ldi	r22, 0x07	; 7
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <otable+0xe>
    12f8:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <otable+0xf>
    12fc:	09 95       	icall
    12fe:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <schedule>
    1302:	ff 91       	pop	r31
    1304:	ef 91       	pop	r30
    1306:	bf 91       	pop	r27
    1308:	af 91       	pop	r26
    130a:	9f 91       	pop	r25
    130c:	8f 91       	pop	r24
    130e:	7f 91       	pop	r23
    1310:	6f 91       	pop	r22
    1312:	5f 91       	pop	r21
    1314:	4f 91       	pop	r20
    1316:	3f 91       	pop	r19
    1318:	2f 91       	pop	r18
    131a:	1f 91       	pop	r17
    131c:	0f 91       	pop	r16
    131e:	0f 90       	pop	r0
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	0f 90       	pop	r0
    1324:	1f 90       	pop	r1
    1326:	18 95       	reti

00001328 <__vector_13>:
    1328:	1f 92       	push	r1
    132a:	0f 92       	push	r0
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	0f 92       	push	r0
    1330:	11 24       	eor	r1, r1
    1332:	0f 93       	push	r16
    1334:	1f 93       	push	r17
    1336:	2f 93       	push	r18
    1338:	3f 93       	push	r19
    133a:	4f 93       	push	r20
    133c:	5f 93       	push	r21
    133e:	6f 93       	push	r22
    1340:	7f 93       	push	r23
    1342:	8f 93       	push	r24
    1344:	9f 93       	push	r25
    1346:	af 93       	push	r26
    1348:	bf 93       	push	r27
    134a:	ef 93       	push	r30
    134c:	ff 93       	push	r31
    134e:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <overflows>
    1352:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <overflows+0x1>
    1356:	ac 01       	movw	r20, r24
    1358:	09 2e       	mov	r0, r25
    135a:	00 0c       	add	r0, r0
    135c:	66 0b       	sbc	r22, r22
    135e:	77 0b       	sbc	r23, r23
    1360:	9a 01       	movw	r18, r20
    1362:	11 27       	eor	r17, r17
    1364:	00 27       	eor	r16, r16
    1366:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    136a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    136e:	60 e0       	ldi	r22, 0x00	; 0
    1370:	70 e0       	ldi	r23, 0x00	; 0
    1372:	40 2b       	or	r20, r16
    1374:	51 2b       	or	r21, r17
    1376:	62 2b       	or	r22, r18
    1378:	73 2b       	or	r23, r19
    137a:	40 93 78 01 	sts	0x0178, r20	; 0x800178 <timestamp>
    137e:	50 93 79 01 	sts	0x0179, r21	; 0x800179 <timestamp+0x1>
    1382:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <timestamp+0x2>
    1386:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <timestamp+0x3>
    138a:	b0 9b       	sbis	0x16, 0	; 22
    138c:	1a c0       	rjmp	.+52     	; 0x13c2 <__vector_13+0x9a>
    138e:	01 96       	adiw	r24, 0x01	; 1
    1390:	09 2e       	mov	r0, r25
    1392:	00 0c       	add	r0, r0
    1394:	aa 0b       	sbc	r26, r26
    1396:	bb 0b       	sbc	r27, r27
    1398:	bc 01       	movw	r22, r24
    139a:	55 27       	eor	r21, r21
    139c:	44 27       	eor	r20, r20
    139e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13a2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13a6:	a0 e0       	ldi	r26, 0x00	; 0
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	84 2b       	or	r24, r20
    13ac:	95 2b       	or	r25, r21
    13ae:	a6 2b       	or	r26, r22
    13b0:	b7 2b       	or	r27, r23
    13b2:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <timestamp>
    13b6:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <timestamp+0x1>
    13ba:	a0 93 7a 01 	sts	0x017A, r26	; 0x80017a <timestamp+0x2>
    13be:	b0 93 7b 01 	sts	0x017B, r27	; 0x80017b <timestamp+0x3>
    13c2:	e0 91 28 02 	lds	r30, 0x0228	; 0x800228 <mtable+0x10>
    13c6:	f0 91 29 02 	lds	r31, 0x0229	; 0x800229 <mtable+0x11>
    13ca:	30 97       	sbiw	r30, 0x00	; 0
    13cc:	39 f0       	breq	.+14     	; 0x13dc <__vector_13+0xb4>
    13ce:	68 e0       	ldi	r22, 0x08	; 8
    13d0:	70 e0       	ldi	r23, 0x00	; 0
    13d2:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <otable+0x10>
    13d6:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <otable+0x11>
    13da:	09 95       	icall
    13dc:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <schedule>
    13e0:	ff 91       	pop	r31
    13e2:	ef 91       	pop	r30
    13e4:	bf 91       	pop	r27
    13e6:	af 91       	pop	r26
    13e8:	9f 91       	pop	r25
    13ea:	8f 91       	pop	r24
    13ec:	7f 91       	pop	r23
    13ee:	6f 91       	pop	r22
    13f0:	5f 91       	pop	r21
    13f2:	4f 91       	pop	r20
    13f4:	3f 91       	pop	r19
    13f6:	2f 91       	pop	r18
    13f8:	1f 91       	pop	r17
    13fa:	0f 91       	pop	r16
    13fc:	0f 90       	pop	r0
    13fe:	0f be       	out	0x3f, r0	; 63
    1400:	0f 90       	pop	r0
    1402:	1f 90       	pop	r1
    1404:	18 95       	reti

00001406 <__vector_14>:
    1406:	1f 92       	push	r1
    1408:	0f 92       	push	r0
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	0f 92       	push	r0
    140e:	11 24       	eor	r1, r1
    1410:	0f 93       	push	r16
    1412:	1f 93       	push	r17
    1414:	2f 93       	push	r18
    1416:	3f 93       	push	r19
    1418:	4f 93       	push	r20
    141a:	5f 93       	push	r21
    141c:	6f 93       	push	r22
    141e:	7f 93       	push	r23
    1420:	8f 93       	push	r24
    1422:	9f 93       	push	r25
    1424:	af 93       	push	r26
    1426:	bf 93       	push	r27
    1428:	ef 93       	push	r30
    142a:	ff 93       	push	r31
    142c:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <overflows>
    1430:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <overflows+0x1>
    1434:	ac 01       	movw	r20, r24
    1436:	09 2e       	mov	r0, r25
    1438:	00 0c       	add	r0, r0
    143a:	66 0b       	sbc	r22, r22
    143c:	77 0b       	sbc	r23, r23
    143e:	9a 01       	movw	r18, r20
    1440:	11 27       	eor	r17, r17
    1442:	00 27       	eor	r16, r16
    1444:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1448:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	70 e0       	ldi	r23, 0x00	; 0
    1450:	40 2b       	or	r20, r16
    1452:	51 2b       	or	r21, r17
    1454:	62 2b       	or	r22, r18
    1456:	73 2b       	or	r23, r19
    1458:	40 93 78 01 	sts	0x0178, r20	; 0x800178 <timestamp>
    145c:	50 93 79 01 	sts	0x0179, r21	; 0x800179 <timestamp+0x1>
    1460:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <timestamp+0x2>
    1464:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <timestamp+0x3>
    1468:	b0 9b       	sbis	0x16, 0	; 22
    146a:	1a c0       	rjmp	.+52     	; 0x14a0 <__vector_14+0x9a>
    146c:	01 96       	adiw	r24, 0x01	; 1
    146e:	09 2e       	mov	r0, r25
    1470:	00 0c       	add	r0, r0
    1472:	aa 0b       	sbc	r26, r26
    1474:	bb 0b       	sbc	r27, r27
    1476:	bc 01       	movw	r22, r24
    1478:	55 27       	eor	r21, r21
    147a:	44 27       	eor	r20, r20
    147c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1480:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1484:	a0 e0       	ldi	r26, 0x00	; 0
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	84 2b       	or	r24, r20
    148a:	95 2b       	or	r25, r21
    148c:	a6 2b       	or	r26, r22
    148e:	b7 2b       	or	r27, r23
    1490:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <timestamp>
    1494:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <timestamp+0x1>
    1498:	a0 93 7a 01 	sts	0x017A, r26	; 0x80017a <timestamp+0x2>
    149c:	b0 93 7b 01 	sts	0x017B, r27	; 0x80017b <timestamp+0x3>
    14a0:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <mtable+0x12>
    14a4:	f0 91 2b 02 	lds	r31, 0x022B	; 0x80022b <mtable+0x13>
    14a8:	30 97       	sbiw	r30, 0x00	; 0
    14aa:	39 f0       	breq	.+14     	; 0x14ba <__vector_14+0xb4>
    14ac:	69 e0       	ldi	r22, 0x09	; 9
    14ae:	70 e0       	ldi	r23, 0x00	; 0
    14b0:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <otable+0x12>
    14b4:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <otable+0x13>
    14b8:	09 95       	icall
    14ba:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <schedule>
    14be:	ff 91       	pop	r31
    14c0:	ef 91       	pop	r30
    14c2:	bf 91       	pop	r27
    14c4:	af 91       	pop	r26
    14c6:	9f 91       	pop	r25
    14c8:	8f 91       	pop	r24
    14ca:	7f 91       	pop	r23
    14cc:	6f 91       	pop	r22
    14ce:	5f 91       	pop	r21
    14d0:	4f 91       	pop	r20
    14d2:	3f 91       	pop	r19
    14d4:	2f 91       	pop	r18
    14d6:	1f 91       	pop	r17
    14d8:	0f 91       	pop	r16
    14da:	0f 90       	pop	r0
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	0f 90       	pop	r0
    14e0:	1f 90       	pop	r1
    14e2:	18 95       	reti

000014e4 <__vector_15>:
    14e4:	1f 92       	push	r1
    14e6:	0f 92       	push	r0
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	0f 92       	push	r0
    14ec:	11 24       	eor	r1, r1
    14ee:	0f 93       	push	r16
    14f0:	1f 93       	push	r17
    14f2:	2f 93       	push	r18
    14f4:	3f 93       	push	r19
    14f6:	4f 93       	push	r20
    14f8:	5f 93       	push	r21
    14fa:	6f 93       	push	r22
    14fc:	7f 93       	push	r23
    14fe:	8f 93       	push	r24
    1500:	9f 93       	push	r25
    1502:	af 93       	push	r26
    1504:	bf 93       	push	r27
    1506:	ef 93       	push	r30
    1508:	ff 93       	push	r31
    150a:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <overflows>
    150e:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <overflows+0x1>
    1512:	ac 01       	movw	r20, r24
    1514:	09 2e       	mov	r0, r25
    1516:	00 0c       	add	r0, r0
    1518:	66 0b       	sbc	r22, r22
    151a:	77 0b       	sbc	r23, r23
    151c:	9a 01       	movw	r18, r20
    151e:	11 27       	eor	r17, r17
    1520:	00 27       	eor	r16, r16
    1522:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1526:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    152a:	60 e0       	ldi	r22, 0x00	; 0
    152c:	70 e0       	ldi	r23, 0x00	; 0
    152e:	40 2b       	or	r20, r16
    1530:	51 2b       	or	r21, r17
    1532:	62 2b       	or	r22, r18
    1534:	73 2b       	or	r23, r19
    1536:	40 93 78 01 	sts	0x0178, r20	; 0x800178 <timestamp>
    153a:	50 93 79 01 	sts	0x0179, r21	; 0x800179 <timestamp+0x1>
    153e:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <timestamp+0x2>
    1542:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <timestamp+0x3>
    1546:	b0 9b       	sbis	0x16, 0	; 22
    1548:	1a c0       	rjmp	.+52     	; 0x157e <__vector_15+0x9a>
    154a:	01 96       	adiw	r24, 0x01	; 1
    154c:	09 2e       	mov	r0, r25
    154e:	00 0c       	add	r0, r0
    1550:	aa 0b       	sbc	r26, r26
    1552:	bb 0b       	sbc	r27, r27
    1554:	bc 01       	movw	r22, r24
    1556:	55 27       	eor	r21, r21
    1558:	44 27       	eor	r20, r20
    155a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    155e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1562:	a0 e0       	ldi	r26, 0x00	; 0
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	84 2b       	or	r24, r20
    1568:	95 2b       	or	r25, r21
    156a:	a6 2b       	or	r26, r22
    156c:	b7 2b       	or	r27, r23
    156e:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <timestamp>
    1572:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <timestamp+0x1>
    1576:	a0 93 7a 01 	sts	0x017A, r26	; 0x80017a <timestamp+0x2>
    157a:	b0 93 7b 01 	sts	0x017B, r27	; 0x80017b <timestamp+0x3>
    157e:	e0 91 2c 02 	lds	r30, 0x022C	; 0x80022c <mtable+0x14>
    1582:	f0 91 2d 02 	lds	r31, 0x022D	; 0x80022d <mtable+0x15>
    1586:	30 97       	sbiw	r30, 0x00	; 0
    1588:	39 f0       	breq	.+14     	; 0x1598 <__vector_15+0xb4>
    158a:	6a e0       	ldi	r22, 0x0A	; 10
    158c:	70 e0       	ldi	r23, 0x00	; 0
    158e:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <otable+0x14>
    1592:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <otable+0x15>
    1596:	09 95       	icall
    1598:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <schedule>
    159c:	ff 91       	pop	r31
    159e:	ef 91       	pop	r30
    15a0:	bf 91       	pop	r27
    15a2:	af 91       	pop	r26
    15a4:	9f 91       	pop	r25
    15a6:	8f 91       	pop	r24
    15a8:	7f 91       	pop	r23
    15aa:	6f 91       	pop	r22
    15ac:	5f 91       	pop	r21
    15ae:	4f 91       	pop	r20
    15b0:	3f 91       	pop	r19
    15b2:	2f 91       	pop	r18
    15b4:	1f 91       	pop	r17
    15b6:	0f 91       	pop	r16
    15b8:	0f 90       	pop	r0
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	0f 90       	pop	r0
    15be:	1f 90       	pop	r1
    15c0:	18 95       	reti

000015c2 <__vector_16>:
    15c2:	1f 92       	push	r1
    15c4:	0f 92       	push	r0
    15c6:	0f b6       	in	r0, 0x3f	; 63
    15c8:	0f 92       	push	r0
    15ca:	11 24       	eor	r1, r1
    15cc:	0f 93       	push	r16
    15ce:	1f 93       	push	r17
    15d0:	2f 93       	push	r18
    15d2:	3f 93       	push	r19
    15d4:	4f 93       	push	r20
    15d6:	5f 93       	push	r21
    15d8:	6f 93       	push	r22
    15da:	7f 93       	push	r23
    15dc:	8f 93       	push	r24
    15de:	9f 93       	push	r25
    15e0:	af 93       	push	r26
    15e2:	bf 93       	push	r27
    15e4:	ef 93       	push	r30
    15e6:	ff 93       	push	r31
    15e8:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <overflows>
    15ec:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <overflows+0x1>
    15f0:	ac 01       	movw	r20, r24
    15f2:	09 2e       	mov	r0, r25
    15f4:	00 0c       	add	r0, r0
    15f6:	66 0b       	sbc	r22, r22
    15f8:	77 0b       	sbc	r23, r23
    15fa:	9a 01       	movw	r18, r20
    15fc:	11 27       	eor	r17, r17
    15fe:	00 27       	eor	r16, r16
    1600:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1604:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1608:	60 e0       	ldi	r22, 0x00	; 0
    160a:	70 e0       	ldi	r23, 0x00	; 0
    160c:	40 2b       	or	r20, r16
    160e:	51 2b       	or	r21, r17
    1610:	62 2b       	or	r22, r18
    1612:	73 2b       	or	r23, r19
    1614:	40 93 78 01 	sts	0x0178, r20	; 0x800178 <timestamp>
    1618:	50 93 79 01 	sts	0x0179, r21	; 0x800179 <timestamp+0x1>
    161c:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <timestamp+0x2>
    1620:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <timestamp+0x3>
    1624:	b0 9b       	sbis	0x16, 0	; 22
    1626:	1a c0       	rjmp	.+52     	; 0x165c <__vector_16+0x9a>
    1628:	01 96       	adiw	r24, 0x01	; 1
    162a:	09 2e       	mov	r0, r25
    162c:	00 0c       	add	r0, r0
    162e:	aa 0b       	sbc	r26, r26
    1630:	bb 0b       	sbc	r27, r27
    1632:	bc 01       	movw	r22, r24
    1634:	55 27       	eor	r21, r21
    1636:	44 27       	eor	r20, r20
    1638:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    163c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1640:	a0 e0       	ldi	r26, 0x00	; 0
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	84 2b       	or	r24, r20
    1646:	95 2b       	or	r25, r21
    1648:	a6 2b       	or	r26, r22
    164a:	b7 2b       	or	r27, r23
    164c:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <timestamp>
    1650:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <timestamp+0x1>
    1654:	a0 93 7a 01 	sts	0x017A, r26	; 0x80017a <timestamp+0x2>
    1658:	b0 93 7b 01 	sts	0x017B, r27	; 0x80017b <timestamp+0x3>
    165c:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <mtable+0x16>
    1660:	f0 91 2f 02 	lds	r31, 0x022F	; 0x80022f <mtable+0x17>
    1664:	30 97       	sbiw	r30, 0x00	; 0
    1666:	39 f0       	breq	.+14     	; 0x1676 <__vector_16+0xb4>
    1668:	6b e0       	ldi	r22, 0x0B	; 11
    166a:	70 e0       	ldi	r23, 0x00	; 0
    166c:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <otable+0x16>
    1670:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <otable+0x17>
    1674:	09 95       	icall
    1676:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <schedule>
    167a:	ff 91       	pop	r31
    167c:	ef 91       	pop	r30
    167e:	bf 91       	pop	r27
    1680:	af 91       	pop	r26
    1682:	9f 91       	pop	r25
    1684:	8f 91       	pop	r24
    1686:	7f 91       	pop	r23
    1688:	6f 91       	pop	r22
    168a:	5f 91       	pop	r21
    168c:	4f 91       	pop	r20
    168e:	3f 91       	pop	r19
    1690:	2f 91       	pop	r18
    1692:	1f 91       	pop	r17
    1694:	0f 91       	pop	r16
    1696:	0f 90       	pop	r0
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	0f 90       	pop	r0
    169c:	1f 90       	pop	r1
    169e:	18 95       	reti

000016a0 <__vector_17>:
    16a0:	1f 92       	push	r1
    16a2:	0f 92       	push	r0
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	0f 92       	push	r0
    16a8:	11 24       	eor	r1, r1
    16aa:	0f 93       	push	r16
    16ac:	1f 93       	push	r17
    16ae:	2f 93       	push	r18
    16b0:	3f 93       	push	r19
    16b2:	4f 93       	push	r20
    16b4:	5f 93       	push	r21
    16b6:	6f 93       	push	r22
    16b8:	7f 93       	push	r23
    16ba:	8f 93       	push	r24
    16bc:	9f 93       	push	r25
    16be:	af 93       	push	r26
    16c0:	bf 93       	push	r27
    16c2:	ef 93       	push	r30
    16c4:	ff 93       	push	r31
    16c6:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <overflows>
    16ca:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <overflows+0x1>
    16ce:	ac 01       	movw	r20, r24
    16d0:	09 2e       	mov	r0, r25
    16d2:	00 0c       	add	r0, r0
    16d4:	66 0b       	sbc	r22, r22
    16d6:	77 0b       	sbc	r23, r23
    16d8:	9a 01       	movw	r18, r20
    16da:	11 27       	eor	r17, r17
    16dc:	00 27       	eor	r16, r16
    16de:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16e2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16e6:	60 e0       	ldi	r22, 0x00	; 0
    16e8:	70 e0       	ldi	r23, 0x00	; 0
    16ea:	40 2b       	or	r20, r16
    16ec:	51 2b       	or	r21, r17
    16ee:	62 2b       	or	r22, r18
    16f0:	73 2b       	or	r23, r19
    16f2:	40 93 78 01 	sts	0x0178, r20	; 0x800178 <timestamp>
    16f6:	50 93 79 01 	sts	0x0179, r21	; 0x800179 <timestamp+0x1>
    16fa:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <timestamp+0x2>
    16fe:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <timestamp+0x3>
    1702:	b0 9b       	sbis	0x16, 0	; 22
    1704:	1a c0       	rjmp	.+52     	; 0x173a <__vector_17+0x9a>
    1706:	01 96       	adiw	r24, 0x01	; 1
    1708:	09 2e       	mov	r0, r25
    170a:	00 0c       	add	r0, r0
    170c:	aa 0b       	sbc	r26, r26
    170e:	bb 0b       	sbc	r27, r27
    1710:	bc 01       	movw	r22, r24
    1712:	55 27       	eor	r21, r21
    1714:	44 27       	eor	r20, r20
    1716:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    171a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    171e:	a0 e0       	ldi	r26, 0x00	; 0
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	84 2b       	or	r24, r20
    1724:	95 2b       	or	r25, r21
    1726:	a6 2b       	or	r26, r22
    1728:	b7 2b       	or	r27, r23
    172a:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <timestamp>
    172e:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <timestamp+0x1>
    1732:	a0 93 7a 01 	sts	0x017A, r26	; 0x80017a <timestamp+0x2>
    1736:	b0 93 7b 01 	sts	0x017B, r27	; 0x80017b <timestamp+0x3>
    173a:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <mtable+0x18>
    173e:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <mtable+0x19>
    1742:	30 97       	sbiw	r30, 0x00	; 0
    1744:	39 f0       	breq	.+14     	; 0x1754 <__vector_17+0xb4>
    1746:	6c e0       	ldi	r22, 0x0C	; 12
    1748:	70 e0       	ldi	r23, 0x00	; 0
    174a:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <otable+0x18>
    174e:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <otable+0x19>
    1752:	09 95       	icall
    1754:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <schedule>
    1758:	ff 91       	pop	r31
    175a:	ef 91       	pop	r30
    175c:	bf 91       	pop	r27
    175e:	af 91       	pop	r26
    1760:	9f 91       	pop	r25
    1762:	8f 91       	pop	r24
    1764:	7f 91       	pop	r23
    1766:	6f 91       	pop	r22
    1768:	5f 91       	pop	r21
    176a:	4f 91       	pop	r20
    176c:	3f 91       	pop	r19
    176e:	2f 91       	pop	r18
    1770:	1f 91       	pop	r17
    1772:	0f 91       	pop	r16
    1774:	0f 90       	pop	r0
    1776:	0f be       	out	0x3f, r0	; 63
    1778:	0f 90       	pop	r0
    177a:	1f 90       	pop	r1
    177c:	18 95       	reti

0000177e <__vector_18>:
    177e:	1f 92       	push	r1
    1780:	0f 92       	push	r0
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	0f 92       	push	r0
    1786:	11 24       	eor	r1, r1
    1788:	0f 93       	push	r16
    178a:	1f 93       	push	r17
    178c:	2f 93       	push	r18
    178e:	3f 93       	push	r19
    1790:	4f 93       	push	r20
    1792:	5f 93       	push	r21
    1794:	6f 93       	push	r22
    1796:	7f 93       	push	r23
    1798:	8f 93       	push	r24
    179a:	9f 93       	push	r25
    179c:	af 93       	push	r26
    179e:	bf 93       	push	r27
    17a0:	ef 93       	push	r30
    17a2:	ff 93       	push	r31
    17a4:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <overflows>
    17a8:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <overflows+0x1>
    17ac:	ac 01       	movw	r20, r24
    17ae:	09 2e       	mov	r0, r25
    17b0:	00 0c       	add	r0, r0
    17b2:	66 0b       	sbc	r22, r22
    17b4:	77 0b       	sbc	r23, r23
    17b6:	9a 01       	movw	r18, r20
    17b8:	11 27       	eor	r17, r17
    17ba:	00 27       	eor	r16, r16
    17bc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17c0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17c4:	60 e0       	ldi	r22, 0x00	; 0
    17c6:	70 e0       	ldi	r23, 0x00	; 0
    17c8:	40 2b       	or	r20, r16
    17ca:	51 2b       	or	r21, r17
    17cc:	62 2b       	or	r22, r18
    17ce:	73 2b       	or	r23, r19
    17d0:	40 93 78 01 	sts	0x0178, r20	; 0x800178 <timestamp>
    17d4:	50 93 79 01 	sts	0x0179, r21	; 0x800179 <timestamp+0x1>
    17d8:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <timestamp+0x2>
    17dc:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <timestamp+0x3>
    17e0:	b0 9b       	sbis	0x16, 0	; 22
    17e2:	1a c0       	rjmp	.+52     	; 0x1818 <__vector_18+0x9a>
    17e4:	01 96       	adiw	r24, 0x01	; 1
    17e6:	09 2e       	mov	r0, r25
    17e8:	00 0c       	add	r0, r0
    17ea:	aa 0b       	sbc	r26, r26
    17ec:	bb 0b       	sbc	r27, r27
    17ee:	bc 01       	movw	r22, r24
    17f0:	55 27       	eor	r21, r21
    17f2:	44 27       	eor	r20, r20
    17f4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17f8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17fc:	a0 e0       	ldi	r26, 0x00	; 0
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	84 2b       	or	r24, r20
    1802:	95 2b       	or	r25, r21
    1804:	a6 2b       	or	r26, r22
    1806:	b7 2b       	or	r27, r23
    1808:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <timestamp>
    180c:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <timestamp+0x1>
    1810:	a0 93 7a 01 	sts	0x017A, r26	; 0x80017a <timestamp+0x2>
    1814:	b0 93 7b 01 	sts	0x017B, r27	; 0x80017b <timestamp+0x3>
    1818:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <mtable+0x1a>
    181c:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <mtable+0x1b>
    1820:	30 97       	sbiw	r30, 0x00	; 0
    1822:	39 f0       	breq	.+14     	; 0x1832 <__vector_18+0xb4>
    1824:	6d e0       	ldi	r22, 0x0D	; 13
    1826:	70 e0       	ldi	r23, 0x00	; 0
    1828:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <otable+0x1a>
    182c:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <otable+0x1b>
    1830:	09 95       	icall
    1832:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <schedule>
    1836:	ff 91       	pop	r31
    1838:	ef 91       	pop	r30
    183a:	bf 91       	pop	r27
    183c:	af 91       	pop	r26
    183e:	9f 91       	pop	r25
    1840:	8f 91       	pop	r24
    1842:	7f 91       	pop	r23
    1844:	6f 91       	pop	r22
    1846:	5f 91       	pop	r21
    1848:	4f 91       	pop	r20
    184a:	3f 91       	pop	r19
    184c:	2f 91       	pop	r18
    184e:	1f 91       	pop	r17
    1850:	0f 91       	pop	r16
    1852:	0f 90       	pop	r0
    1854:	0f be       	out	0x3f, r0	; 63
    1856:	0f 90       	pop	r0
    1858:	1f 90       	pop	r1
    185a:	18 95       	reti

0000185c <__vector_19>:
    185c:	1f 92       	push	r1
    185e:	0f 92       	push	r0
    1860:	0f b6       	in	r0, 0x3f	; 63
    1862:	0f 92       	push	r0
    1864:	11 24       	eor	r1, r1
    1866:	0f 93       	push	r16
    1868:	1f 93       	push	r17
    186a:	2f 93       	push	r18
    186c:	3f 93       	push	r19
    186e:	4f 93       	push	r20
    1870:	5f 93       	push	r21
    1872:	6f 93       	push	r22
    1874:	7f 93       	push	r23
    1876:	8f 93       	push	r24
    1878:	9f 93       	push	r25
    187a:	af 93       	push	r26
    187c:	bf 93       	push	r27
    187e:	ef 93       	push	r30
    1880:	ff 93       	push	r31
    1882:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <overflows>
    1886:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <overflows+0x1>
    188a:	ac 01       	movw	r20, r24
    188c:	09 2e       	mov	r0, r25
    188e:	00 0c       	add	r0, r0
    1890:	66 0b       	sbc	r22, r22
    1892:	77 0b       	sbc	r23, r23
    1894:	9a 01       	movw	r18, r20
    1896:	11 27       	eor	r17, r17
    1898:	00 27       	eor	r16, r16
    189a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    189e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18a2:	60 e0       	ldi	r22, 0x00	; 0
    18a4:	70 e0       	ldi	r23, 0x00	; 0
    18a6:	40 2b       	or	r20, r16
    18a8:	51 2b       	or	r21, r17
    18aa:	62 2b       	or	r22, r18
    18ac:	73 2b       	or	r23, r19
    18ae:	40 93 78 01 	sts	0x0178, r20	; 0x800178 <timestamp>
    18b2:	50 93 79 01 	sts	0x0179, r21	; 0x800179 <timestamp+0x1>
    18b6:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <timestamp+0x2>
    18ba:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <timestamp+0x3>
    18be:	b0 9b       	sbis	0x16, 0	; 22
    18c0:	1a c0       	rjmp	.+52     	; 0x18f6 <__vector_19+0x9a>
    18c2:	01 96       	adiw	r24, 0x01	; 1
    18c4:	09 2e       	mov	r0, r25
    18c6:	00 0c       	add	r0, r0
    18c8:	aa 0b       	sbc	r26, r26
    18ca:	bb 0b       	sbc	r27, r27
    18cc:	bc 01       	movw	r22, r24
    18ce:	55 27       	eor	r21, r21
    18d0:	44 27       	eor	r20, r20
    18d2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18d6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18da:	a0 e0       	ldi	r26, 0x00	; 0
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	84 2b       	or	r24, r20
    18e0:	95 2b       	or	r25, r21
    18e2:	a6 2b       	or	r26, r22
    18e4:	b7 2b       	or	r27, r23
    18e6:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <timestamp>
    18ea:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <timestamp+0x1>
    18ee:	a0 93 7a 01 	sts	0x017A, r26	; 0x80017a <timestamp+0x2>
    18f2:	b0 93 7b 01 	sts	0x017B, r27	; 0x80017b <timestamp+0x3>
    18f6:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <mtable+0x1c>
    18fa:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <mtable+0x1d>
    18fe:	30 97       	sbiw	r30, 0x00	; 0
    1900:	39 f0       	breq	.+14     	; 0x1910 <__vector_19+0xb4>
    1902:	6e e0       	ldi	r22, 0x0E	; 14
    1904:	70 e0       	ldi	r23, 0x00	; 0
    1906:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <otable+0x1c>
    190a:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <otable+0x1d>
    190e:	09 95       	icall
    1910:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <schedule>
    1914:	ff 91       	pop	r31
    1916:	ef 91       	pop	r30
    1918:	bf 91       	pop	r27
    191a:	af 91       	pop	r26
    191c:	9f 91       	pop	r25
    191e:	8f 91       	pop	r24
    1920:	7f 91       	pop	r23
    1922:	6f 91       	pop	r22
    1924:	5f 91       	pop	r21
    1926:	4f 91       	pop	r20
    1928:	3f 91       	pop	r19
    192a:	2f 91       	pop	r18
    192c:	1f 91       	pop	r17
    192e:	0f 91       	pop	r16
    1930:	0f 90       	pop	r0
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	0f 90       	pop	r0
    1936:	1f 90       	pop	r1
    1938:	18 95       	reti

0000193a <__vector_20>:
    193a:	1f 92       	push	r1
    193c:	0f 92       	push	r0
    193e:	0f b6       	in	r0, 0x3f	; 63
    1940:	0f 92       	push	r0
    1942:	11 24       	eor	r1, r1
    1944:	0f 93       	push	r16
    1946:	1f 93       	push	r17
    1948:	2f 93       	push	r18
    194a:	3f 93       	push	r19
    194c:	4f 93       	push	r20
    194e:	5f 93       	push	r21
    1950:	6f 93       	push	r22
    1952:	7f 93       	push	r23
    1954:	8f 93       	push	r24
    1956:	9f 93       	push	r25
    1958:	af 93       	push	r26
    195a:	bf 93       	push	r27
    195c:	ef 93       	push	r30
    195e:	ff 93       	push	r31
    1960:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <overflows>
    1964:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <overflows+0x1>
    1968:	ac 01       	movw	r20, r24
    196a:	09 2e       	mov	r0, r25
    196c:	00 0c       	add	r0, r0
    196e:	66 0b       	sbc	r22, r22
    1970:	77 0b       	sbc	r23, r23
    1972:	9a 01       	movw	r18, r20
    1974:	11 27       	eor	r17, r17
    1976:	00 27       	eor	r16, r16
    1978:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    197c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1980:	60 e0       	ldi	r22, 0x00	; 0
    1982:	70 e0       	ldi	r23, 0x00	; 0
    1984:	40 2b       	or	r20, r16
    1986:	51 2b       	or	r21, r17
    1988:	62 2b       	or	r22, r18
    198a:	73 2b       	or	r23, r19
    198c:	40 93 78 01 	sts	0x0178, r20	; 0x800178 <timestamp>
    1990:	50 93 79 01 	sts	0x0179, r21	; 0x800179 <timestamp+0x1>
    1994:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <timestamp+0x2>
    1998:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <timestamp+0x3>
    199c:	b0 9b       	sbis	0x16, 0	; 22
    199e:	1a c0       	rjmp	.+52     	; 0x19d4 <__vector_20+0x9a>
    19a0:	01 96       	adiw	r24, 0x01	; 1
    19a2:	09 2e       	mov	r0, r25
    19a4:	00 0c       	add	r0, r0
    19a6:	aa 0b       	sbc	r26, r26
    19a8:	bb 0b       	sbc	r27, r27
    19aa:	bc 01       	movw	r22, r24
    19ac:	55 27       	eor	r21, r21
    19ae:	44 27       	eor	r20, r20
    19b0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19b4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19b8:	a0 e0       	ldi	r26, 0x00	; 0
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	84 2b       	or	r24, r20
    19be:	95 2b       	or	r25, r21
    19c0:	a6 2b       	or	r26, r22
    19c2:	b7 2b       	or	r27, r23
    19c4:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <timestamp>
    19c8:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <timestamp+0x1>
    19cc:	a0 93 7a 01 	sts	0x017A, r26	; 0x80017a <timestamp+0x2>
    19d0:	b0 93 7b 01 	sts	0x017B, r27	; 0x80017b <timestamp+0x3>
    19d4:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <mtable+0x1e>
    19d8:	f0 91 37 02 	lds	r31, 0x0237	; 0x800237 <mtable+0x1f>
    19dc:	30 97       	sbiw	r30, 0x00	; 0
    19de:	39 f0       	breq	.+14     	; 0x19ee <__vector_20+0xb4>
    19e0:	6f e0       	ldi	r22, 0x0F	; 15
    19e2:	70 e0       	ldi	r23, 0x00	; 0
    19e4:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <otable+0x1e>
    19e8:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <otable+0x1f>
    19ec:	09 95       	icall
    19ee:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <schedule>
    19f2:	ff 91       	pop	r31
    19f4:	ef 91       	pop	r30
    19f6:	bf 91       	pop	r27
    19f8:	af 91       	pop	r26
    19fa:	9f 91       	pop	r25
    19fc:	8f 91       	pop	r24
    19fe:	7f 91       	pop	r23
    1a00:	6f 91       	pop	r22
    1a02:	5f 91       	pop	r21
    1a04:	4f 91       	pop	r20
    1a06:	3f 91       	pop	r19
    1a08:	2f 91       	pop	r18
    1a0a:	1f 91       	pop	r17
    1a0c:	0f 91       	pop	r16
    1a0e:	0f 90       	pop	r0
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	0f 90       	pop	r0
    1a14:	1f 90       	pop	r1
    1a16:	18 95       	reti

00001a18 <__vector_21>:
    1a18:	1f 92       	push	r1
    1a1a:	0f 92       	push	r0
    1a1c:	0f b6       	in	r0, 0x3f	; 63
    1a1e:	0f 92       	push	r0
    1a20:	11 24       	eor	r1, r1
    1a22:	0f 93       	push	r16
    1a24:	1f 93       	push	r17
    1a26:	2f 93       	push	r18
    1a28:	3f 93       	push	r19
    1a2a:	4f 93       	push	r20
    1a2c:	5f 93       	push	r21
    1a2e:	6f 93       	push	r22
    1a30:	7f 93       	push	r23
    1a32:	8f 93       	push	r24
    1a34:	9f 93       	push	r25
    1a36:	af 93       	push	r26
    1a38:	bf 93       	push	r27
    1a3a:	ef 93       	push	r30
    1a3c:	ff 93       	push	r31
    1a3e:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <overflows>
    1a42:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <overflows+0x1>
    1a46:	ac 01       	movw	r20, r24
    1a48:	09 2e       	mov	r0, r25
    1a4a:	00 0c       	add	r0, r0
    1a4c:	66 0b       	sbc	r22, r22
    1a4e:	77 0b       	sbc	r23, r23
    1a50:	9a 01       	movw	r18, r20
    1a52:	11 27       	eor	r17, r17
    1a54:	00 27       	eor	r16, r16
    1a56:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a5a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a5e:	60 e0       	ldi	r22, 0x00	; 0
    1a60:	70 e0       	ldi	r23, 0x00	; 0
    1a62:	40 2b       	or	r20, r16
    1a64:	51 2b       	or	r21, r17
    1a66:	62 2b       	or	r22, r18
    1a68:	73 2b       	or	r23, r19
    1a6a:	40 93 78 01 	sts	0x0178, r20	; 0x800178 <timestamp>
    1a6e:	50 93 79 01 	sts	0x0179, r21	; 0x800179 <timestamp+0x1>
    1a72:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <timestamp+0x2>
    1a76:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <timestamp+0x3>
    1a7a:	b0 9b       	sbis	0x16, 0	; 22
    1a7c:	1a c0       	rjmp	.+52     	; 0x1ab2 <__vector_21+0x9a>
    1a7e:	01 96       	adiw	r24, 0x01	; 1
    1a80:	09 2e       	mov	r0, r25
    1a82:	00 0c       	add	r0, r0
    1a84:	aa 0b       	sbc	r26, r26
    1a86:	bb 0b       	sbc	r27, r27
    1a88:	bc 01       	movw	r22, r24
    1a8a:	55 27       	eor	r21, r21
    1a8c:	44 27       	eor	r20, r20
    1a8e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a92:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a96:	a0 e0       	ldi	r26, 0x00	; 0
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
    1a9a:	84 2b       	or	r24, r20
    1a9c:	95 2b       	or	r25, r21
    1a9e:	a6 2b       	or	r26, r22
    1aa0:	b7 2b       	or	r27, r23
    1aa2:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <timestamp>
    1aa6:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <timestamp+0x1>
    1aaa:	a0 93 7a 01 	sts	0x017A, r26	; 0x80017a <timestamp+0x2>
    1aae:	b0 93 7b 01 	sts	0x017B, r27	; 0x80017b <timestamp+0x3>
    1ab2:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <mtable+0x20>
    1ab6:	f0 91 39 02 	lds	r31, 0x0239	; 0x800239 <mtable+0x21>
    1aba:	30 97       	sbiw	r30, 0x00	; 0
    1abc:	39 f0       	breq	.+14     	; 0x1acc <__vector_21+0xb4>
    1abe:	60 e1       	ldi	r22, 0x10	; 16
    1ac0:	70 e0       	ldi	r23, 0x00	; 0
    1ac2:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <otable+0x20>
    1ac6:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <otable+0x21>
    1aca:	09 95       	icall
    1acc:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <schedule>
    1ad0:	ff 91       	pop	r31
    1ad2:	ef 91       	pop	r30
    1ad4:	bf 91       	pop	r27
    1ad6:	af 91       	pop	r26
    1ad8:	9f 91       	pop	r25
    1ada:	8f 91       	pop	r24
    1adc:	7f 91       	pop	r23
    1ade:	6f 91       	pop	r22
    1ae0:	5f 91       	pop	r21
    1ae2:	4f 91       	pop	r20
    1ae4:	3f 91       	pop	r19
    1ae6:	2f 91       	pop	r18
    1ae8:	1f 91       	pop	r17
    1aea:	0f 91       	pop	r16
    1aec:	0f 90       	pop	r0
    1aee:	0f be       	out	0x3f, r0	; 63
    1af0:	0f 90       	pop	r0
    1af2:	1f 90       	pop	r1
    1af4:	18 95       	reti

00001af6 <__vector_22>:
    1af6:	1f 92       	push	r1
    1af8:	0f 92       	push	r0
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	0f 92       	push	r0
    1afe:	11 24       	eor	r1, r1
    1b00:	0f 93       	push	r16
    1b02:	1f 93       	push	r17
    1b04:	2f 93       	push	r18
    1b06:	3f 93       	push	r19
    1b08:	4f 93       	push	r20
    1b0a:	5f 93       	push	r21
    1b0c:	6f 93       	push	r22
    1b0e:	7f 93       	push	r23
    1b10:	8f 93       	push	r24
    1b12:	9f 93       	push	r25
    1b14:	af 93       	push	r26
    1b16:	bf 93       	push	r27
    1b18:	ef 93       	push	r30
    1b1a:	ff 93       	push	r31
    1b1c:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <overflows>
    1b20:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <overflows+0x1>
    1b24:	ac 01       	movw	r20, r24
    1b26:	09 2e       	mov	r0, r25
    1b28:	00 0c       	add	r0, r0
    1b2a:	66 0b       	sbc	r22, r22
    1b2c:	77 0b       	sbc	r23, r23
    1b2e:	9a 01       	movw	r18, r20
    1b30:	11 27       	eor	r17, r17
    1b32:	00 27       	eor	r16, r16
    1b34:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b38:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b3c:	60 e0       	ldi	r22, 0x00	; 0
    1b3e:	70 e0       	ldi	r23, 0x00	; 0
    1b40:	40 2b       	or	r20, r16
    1b42:	51 2b       	or	r21, r17
    1b44:	62 2b       	or	r22, r18
    1b46:	73 2b       	or	r23, r19
    1b48:	40 93 78 01 	sts	0x0178, r20	; 0x800178 <timestamp>
    1b4c:	50 93 79 01 	sts	0x0179, r21	; 0x800179 <timestamp+0x1>
    1b50:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <timestamp+0x2>
    1b54:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <timestamp+0x3>
    1b58:	b0 9b       	sbis	0x16, 0	; 22
    1b5a:	1a c0       	rjmp	.+52     	; 0x1b90 <__vector_22+0x9a>
    1b5c:	01 96       	adiw	r24, 0x01	; 1
    1b5e:	09 2e       	mov	r0, r25
    1b60:	00 0c       	add	r0, r0
    1b62:	aa 0b       	sbc	r26, r26
    1b64:	bb 0b       	sbc	r27, r27
    1b66:	bc 01       	movw	r22, r24
    1b68:	55 27       	eor	r21, r21
    1b6a:	44 27       	eor	r20, r20
    1b6c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b70:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b74:	a0 e0       	ldi	r26, 0x00	; 0
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	84 2b       	or	r24, r20
    1b7a:	95 2b       	or	r25, r21
    1b7c:	a6 2b       	or	r26, r22
    1b7e:	b7 2b       	or	r27, r23
    1b80:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <timestamp>
    1b84:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <timestamp+0x1>
    1b88:	a0 93 7a 01 	sts	0x017A, r26	; 0x80017a <timestamp+0x2>
    1b8c:	b0 93 7b 01 	sts	0x017B, r27	; 0x80017b <timestamp+0x3>
    1b90:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <mtable+0x22>
    1b94:	f0 91 3b 02 	lds	r31, 0x023B	; 0x80023b <mtable+0x23>
    1b98:	30 97       	sbiw	r30, 0x00	; 0
    1b9a:	39 f0       	breq	.+14     	; 0x1baa <__vector_22+0xb4>
    1b9c:	61 e1       	ldi	r22, 0x11	; 17
    1b9e:	70 e0       	ldi	r23, 0x00	; 0
    1ba0:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <otable+0x22>
    1ba4:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <otable+0x23>
    1ba8:	09 95       	icall
    1baa:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <schedule>
    1bae:	ff 91       	pop	r31
    1bb0:	ef 91       	pop	r30
    1bb2:	bf 91       	pop	r27
    1bb4:	af 91       	pop	r26
    1bb6:	9f 91       	pop	r25
    1bb8:	8f 91       	pop	r24
    1bba:	7f 91       	pop	r23
    1bbc:	6f 91       	pop	r22
    1bbe:	5f 91       	pop	r21
    1bc0:	4f 91       	pop	r20
    1bc2:	3f 91       	pop	r19
    1bc4:	2f 91       	pop	r18
    1bc6:	1f 91       	pop	r17
    1bc8:	0f 91       	pop	r16
    1bca:	0f 90       	pop	r0
    1bcc:	0f be       	out	0x3f, r0	; 63
    1bce:	0f 90       	pop	r0
    1bd0:	1f 90       	pop	r1
    1bd2:	18 95       	reti

00001bd4 <idle>:
    1bd4:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <schedule>
    1bd8:	78 94       	sei
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	83 bf       	out	0x33, r24	; 51
    1bde:	88 95       	sleep
    1be0:	fc cf       	rjmp	.-8      	; 0x1bda <idle+0x6>

00001be2 <__vector_9>:
    1be2:	1f 92       	push	r1
    1be4:	0f 92       	push	r0
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	0f 92       	push	r0
    1bea:	11 24       	eor	r1, r1
    1bec:	2f 93       	push	r18
    1bee:	3f 93       	push	r19
    1bf0:	4f 93       	push	r20
    1bf2:	5f 93       	push	r21
    1bf4:	6f 93       	push	r22
    1bf6:	7f 93       	push	r23
    1bf8:	8f 93       	push	r24
    1bfa:	9f 93       	push	r25
    1bfc:	ef 93       	push	r30
    1bfe:	ff 93       	push	r31
    1c00:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <overflows>
    1c04:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <overflows+0x1>
    1c08:	01 96       	adiw	r24, 0x01	; 1
    1c0a:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <overflows+0x1>
    1c0e:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <overflows>
    1c12:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <timerQ>
    1c16:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <timerQ+0x1>
    1c1a:	30 97       	sbiw	r30, 0x00	; 0
    1c1c:	01 f1       	breq	.+64     	; 0x1c5e <__vector_9+0x7c>
    1c1e:	42 81       	ldd	r20, Z+2	; 0x02
    1c20:	53 81       	ldd	r21, Z+3	; 0x03
    1c22:	64 81       	ldd	r22, Z+4	; 0x04
    1c24:	75 81       	ldd	r23, Z+5	; 0x05
    1c26:	86 17       	cp	r24, r22
    1c28:	97 07       	cpc	r25, r23
    1c2a:	c9 f4       	brne	.+50     	; 0x1c5e <__vector_9+0x7c>
    1c2c:	ca 01       	movw	r24, r20
    1c2e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c32:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c36:	42 1b       	sub	r20, r18
    1c38:	53 0b       	sbc	r21, r19
    1c3a:	41 30       	cpi	r20, 0x01	; 1
    1c3c:	51 05       	cpc	r21, r1
    1c3e:	29 f4       	brne	.+10     	; 0x1c4a <__vector_9+0x68>
    1c40:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c44:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c48:	01 96       	adiw	r24, 0x01	; 1
    1c4a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1c4e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1c52:	ef e6       	ldi	r30, 0x6F	; 111
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	82 60       	ori	r24, 0x02	; 2
    1c5a:	80 83       	st	Z, r24
    1c5c:	05 c0       	rjmp	.+10     	; 0x1c68 <__vector_9+0x86>
    1c5e:	ef e6       	ldi	r30, 0x6F	; 111
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	80 81       	ld	r24, Z
    1c64:	8d 7f       	andi	r24, 0xFD	; 253
    1c66:	80 83       	st	Z, r24
    1c68:	ff 91       	pop	r31
    1c6a:	ef 91       	pop	r30
    1c6c:	9f 91       	pop	r25
    1c6e:	8f 91       	pop	r24
    1c70:	7f 91       	pop	r23
    1c72:	6f 91       	pop	r22
    1c74:	5f 91       	pop	r21
    1c76:	4f 91       	pop	r20
    1c78:	3f 91       	pop	r19
    1c7a:	2f 91       	pop	r18
    1c7c:	0f 90       	pop	r0
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	0f 90       	pop	r0
    1c82:	1f 90       	pop	r1
    1c84:	18 95       	reti

00001c86 <__vector_7>:
    1c86:	1f 92       	push	r1
    1c88:	0f 92       	push	r0
    1c8a:	0f b6       	in	r0, 0x3f	; 63
    1c8c:	0f 92       	push	r0
    1c8e:	11 24       	eor	r1, r1
    1c90:	cf 92       	push	r12
    1c92:	df 92       	push	r13
    1c94:	ef 92       	push	r14
    1c96:	ff 92       	push	r15
    1c98:	2f 93       	push	r18
    1c9a:	3f 93       	push	r19
    1c9c:	4f 93       	push	r20
    1c9e:	5f 93       	push	r21
    1ca0:	6f 93       	push	r22
    1ca2:	7f 93       	push	r23
    1ca4:	8f 93       	push	r24
    1ca6:	9f 93       	push	r25
    1ca8:	af 93       	push	r26
    1caa:	bf 93       	push	r27
    1cac:	ef 93       	push	r30
    1cae:	ff 93       	push	r31
    1cb0:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <overflows>
    1cb4:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <overflows+0x1>
    1cb8:	6c 01       	movw	r12, r24
    1cba:	09 2e       	mov	r0, r25
    1cbc:	00 0c       	add	r0, r0
    1cbe:	ee 08       	sbc	r14, r14
    1cc0:	ff 08       	sbc	r15, r15
    1cc2:	76 01       	movw	r14, r12
    1cc4:	dd 24       	eor	r13, r13
    1cc6:	cc 24       	eor	r12, r12
    1cc8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ccc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1cd0:	60 e0       	ldi	r22, 0x00	; 0
    1cd2:	70 e0       	ldi	r23, 0x00	; 0
    1cd4:	c4 2a       	or	r12, r20
    1cd6:	d5 2a       	or	r13, r21
    1cd8:	e6 2a       	or	r14, r22
    1cda:	f7 2a       	or	r15, r23
    1cdc:	b0 9b       	sbis	0x16, 0	; 22
    1cde:	1e c0       	rjmp	.+60     	; 0x1d1c <__vector_7+0x96>
    1ce0:	6c 01       	movw	r12, r24
    1ce2:	2f ef       	ldi	r18, 0xFF	; 255
    1ce4:	c2 1a       	sub	r12, r18
    1ce6:	d2 0a       	sbc	r13, r18
    1ce8:	0d 2c       	mov	r0, r13
    1cea:	00 0c       	add	r0, r0
    1cec:	ee 08       	sbc	r14, r14
    1cee:	ff 08       	sbc	r15, r15
    1cf0:	d6 01       	movw	r26, r12
    1cf2:	99 27       	eor	r25, r25
    1cf4:	88 27       	eor	r24, r24
    1cf6:	c0 90 84 00 	lds	r12, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1cfa:	d0 90 85 00 	lds	r13, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1cfe:	e1 2c       	mov	r14, r1
    1d00:	f1 2c       	mov	r15, r1
    1d02:	c8 2a       	or	r12, r24
    1d04:	d9 2a       	or	r13, r25
    1d06:	ea 2a       	or	r14, r26
    1d08:	fb 2a       	or	r15, r27
    1d0a:	08 c0       	rjmp	.+16     	; 0x1d1c <__vector_7+0x96>
    1d0c:	8c e7       	ldi	r24, 0x7C	; 124
    1d0e:	91 e0       	ldi	r25, 0x01	; 1
    1d10:	0e 94 b3 05 	call	0xb66	; 0xb66 <dequeue>
    1d14:	6e e7       	ldi	r22, 0x7E	; 126
    1d16:	71 e0       	ldi	r23, 0x01	; 1
    1d18:	0e 94 51 05 	call	0xaa2	; 0xaa2 <enqueueByDeadline>
    1d1c:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <timerQ>
    1d20:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <timerQ+0x1>
    1d24:	30 97       	sbiw	r30, 0x00	; 0
    1d26:	69 f0       	breq	.+26     	; 0x1d42 <__vector_7+0xbc>
    1d28:	82 81       	ldd	r24, Z+2	; 0x02
    1d2a:	93 81       	ldd	r25, Z+3	; 0x03
    1d2c:	a4 81       	ldd	r26, Z+4	; 0x04
    1d2e:	b5 81       	ldd	r27, Z+5	; 0x05
    1d30:	8c 19       	sub	r24, r12
    1d32:	9d 09       	sbc	r25, r13
    1d34:	ae 09       	sbc	r26, r14
    1d36:	bf 09       	sbc	r27, r15
    1d38:	18 16       	cp	r1, r24
    1d3a:	19 06       	cpc	r1, r25
    1d3c:	1a 06       	cpc	r1, r26
    1d3e:	1b 06       	cpc	r1, r27
    1d40:	2c f7       	brge	.-54     	; 0x1d0c <__vector_7+0x86>
    1d42:	30 97       	sbiw	r30, 0x00	; 0
    1d44:	21 f1       	breq	.+72     	; 0x1d8e <__vector_7+0x108>
    1d46:	82 81       	ldd	r24, Z+2	; 0x02
    1d48:	93 81       	ldd	r25, Z+3	; 0x03
    1d4a:	a4 81       	ldd	r26, Z+4	; 0x04
    1d4c:	b5 81       	ldd	r27, Z+5	; 0x05
    1d4e:	20 91 76 01 	lds	r18, 0x0176	; 0x800176 <overflows>
    1d52:	30 91 77 01 	lds	r19, 0x0177	; 0x800177 <overflows+0x1>
    1d56:	2a 17       	cp	r18, r26
    1d58:	3b 07       	cpc	r19, r27
    1d5a:	c9 f4       	brne	.+50     	; 0x1d8e <__vector_7+0x108>
    1d5c:	9c 01       	movw	r18, r24
    1d5e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d62:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d66:	84 1b       	sub	r24, r20
    1d68:	95 0b       	sbc	r25, r21
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	31 f4       	brne	.+12     	; 0x1d7a <__vector_7+0xf4>
    1d6e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d72:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d76:	2f 5f       	subi	r18, 0xFF	; 255
    1d78:	3f 4f       	sbci	r19, 0xFF	; 255
    1d7a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1d7e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1d82:	ef e6       	ldi	r30, 0x6F	; 111
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	82 60       	ori	r24, 0x02	; 2
    1d8a:	80 83       	st	Z, r24
    1d8c:	05 c0       	rjmp	.+10     	; 0x1d98 <__vector_7+0x112>
    1d8e:	ef e6       	ldi	r30, 0x6F	; 111
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	8d 7f       	andi	r24, 0xFD	; 253
    1d96:	80 83       	st	Z, r24
    1d98:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <schedule>
    1d9c:	ff 91       	pop	r31
    1d9e:	ef 91       	pop	r30
    1da0:	bf 91       	pop	r27
    1da2:	af 91       	pop	r26
    1da4:	9f 91       	pop	r25
    1da6:	8f 91       	pop	r24
    1da8:	7f 91       	pop	r23
    1daa:	6f 91       	pop	r22
    1dac:	5f 91       	pop	r21
    1dae:	4f 91       	pop	r20
    1db0:	3f 91       	pop	r19
    1db2:	2f 91       	pop	r18
    1db4:	ff 90       	pop	r15
    1db6:	ef 90       	pop	r14
    1db8:	df 90       	pop	r13
    1dba:	cf 90       	pop	r12
    1dbc:	0f 90       	pop	r0
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	0f 90       	pop	r0
    1dc2:	1f 90       	pop	r1
    1dc4:	18 95       	reti

00001dc6 <async>:
    1dc6:	3f 92       	push	r3
    1dc8:	4f 92       	push	r4
    1dca:	5f 92       	push	r5
    1dcc:	6f 92       	push	r6
    1dce:	7f 92       	push	r7
    1dd0:	8f 92       	push	r8
    1dd2:	9f 92       	push	r9
    1dd4:	af 92       	push	r10
    1dd6:	bf 92       	push	r11
    1dd8:	cf 92       	push	r12
    1dda:	df 92       	push	r13
    1ddc:	ef 92       	push	r14
    1dde:	ff 92       	push	r15
    1de0:	0f 93       	push	r16
    1de2:	1f 93       	push	r17
    1de4:	cf 93       	push	r28
    1de6:	df 93       	push	r29
    1de8:	2b 01       	movw	r4, r22
    1dea:	3c 01       	movw	r6, r24
    1dec:	49 01       	movw	r8, r18
    1dee:	5a 01       	movw	r10, r20
    1df0:	8f b7       	in	r24, 0x3f	; 63
    1df2:	80 78       	andi	r24, 0x80	; 128
    1df4:	38 2e       	mov	r3, r24
    1df6:	f8 94       	cli
    1df8:	8c e3       	ldi	r24, 0x3C	; 60
    1dfa:	91 e0       	ldi	r25, 0x01	; 1
    1dfc:	0e 94 b3 05 	call	0xb66	; 0xb66 <dequeue>
    1e00:	ec 01       	movw	r28, r24
    1e02:	1b 87       	std	Y+11, r17	; 0x0b
    1e04:	0a 87       	std	Y+10, r16	; 0x0a
    1e06:	fd 86       	std	Y+13, r15	; 0x0d
    1e08:	ec 86       	std	Y+12, r14	; 0x0c
    1e0a:	df 86       	std	Y+15, r13	; 0x0f
    1e0c:	ce 86       	std	Y+14, r12	; 0x0e
    1e0e:	33 20       	and	r3, r3
    1e10:	61 f0       	breq	.+24     	; 0x1e2a <async+0x64>
    1e12:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <current>
    1e16:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <current+0x1>
    1e1a:	02 80       	ldd	r0, Z+2	; 0x02
    1e1c:	f3 81       	ldd	r31, Z+3	; 0x03
    1e1e:	e0 2d       	mov	r30, r0
    1e20:	82 81       	ldd	r24, Z+2	; 0x02
    1e22:	93 81       	ldd	r25, Z+3	; 0x03
    1e24:	a4 81       	ldd	r26, Z+4	; 0x04
    1e26:	b5 81       	ldd	r27, Z+5	; 0x05
    1e28:	08 c0       	rjmp	.+16     	; 0x1e3a <async+0x74>
    1e2a:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <timestamp>
    1e2e:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <timestamp+0x1>
    1e32:	a0 91 7a 01 	lds	r26, 0x017A	; 0x80017a <timestamp+0x2>
    1e36:	b0 91 7b 01 	lds	r27, 0x017B	; 0x80017b <timestamp+0x3>
    1e3a:	48 0e       	add	r4, r24
    1e3c:	59 1e       	adc	r5, r25
    1e3e:	6a 1e       	adc	r6, r26
    1e40:	7b 1e       	adc	r7, r27
    1e42:	4a 82       	std	Y+2, r4	; 0x02
    1e44:	5b 82       	std	Y+3, r5	; 0x03
    1e46:	6c 82       	std	Y+4, r6	; 0x04
    1e48:	7d 82       	std	Y+5, r7	; 0x05
    1e4a:	18 14       	cp	r1, r8
    1e4c:	19 04       	cpc	r1, r9
    1e4e:	1a 04       	cpc	r1, r10
    1e50:	1b 04       	cpc	r1, r11
    1e52:	44 f0       	brlt	.+16     	; 0x1e64 <async+0x9e>
    1e54:	0f 2e       	mov	r0, r31
    1e56:	88 24       	eor	r8, r8
    1e58:	8a 94       	dec	r8
    1e5a:	98 2c       	mov	r9, r8
    1e5c:	a8 2c       	mov	r10, r8
    1e5e:	ff e7       	ldi	r31, 0x7F	; 127
    1e60:	bf 2e       	mov	r11, r31
    1e62:	f0 2d       	mov	r31, r0
    1e64:	84 0c       	add	r8, r4
    1e66:	95 1c       	adc	r9, r5
    1e68:	a6 1c       	adc	r10, r6
    1e6a:	b7 1c       	adc	r11, r7
    1e6c:	8e 82       	std	Y+6, r8	; 0x06
    1e6e:	9f 82       	std	Y+7, r9	; 0x07
    1e70:	a8 86       	std	Y+8, r10	; 0x08
    1e72:	b9 86       	std	Y+9, r11	; 0x09
    1e74:	20 91 76 01 	lds	r18, 0x0176	; 0x800176 <overflows>
    1e78:	30 91 77 01 	lds	r19, 0x0177	; 0x800177 <overflows+0x1>
    1e7c:	c9 01       	movw	r24, r18
    1e7e:	03 2e       	mov	r0, r19
    1e80:	00 0c       	add	r0, r0
    1e82:	aa 0b       	sbc	r26, r26
    1e84:	bb 0b       	sbc	r27, r27
    1e86:	dc 01       	movw	r26, r24
    1e88:	99 27       	eor	r25, r25
    1e8a:	88 27       	eor	r24, r24
    1e8c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e90:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e94:	60 e0       	ldi	r22, 0x00	; 0
    1e96:	70 e0       	ldi	r23, 0x00	; 0
    1e98:	84 2b       	or	r24, r20
    1e9a:	95 2b       	or	r25, r21
    1e9c:	a6 2b       	or	r26, r22
    1e9e:	b7 2b       	or	r27, r23
    1ea0:	b0 9b       	sbis	0x16, 0	; 22
    1ea2:	13 c0       	rjmp	.+38     	; 0x1eca <async+0x104>
    1ea4:	c9 01       	movw	r24, r18
    1ea6:	01 96       	adiw	r24, 0x01	; 1
    1ea8:	09 2e       	mov	r0, r25
    1eaa:	00 0c       	add	r0, r0
    1eac:	aa 0b       	sbc	r26, r26
    1eae:	bb 0b       	sbc	r27, r27
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	99 27       	eor	r25, r25
    1eb4:	88 27       	eor	r24, r24
    1eb6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1eba:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ebe:	60 e0       	ldi	r22, 0x00	; 0
    1ec0:	70 e0       	ldi	r23, 0x00	; 0
    1ec2:	84 2b       	or	r24, r20
    1ec4:	95 2b       	or	r25, r21
    1ec6:	a6 2b       	or	r26, r22
    1ec8:	b7 2b       	or	r27, r23
    1eca:	48 1a       	sub	r4, r24
    1ecc:	59 0a       	sbc	r5, r25
    1ece:	6a 0a       	sbc	r6, r26
    1ed0:	7b 0a       	sbc	r7, r27
    1ed2:	14 14       	cp	r1, r4
    1ed4:	15 04       	cpc	r1, r5
    1ed6:	16 04       	cpc	r1, r6
    1ed8:	17 04       	cpc	r1, r7
    1eda:	ac f5       	brge	.+106    	; 0x1f46 <async+0x180>
    1edc:	6c e7       	ldi	r22, 0x7C	; 124
    1ede:	71 e0       	ldi	r23, 0x01	; 1
    1ee0:	ce 01       	movw	r24, r28
    1ee2:	0e 94 82 05 	call	0xb04	; 0xb04 <enqueueByBaseline>
    1ee6:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <timerQ>
    1eea:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <timerQ+0x1>
    1eee:	30 97       	sbiw	r30, 0x00	; 0
    1ef0:	21 f1       	breq	.+72     	; 0x1f3a <async+0x174>
    1ef2:	82 81       	ldd	r24, Z+2	; 0x02
    1ef4:	93 81       	ldd	r25, Z+3	; 0x03
    1ef6:	a4 81       	ldd	r26, Z+4	; 0x04
    1ef8:	b5 81       	ldd	r27, Z+5	; 0x05
    1efa:	20 91 76 01 	lds	r18, 0x0176	; 0x800176 <overflows>
    1efe:	30 91 77 01 	lds	r19, 0x0177	; 0x800177 <overflows+0x1>
    1f02:	2a 17       	cp	r18, r26
    1f04:	3b 07       	cpc	r19, r27
    1f06:	c9 f4       	brne	.+50     	; 0x1f3a <async+0x174>
    1f08:	9c 01       	movw	r18, r24
    1f0a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1f0e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1f12:	84 1b       	sub	r24, r20
    1f14:	95 0b       	sbc	r25, r21
    1f16:	01 97       	sbiw	r24, 0x01	; 1
    1f18:	31 f4       	brne	.+12     	; 0x1f26 <async+0x160>
    1f1a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1f1e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1f22:	2f 5f       	subi	r18, 0xFF	; 255
    1f24:	3f 4f       	sbci	r19, 0xFF	; 255
    1f26:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1f2a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1f2e:	ef e6       	ldi	r30, 0x6F	; 111
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	82 60       	ori	r24, 0x02	; 2
    1f36:	80 83       	st	Z, r24
    1f38:	39 c0       	rjmp	.+114    	; 0x1fac <async+0x1e6>
    1f3a:	ef e6       	ldi	r30, 0x6F	; 111
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	8d 7f       	andi	r24, 0xFD	; 253
    1f42:	80 83       	st	Z, r24
    1f44:	33 c0       	rjmp	.+102    	; 0x1fac <async+0x1e6>
    1f46:	6e e7       	ldi	r22, 0x7E	; 126
    1f48:	71 e0       	ldi	r23, 0x01	; 1
    1f4a:	ce 01       	movw	r24, r28
    1f4c:	0e 94 51 05 	call	0xaa2	; 0xaa2 <enqueueByDeadline>
    1f50:	33 20       	and	r3, r3
    1f52:	61 f1       	breq	.+88     	; 0x1fac <async+0x1e6>
    1f54:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <threadPool>
    1f58:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <threadPool+0x1>
    1f5c:	89 2b       	or	r24, r25
    1f5e:	31 f1       	breq	.+76     	; 0x1fac <async+0x1e6>
    1f60:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <msgQ>
    1f64:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <msgQ+0x1>
    1f68:	86 81       	ldd	r24, Z+6	; 0x06
    1f6a:	97 81       	ldd	r25, Z+7	; 0x07
    1f6c:	a0 85       	ldd	r26, Z+8	; 0x08
    1f6e:	b1 85       	ldd	r27, Z+9	; 0x09
    1f70:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <activeStack>
    1f74:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <activeStack+0x1>
    1f78:	02 80       	ldd	r0, Z+2	; 0x02
    1f7a:	f3 81       	ldd	r31, Z+3	; 0x03
    1f7c:	e0 2d       	mov	r30, r0
    1f7e:	46 81       	ldd	r20, Z+6	; 0x06
    1f80:	57 81       	ldd	r21, Z+7	; 0x07
    1f82:	60 85       	ldd	r22, Z+8	; 0x08
    1f84:	71 85       	ldd	r23, Z+9	; 0x09
    1f86:	84 1b       	sub	r24, r20
    1f88:	95 0b       	sbc	r25, r21
    1f8a:	a6 0b       	sbc	r26, r22
    1f8c:	b7 0b       	sbc	r27, r23
    1f8e:	72 f4       	brpl	.+28     	; 0x1fac <async+0x1e6>
    1f90:	8a e3       	ldi	r24, 0x3A	; 58
    1f92:	91 e0       	ldi	r25, 0x01	; 1
    1f94:	0e 94 de 05 	call	0xbbc	; 0xbbc <pop>
    1f98:	68 e3       	ldi	r22, 0x38	; 56
    1f9a:	71 e0       	ldi	r23, 0x01	; 1
    1f9c:	0e 94 d4 05 	call	0xba8	; 0xba8 <push>
    1fa0:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <activeStack>
    1fa4:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <activeStack+0x1>
    1fa8:	0e 94 31 05 	call	0xa62	; 0xa62 <dispatch>
    1fac:	33 20       	and	r3, r3
    1fae:	09 f0       	breq	.+2      	; 0x1fb2 <async+0x1ec>
    1fb0:	78 94       	sei
    1fb2:	ce 01       	movw	r24, r28
    1fb4:	df 91       	pop	r29
    1fb6:	cf 91       	pop	r28
    1fb8:	1f 91       	pop	r17
    1fba:	0f 91       	pop	r16
    1fbc:	ff 90       	pop	r15
    1fbe:	ef 90       	pop	r14
    1fc0:	df 90       	pop	r13
    1fc2:	cf 90       	pop	r12
    1fc4:	bf 90       	pop	r11
    1fc6:	af 90       	pop	r10
    1fc8:	9f 90       	pop	r9
    1fca:	8f 90       	pop	r8
    1fcc:	7f 90       	pop	r7
    1fce:	6f 90       	pop	r6
    1fd0:	5f 90       	pop	r5
    1fd2:	4f 90       	pop	r4
    1fd4:	3f 90       	pop	r3
    1fd6:	08 95       	ret

00001fd8 <sync>:
    1fd8:	cf 92       	push	r12
    1fda:	df 92       	push	r13
    1fdc:	ef 92       	push	r14
    1fde:	ff 92       	push	r15
    1fe0:	0f 93       	push	r16
    1fe2:	1f 93       	push	r17
    1fe4:	cf 93       	push	r28
    1fe6:	df 93       	push	r29
    1fe8:	ec 01       	movw	r28, r24
    1fea:	7b 01       	movw	r14, r22
    1fec:	6a 01       	movw	r12, r20
    1fee:	1f b7       	in	r17, 0x3f	; 63
    1ff0:	10 78       	andi	r17, 0x80	; 128
    1ff2:	f8 94       	cli
    1ff4:	a8 81       	ld	r26, Y
    1ff6:	b9 81       	ldd	r27, Y+1	; 0x01
    1ff8:	10 97       	sbiw	r26, 0x00	; 0
    1ffa:	19 f4       	brne	.+6      	; 0x2002 <sync+0x2a>
    1ffc:	35 c0       	rjmp	.+106    	; 0x2068 <sync+0x90>
    1ffe:	a0 81       	ld	r26, Z
    2000:	b1 81       	ldd	r27, Z+1	; 0x01
    2002:	14 96       	adiw	r26, 0x04	; 4
    2004:	ed 91       	ld	r30, X+
    2006:	fc 91       	ld	r31, X
    2008:	15 97       	sbiw	r26, 0x05	; 5
    200a:	30 97       	sbiw	r30, 0x00	; 0
    200c:	c1 f7       	brne	.-16     	; 0x1ffe <sync+0x26>
    200e:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <current>
    2012:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <current+0x1>
    2016:	a2 17       	cp	r26, r18
    2018:	b3 07       	cpc	r27, r19
    201a:	11 f0       	breq	.+4      	; 0x2020 <sync+0x48>
    201c:	11 11       	cpse	r17, r1
    201e:	07 c0       	rjmp	.+14     	; 0x202e <sync+0x56>
    2020:	11 23       	and	r17, r17
    2022:	09 f4       	brne	.+2      	; 0x2026 <sync+0x4e>
    2024:	4a c0       	rjmp	.+148    	; 0x20ba <sync+0xe2>
    2026:	78 94       	sei
    2028:	8f ef       	ldi	r24, 0xFF	; 255
    202a:	9f ef       	ldi	r25, 0xFF	; 255
    202c:	4e c0       	rjmp	.+156    	; 0x20ca <sync+0xf2>
    202e:	8a 81       	ldd	r24, Y+2	; 0x02
    2030:	9b 81       	ldd	r25, Y+3	; 0x03
    2032:	00 97       	sbiw	r24, 0x00	; 0
    2034:	19 f0       	breq	.+6      	; 0x203c <sync+0x64>
    2036:	fc 01       	movw	r30, r24
    2038:	15 82       	std	Z+5, r1	; 0x05
    203a:	14 82       	std	Z+4, r1	; 0x04
    203c:	3b 83       	std	Y+3, r19	; 0x03
    203e:	2a 83       	std	Y+2, r18	; 0x02
    2040:	f9 01       	movw	r30, r18
    2042:	d5 83       	std	Z+5, r29	; 0x05
    2044:	c4 83       	std	Z+4, r28	; 0x04
    2046:	cd 01       	movw	r24, r26
    2048:	0e 94 31 05 	call	0xa62	; 0xa62 <dispatch>
    204c:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <current>
    2050:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <current+0x1>
    2054:	82 81       	ldd	r24, Z+2	; 0x02
    2056:	93 81       	ldd	r25, Z+3	; 0x03
    2058:	89 2b       	or	r24, r25
    205a:	31 f4       	brne	.+12     	; 0x2068 <sync+0x90>
    205c:	11 23       	and	r17, r17
    205e:	81 f1       	breq	.+96     	; 0x20c0 <sync+0xe8>
    2060:	78 94       	sei
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	31 c0       	rjmp	.+98     	; 0x20ca <sync+0xf2>
    2068:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <current>
    206c:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <current+0x1>
    2070:	99 83       	std	Y+1, r25	; 0x01
    2072:	88 83       	st	Y, r24
    2074:	11 23       	and	r17, r17
    2076:	29 f0       	breq	.+10     	; 0x2082 <sync+0xaa>
    2078:	8a 81       	ldd	r24, Y+2	; 0x02
    207a:	9b 81       	ldd	r25, Y+3	; 0x03
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	09 f0       	breq	.+2      	; 0x2082 <sync+0xaa>
    2080:	78 94       	sei
    2082:	b6 01       	movw	r22, r12
    2084:	ce 01       	movw	r24, r28
    2086:	f7 01       	movw	r30, r14
    2088:	09 95       	icall
    208a:	f8 2e       	mov	r15, r24
    208c:	09 2f       	mov	r16, r25
    208e:	8f b7       	in	r24, 0x3f	; 63
    2090:	f8 94       	cli
    2092:	19 82       	std	Y+1, r1	; 0x01
    2094:	18 82       	st	Y, r1
    2096:	8a 81       	ldd	r24, Y+2	; 0x02
    2098:	9b 81       	ldd	r25, Y+3	; 0x03
    209a:	82 30       	cpi	r24, 0x02	; 2
    209c:	91 05       	cpc	r25, r1
    209e:	38 f0       	brcs	.+14     	; 0x20ae <sync+0xd6>
    20a0:	1b 82       	std	Y+3, r1	; 0x03
    20a2:	1a 82       	std	Y+2, r1	; 0x02
    20a4:	fc 01       	movw	r30, r24
    20a6:	15 82       	std	Z+5, r1	; 0x05
    20a8:	14 82       	std	Z+4, r1	; 0x04
    20aa:	0e 94 31 05 	call	0xa62	; 0xa62 <dispatch>
    20ae:	11 23       	and	r17, r17
    20b0:	51 f0       	breq	.+20     	; 0x20c6 <sync+0xee>
    20b2:	78 94       	sei
    20b4:	8f 2d       	mov	r24, r15
    20b6:	90 2f       	mov	r25, r16
    20b8:	08 c0       	rjmp	.+16     	; 0x20ca <sync+0xf2>
    20ba:	8f ef       	ldi	r24, 0xFF	; 255
    20bc:	9f ef       	ldi	r25, 0xFF	; 255
    20be:	05 c0       	rjmp	.+10     	; 0x20ca <sync+0xf2>
    20c0:	80 e0       	ldi	r24, 0x00	; 0
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	02 c0       	rjmp	.+4      	; 0x20ca <sync+0xf2>
    20c6:	8f 2d       	mov	r24, r15
    20c8:	90 2f       	mov	r25, r16
    20ca:	df 91       	pop	r29
    20cc:	cf 91       	pop	r28
    20ce:	1f 91       	pop	r17
    20d0:	0f 91       	pop	r16
    20d2:	ff 90       	pop	r15
    20d4:	ef 90       	pop	r14
    20d6:	df 90       	pop	r13
    20d8:	cf 90       	pop	r12
    20da:	08 95       	ret

000020dc <run>:
    20dc:	00 91 36 01 	lds	r16, 0x0136	; 0x800136 <current>
    20e0:	10 91 37 01 	lds	r17, 0x0137	; 0x800137 <current+0x1>
    20e4:	8e e7       	ldi	r24, 0x7E	; 126
    20e6:	91 e0       	ldi	r25, 0x01	; 1
    20e8:	0e 94 b3 05 	call	0xb66	; 0xb66 <dequeue>
    20ec:	ec 01       	movw	r28, r24
    20ee:	f8 01       	movw	r30, r16
    20f0:	93 83       	std	Z+3, r25	; 0x03
    20f2:	82 83       	std	Z+2, r24	; 0x02
    20f4:	78 94       	sei
    20f6:	6c 85       	ldd	r22, Y+12	; 0x0c
    20f8:	7d 85       	ldd	r23, Y+13	; 0x0d
    20fa:	4e 85       	ldd	r20, Y+14	; 0x0e
    20fc:	5f 85       	ldd	r21, Y+15	; 0x0f
    20fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2100:	9b 85       	ldd	r25, Y+11	; 0x0b
    2102:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <sync>
    2106:	8f b7       	in	r24, 0x3f	; 63
    2108:	f8 94       	cli
    210a:	6c e3       	ldi	r22, 0x3C	; 60
    210c:	71 e0       	ldi	r23, 0x01	; 1
    210e:	ce 01       	movw	r24, r28
    2110:	0e 94 ca 05 	call	0xb94	; 0xb94 <insert>
    2114:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <activeStack>
    2118:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <activeStack+0x1>
    211c:	01 90       	ld	r0, Z+
    211e:	f0 81       	ld	r31, Z
    2120:	e0 2d       	mov	r30, r0
    2122:	c2 81       	ldd	r28, Z+2	; 0x02
    2124:	d3 81       	ldd	r29, Z+3	; 0x03
    2126:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <msgQ>
    212a:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <msgQ+0x1>
    212e:	30 97       	sbiw	r30, 0x00	; 0
    2130:	a1 f0       	breq	.+40     	; 0x215a <run+0x7e>
    2132:	20 97       	sbiw	r28, 0x00	; 0
    2134:	99 f2       	breq	.-90     	; 0x20dc <run>
    2136:	86 81       	ldd	r24, Z+6	; 0x06
    2138:	97 81       	ldd	r25, Z+7	; 0x07
    213a:	a0 85       	ldd	r26, Z+8	; 0x08
    213c:	b1 85       	ldd	r27, Z+9	; 0x09
    213e:	4e 81       	ldd	r20, Y+6	; 0x06
    2140:	5f 81       	ldd	r21, Y+7	; 0x07
    2142:	68 85       	ldd	r22, Y+8	; 0x08
    2144:	79 85       	ldd	r23, Y+9	; 0x09
    2146:	84 1b       	sub	r24, r20
    2148:	95 0b       	sbc	r25, r21
    214a:	a6 0b       	sbc	r26, r22
    214c:	b7 0b       	sbc	r27, r23
    214e:	18 16       	cp	r1, r24
    2150:	19 06       	cpc	r1, r25
    2152:	1a 06       	cpc	r1, r26
    2154:	1b 06       	cpc	r1, r27
    2156:	0c f0       	brlt	.+2      	; 0x215a <run+0x7e>
    2158:	c1 cf       	rjmp	.-126    	; 0x20dc <run>
    215a:	88 e3       	ldi	r24, 0x38	; 56
    215c:	91 e0       	ldi	r25, 0x01	; 1
    215e:	0e 94 de 05 	call	0xbbc	; 0xbbc <pop>
    2162:	6a e3       	ldi	r22, 0x3A	; 58
    2164:	71 e0       	ldi	r23, 0x01	; 1
    2166:	0e 94 d4 05 	call	0xba8	; 0xba8 <push>
    216a:	a0 91 38 01 	lds	r26, 0x0138	; 0x800138 <activeStack>
    216e:	b0 91 39 01 	lds	r27, 0x0139	; 0x800139 <activeStack+0x1>
    2172:	02 c0       	rjmp	.+4      	; 0x2178 <run+0x9c>
    2174:	a0 81       	ld	r26, Z
    2176:	b1 81       	ldd	r27, Z+1	; 0x01
    2178:	14 96       	adiw	r26, 0x04	; 4
    217a:	ed 91       	ld	r30, X+
    217c:	fc 91       	ld	r31, X
    217e:	15 97       	sbiw	r26, 0x05	; 5
    2180:	30 97       	sbiw	r30, 0x00	; 0
    2182:	c1 f7       	brne	.-16     	; 0x2174 <run+0x98>
    2184:	cd 01       	movw	r24, r26
    2186:	0e 94 31 05 	call	0xa62	; 0xa62 <dispatch>
    218a:	a8 cf       	rjmp	.-176    	; 0x20dc <run>

0000218c <install>:
    thread0.msg = NULL;
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    218c:	fc 01       	movw	r30, r24
    if (i >= 0 && i < N_VECTORS) {
    218e:	42 31       	cpi	r20, 0x12	; 18
    2190:	b8 f4       	brcc	.+46     	; 0x21c0 <install+0x34>
        char status;
        DISABLE(status);
    2192:	9f b7       	in	r25, 0x3f	; 63
    2194:	90 78       	andi	r25, 0x80	; 128
    2196:	f8 94       	cli
        otable[i] = obj;
    2198:	50 e0       	ldi	r21, 0x00	; 0
    219a:	44 0f       	add	r20, r20
    219c:	55 1f       	adc	r21, r21
    219e:	da 01       	movw	r26, r20
    21a0:	a0 58       	subi	r26, 0x80	; 128
    21a2:	be 4f       	sbci	r27, 0xFE	; 254
    21a4:	ed 93       	st	X+, r30
    21a6:	fc 93       	st	X, r31
        mtable[i] = m;
    21a8:	da 01       	movw	r26, r20
    21aa:	a8 5e       	subi	r26, 0xE8	; 232
    21ac:	bd 4f       	sbci	r27, 0xFD	; 253
    21ae:	6d 93       	st	X+, r22
    21b0:	7c 93       	st	X, r23
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    21b2:	21 e0       	ldi	r18, 0x01	; 1
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	33 83       	std	Z+3, r19	; 0x03
    21b8:	22 83       	std	Z+2, r18	; 0x02
        ENABLE(status);
    21ba:	99 23       	and	r25, r25
    21bc:	09 f0       	breq	.+2      	; 0x21c0 <install+0x34>
    21be:	78 94       	sei
    21c0:	08 95       	ret

000021c2 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    21c2:	8c 01       	movw	r16, r24
    21c4:	7b 01       	movw	r14, r22
    21c6:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    21c8:	8f b7       	in	r24, 0x3f	; 63
    21ca:	f8 94       	cli
    initialize();
    21cc:	0e 94 92 04 	call	0x924	; 0x924 <initialize>
    ENABLE(1);
    21d0:	78 94       	sei
    if (m != NULL)
    21d2:	e1 14       	cp	r14, r1
    21d4:	f1 04       	cpc	r15, r1
    21d6:	41 f0       	breq	.+16     	; 0x21e8 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	a9 01       	movw	r20, r18
    21de:	60 e0       	ldi	r22, 0x00	; 0
    21e0:	70 e0       	ldi	r23, 0x00	; 0
    21e2:	cb 01       	movw	r24, r22
    21e4:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <async>
    DISABLE(status);
    21e8:	8f b7       	in	r24, 0x3f	; 63
    21ea:	f8 94       	cli
    idle();
    21ec:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <idle>

000021f0 <__divmodhi4>:
    21f0:	97 fb       	bst	r25, 7
    21f2:	07 2e       	mov	r0, r23
    21f4:	16 f4       	brtc	.+4      	; 0x21fa <__divmodhi4+0xa>
    21f6:	00 94       	com	r0
    21f8:	07 d0       	rcall	.+14     	; 0x2208 <__divmodhi4_neg1>
    21fa:	77 fd       	sbrc	r23, 7
    21fc:	09 d0       	rcall	.+18     	; 0x2210 <__divmodhi4_neg2>
    21fe:	0e 94 13 11 	call	0x2226	; 0x2226 <__udivmodhi4>
    2202:	07 fc       	sbrc	r0, 7
    2204:	05 d0       	rcall	.+10     	; 0x2210 <__divmodhi4_neg2>
    2206:	3e f4       	brtc	.+14     	; 0x2216 <__divmodhi4_exit>

00002208 <__divmodhi4_neg1>:
    2208:	90 95       	com	r25
    220a:	81 95       	neg	r24
    220c:	9f 4f       	sbci	r25, 0xFF	; 255
    220e:	08 95       	ret

00002210 <__divmodhi4_neg2>:
    2210:	70 95       	com	r23
    2212:	61 95       	neg	r22
    2214:	7f 4f       	sbci	r23, 0xFF	; 255

00002216 <__divmodhi4_exit>:
    2216:	08 95       	ret

00002218 <__usmulhisi3>:
    2218:	0e 94 27 11 	call	0x224e	; 0x224e <__umulhisi3>

0000221c <__usmulhisi3_tail>:
    221c:	b7 ff       	sbrs	r27, 7
    221e:	08 95       	ret
    2220:	82 1b       	sub	r24, r18
    2222:	93 0b       	sbc	r25, r19
    2224:	08 95       	ret

00002226 <__udivmodhi4>:
    2226:	aa 1b       	sub	r26, r26
    2228:	bb 1b       	sub	r27, r27
    222a:	51 e1       	ldi	r21, 0x11	; 17
    222c:	07 c0       	rjmp	.+14     	; 0x223c <__udivmodhi4_ep>

0000222e <__udivmodhi4_loop>:
    222e:	aa 1f       	adc	r26, r26
    2230:	bb 1f       	adc	r27, r27
    2232:	a6 17       	cp	r26, r22
    2234:	b7 07       	cpc	r27, r23
    2236:	10 f0       	brcs	.+4      	; 0x223c <__udivmodhi4_ep>
    2238:	a6 1b       	sub	r26, r22
    223a:	b7 0b       	sbc	r27, r23

0000223c <__udivmodhi4_ep>:
    223c:	88 1f       	adc	r24, r24
    223e:	99 1f       	adc	r25, r25
    2240:	5a 95       	dec	r21
    2242:	a9 f7       	brne	.-22     	; 0x222e <__udivmodhi4_loop>
    2244:	80 95       	com	r24
    2246:	90 95       	com	r25
    2248:	bc 01       	movw	r22, r24
    224a:	cd 01       	movw	r24, r26
    224c:	08 95       	ret

0000224e <__umulhisi3>:
    224e:	a2 9f       	mul	r26, r18
    2250:	b0 01       	movw	r22, r0
    2252:	b3 9f       	mul	r27, r19
    2254:	c0 01       	movw	r24, r0
    2256:	a3 9f       	mul	r26, r19
    2258:	70 0d       	add	r23, r0
    225a:	81 1d       	adc	r24, r1
    225c:	11 24       	eor	r1, r1
    225e:	91 1d       	adc	r25, r1
    2260:	b2 9f       	mul	r27, r18
    2262:	70 0d       	add	r23, r0
    2264:	81 1d       	adc	r24, r1
    2266:	11 24       	eor	r1, r1
    2268:	91 1d       	adc	r25, r1
    226a:	08 95       	ret

0000226c <setjmp>:
    226c:	dc 01       	movw	r26, r24
    226e:	2d 92       	st	X+, r2
    2270:	3d 92       	st	X+, r3
    2272:	4d 92       	st	X+, r4
    2274:	5d 92       	st	X+, r5
    2276:	6d 92       	st	X+, r6
    2278:	7d 92       	st	X+, r7
    227a:	8d 92       	st	X+, r8
    227c:	9d 92       	st	X+, r9
    227e:	ad 92       	st	X+, r10
    2280:	bd 92       	st	X+, r11
    2282:	cd 92       	st	X+, r12
    2284:	dd 92       	st	X+, r13
    2286:	ed 92       	st	X+, r14
    2288:	fd 92       	st	X+, r15
    228a:	0d 93       	st	X+, r16
    228c:	1d 93       	st	X+, r17
    228e:	cd 93       	st	X+, r28
    2290:	dd 93       	st	X+, r29
    2292:	ff 91       	pop	r31
    2294:	ef 91       	pop	r30
    2296:	8d b7       	in	r24, 0x3d	; 61
    2298:	8d 93       	st	X+, r24
    229a:	8e b7       	in	r24, 0x3e	; 62
    229c:	8d 93       	st	X+, r24
    229e:	8f b7       	in	r24, 0x3f	; 63
    22a0:	8d 93       	st	X+, r24
    22a2:	ed 93       	st	X+, r30
    22a4:	fd 93       	st	X+, r31
    22a6:	88 27       	eor	r24, r24
    22a8:	99 27       	eor	r25, r25
    22aa:	09 94       	ijmp

000022ac <longjmp>:
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	81 30       	cpi	r24, 0x01	; 1
    22b2:	91 05       	cpc	r25, r1
    22b4:	81 1d       	adc	r24, r1
    22b6:	2d 90       	ld	r2, X+
    22b8:	3d 90       	ld	r3, X+
    22ba:	4d 90       	ld	r4, X+
    22bc:	5d 90       	ld	r5, X+
    22be:	6d 90       	ld	r6, X+
    22c0:	7d 90       	ld	r7, X+
    22c2:	8d 90       	ld	r8, X+
    22c4:	9d 90       	ld	r9, X+
    22c6:	ad 90       	ld	r10, X+
    22c8:	bd 90       	ld	r11, X+
    22ca:	cd 90       	ld	r12, X+
    22cc:	dd 90       	ld	r13, X+
    22ce:	ed 90       	ld	r14, X+
    22d0:	fd 90       	ld	r15, X+
    22d2:	0d 91       	ld	r16, X+
    22d4:	1d 91       	ld	r17, X+
    22d6:	cd 91       	ld	r28, X+
    22d8:	dd 91       	ld	r29, X+
    22da:	ed 91       	ld	r30, X+
    22dc:	fd 91       	ld	r31, X+
    22de:	0d 90       	ld	r0, X+
    22e0:	f8 94       	cli
    22e2:	fe bf       	out	0x3e, r31	; 62
    22e4:	0f be       	out	0x3f, r0	; 63
    22e6:	ed bf       	out	0x3d, r30	; 61
    22e8:	ed 91       	ld	r30, X+
    22ea:	fd 91       	ld	r31, X+
    22ec:	09 94       	ijmp

000022ee <_exit>:
    22ee:	f8 94       	cli

000022f0 <__stop_program>:
    22f0:	ff cf       	rjmp	.-2      	; 0x22f0 <__stop_program>
