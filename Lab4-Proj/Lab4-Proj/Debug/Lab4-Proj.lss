
Lab4-Proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00002306  0000239a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002306  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  00800138  00800138  000023d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000023d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002404  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  00002444  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000031c0  00000000  00000000  000026f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000124a  00000000  00000000  000058b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001810  00000000  00000000  00006afe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d5c  00000000  00000000  00008310  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a23  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000029ba  00000000  00000000  00009a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  0000c449  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__vector_1>
       8:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <__vector_2>
       c:	0c 94 04 07 	jmp	0xe08	; 0xe08 <__vector_3>
      10:	0c 94 73 07 	jmp	0xee6	; 0xee6 <__vector_4>
      14:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 4d 0e 	jmp	0x1c9a	; 0x1c9a <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 fb 0d 	jmp	0x1bf6	; 0x1bf6 <__vector_9>
      28:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__vector_10>
      2c:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__vector_11>
      30:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__vector_12>
      34:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__vector_13>
      38:	0c 94 0d 0a 	jmp	0x141a	; 0x141a <__vector_14>
      3c:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__vector_15>
      40:	0c 94 eb 0a 	jmp	0x15d6	; 0x15d6 <__vector_16>
      44:	0c 94 5a 0b 	jmp	0x16b4	; 0x16b4 <__vector_17>
      48:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <__vector_18>
      4c:	0c 94 38 0c 	jmp	0x1870	; 0x1870 <__vector_19>
      50:	0c 94 a7 0c 	jmp	0x194e	; 0x194e <__vector_20>
      54:	0c 94 16 0d 	jmp	0x1a2c	; 0x1a2c <__vector_21>
      58:	0c 94 85 0d 	jmp	0x1b0a	; 0x1b0a <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e6 e0       	ldi	r30, 0x06	; 6
      70:	f3 e2       	ldi	r31, 0x23	; 35
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a8 33       	cpi	r26, 0x38	; 56
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	a8 e3       	ldi	r26, 0x38	; 56
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	ab 38       	cpi	r26, 0x8B	; 139
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 ba 02 	call	0x574	; 0x574 <main>
      92:	0c 94 81 11 	jmp	0x2302	; 0x2302 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <holdJoyStick>:
 */ 
#include "JoystickInter.h"
#include <avr/io.h>
#include "GUI.h"

int holdJoyStick(JoystickInter *self, int unUsed) {
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	ec 01       	movw	r28, r24
	if (!(PINB & (1 << PB7))) { // DOWN
      ac:	1f 99       	sbic	0x03, 7	; 3
      ae:	22 c0       	rjmp	.+68     	; 0xf4 <holdJoyStick+0x5a>
		ASYNC(self->gui, freqDown, 0); // SYNC till ASYNC
      b0:	0c 81       	ldd	r16, Y+4	; 0x04
      b2:	1d 81       	ldd	r17, Y+5	; 0x05
      b4:	c1 2c       	mov	r12, r1
      b6:	d1 2c       	mov	r13, r1
      b8:	0f 2e       	mov	r0, r31
      ba:	f9 e5       	ldi	r31, 0x59	; 89
      bc:	ef 2e       	mov	r14, r31
      be:	f1 e0       	ldi	r31, 0x01	; 1
      c0:	ff 2e       	mov	r15, r31
      c2:	f0 2d       	mov	r31, r0
      c4:	20 e0       	ldi	r18, 0x00	; 0
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	a9 01       	movw	r20, r18
      ca:	60 e0       	ldi	r22, 0x00	; 0
      cc:	70 e0       	ldi	r23, 0x00	; 0
      ce:	cb 01       	movw	r24, r22
      d0:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <async>
		AFTER(MSEC(500), self, holdJoyStick, 0);
      d4:	0f 2e       	mov	r0, r31
      d6:	fd e4       	ldi	r31, 0x4D	; 77
      d8:	ef 2e       	mov	r14, r31
      da:	f0 e0       	ldi	r31, 0x00	; 0
      dc:	ff 2e       	mov	r15, r31
      de:	f0 2d       	mov	r31, r0
      e0:	8e 01       	movw	r16, r28
      e2:	20 e0       	ldi	r18, 0x00	; 0
      e4:	30 e0       	ldi	r19, 0x00	; 0
      e6:	a9 01       	movw	r20, r18
      e8:	69 e0       	ldi	r22, 0x09	; 9
      ea:	7d e3       	ldi	r23, 0x3D	; 61
      ec:	80 e0       	ldi	r24, 0x00	; 0
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <async>
	}
	if (!(PINB & (1 << PB6))) { // UP
      f4:	1e 99       	sbic	0x03, 6	; 3
      f6:	22 c0       	rjmp	.+68     	; 0x13c <holdJoyStick+0xa2>
		ASYNC(self->gui, freqUp, 0); // SYNC till ASYNC
      f8:	0c 81       	ldd	r16, Y+4	; 0x04
      fa:	1d 81       	ldd	r17, Y+5	; 0x05
      fc:	c1 2c       	mov	r12, r1
      fe:	d1 2c       	mov	r13, r1
     100:	0f 2e       	mov	r0, r31
     102:	f0 e2       	ldi	r31, 0x20	; 32
     104:	ef 2e       	mov	r14, r31
     106:	f1 e0       	ldi	r31, 0x01	; 1
     108:	ff 2e       	mov	r15, r31
     10a:	f0 2d       	mov	r31, r0
     10c:	20 e0       	ldi	r18, 0x00	; 0
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	a9 01       	movw	r20, r18
     112:	60 e0       	ldi	r22, 0x00	; 0
     114:	70 e0       	ldi	r23, 0x00	; 0
     116:	cb 01       	movw	r24, r22
     118:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <async>
		AFTER(MSEC(500), self, holdJoyStick, 0);
     11c:	0f 2e       	mov	r0, r31
     11e:	fd e4       	ldi	r31, 0x4D	; 77
     120:	ef 2e       	mov	r14, r31
     122:	f0 e0       	ldi	r31, 0x00	; 0
     124:	ff 2e       	mov	r15, r31
     126:	f0 2d       	mov	r31, r0
     128:	8e 01       	movw	r16, r28
     12a:	20 e0       	ldi	r18, 0x00	; 0
     12c:	30 e0       	ldi	r19, 0x00	; 0
     12e:	a9 01       	movw	r20, r18
     130:	69 e0       	ldi	r22, 0x09	; 9
     132:	7d e3       	ldi	r23, 0x3D	; 61
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <async>
	}
	return 0;
}
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	df 91       	pop	r29
     142:	cf 91       	pop	r28
     144:	1f 91       	pop	r17
     146:	0f 91       	pop	r16
     148:	ff 90       	pop	r15
     14a:	ef 90       	pop	r14
     14c:	df 90       	pop	r13
     14e:	cf 90       	pop	r12
     150:	08 95       	ret

00000152 <joyStickHorizontalControll>:

int joyStickHorizontalControll(JoystickInter *self, int unUsed){
     152:	cf 92       	push	r12
     154:	df 92       	push	r13
     156:	ef 92       	push	r14
     158:	ff 92       	push	r15
     15a:	0f 93       	push	r16
     15c:	1f 93       	push	r17
	if((!(PINE & (1 << PE1)) || !(PINE & (1 << PE6)))){
     15e:	61 9b       	sbis	0x0c, 1	; 12
     160:	02 c0       	rjmp	.+4      	; 0x166 <joyStickHorizontalControll+0x14>
     162:	66 99       	sbic	0x0c, 6	; 12
     164:	14 c0       	rjmp	.+40     	; 0x18e <joyStickHorizontalControll+0x3c>
     166:	fc 01       	movw	r30, r24
		AFTER(MSEC(200), self->gui, switchState, 0);
     168:	04 81       	ldd	r16, Z+4	; 0x04
     16a:	15 81       	ldd	r17, Z+5	; 0x05
     16c:	c1 2c       	mov	r12, r1
     16e:	d1 2c       	mov	r13, r1
     170:	0f 2e       	mov	r0, r31
     172:	f2 e9       	ldi	r31, 0x92	; 146
     174:	ef 2e       	mov	r14, r31
     176:	f1 e0       	ldi	r31, 0x01	; 1
     178:	ff 2e       	mov	r15, r31
     17a:	f0 2d       	mov	r31, r0
     17c:	20 e0       	ldi	r18, 0x00	; 0
     17e:	30 e0       	ldi	r19, 0x00	; 0
     180:	a9 01       	movw	r20, r18
     182:	6a e6       	ldi	r22, 0x6A	; 106
     184:	78 e1       	ldi	r23, 0x18	; 24
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <async>
	}
	return 0;
}
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	1f 91       	pop	r17
     194:	0f 91       	pop	r16
     196:	ff 90       	pop	r15
     198:	ef 90       	pop	r14
     19a:	df 90       	pop	r13
     19c:	cf 90       	pop	r12
     19e:	08 95       	ret

000001a0 <joyStickVerticalControll>:

int joyStickVerticalControll(JoystickInter *self, int unUsed){
     1a0:	cf 92       	push	r12
     1a2:	df 92       	push	r13
     1a4:	ef 92       	push	r14
     1a6:	ff 92       	push	r15
     1a8:	0f 93       	push	r16
     1aa:	1f 93       	push	r17
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	ec 01       	movw	r28, r24
	if (!(PINB & (1 << PB7))) { //DOWN
     1b2:	1f 99       	sbic	0x03, 7	; 3
     1b4:	12 c0       	rjmp	.+36     	; 0x1da <joyStickVerticalControll+0x3a>
		//ASYNC(self, freqDown, 0);
		AFTER(MSEC(50), self, holdJoyStick, 0);
     1b6:	c1 2c       	mov	r12, r1
     1b8:	d1 2c       	mov	r13, r1
     1ba:	0f 2e       	mov	r0, r31
     1bc:	fd e4       	ldi	r31, 0x4D	; 77
     1be:	ef 2e       	mov	r14, r31
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	ff 2e       	mov	r15, r31
     1c4:	f0 2d       	mov	r31, r0
     1c6:	8c 01       	movw	r16, r24
     1c8:	20 e0       	ldi	r18, 0x00	; 0
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	a9 01       	movw	r20, r18
     1ce:	6a e1       	ldi	r22, 0x1A	; 26
     1d0:	76 e0       	ldi	r23, 0x06	; 6
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <async>
	}
	if (!(PINB & (1 << PB6))) { //UP
     1da:	1e 99       	sbic	0x03, 6	; 3
     1dc:	12 c0       	rjmp	.+36     	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
		//ASYNC(self, freqUp, 0);
		AFTER(MSEC(50), self, holdJoyStick, 0);
     1de:	c1 2c       	mov	r12, r1
     1e0:	d1 2c       	mov	r13, r1
     1e2:	0f 2e       	mov	r0, r31
     1e4:	fd e4       	ldi	r31, 0x4D	; 77
     1e6:	ef 2e       	mov	r14, r31
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	ff 2e       	mov	r15, r31
     1ec:	f0 2d       	mov	r31, r0
     1ee:	8e 01       	movw	r16, r28
     1f0:	20 e0       	ldi	r18, 0x00	; 0
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	a9 01       	movw	r20, r18
     1f6:	6a e1       	ldi	r22, 0x1A	; 26
     1f8:	76 e0       	ldi	r23, 0x06	; 6
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <async>
		
	}
	if (!(PINB & (1 << PB4))) { //PRESS
     202:	1c 99       	sbic	0x03, 4	; 3
     204:	12 c0       	rjmp	.+36     	; 0x22a <__EEPROM_REGION_LENGTH__+0x2a>
		//ASYNC(self, press, 0);
		AFTER(MSEC(50), self, press, 0);
     206:	c1 2c       	mov	r12, r1
     208:	d1 2c       	mov	r13, r1
     20a:	0f 2e       	mov	r0, r31
     20c:	ff e9       	ldi	r31, 0x9F	; 159
     20e:	ef 2e       	mov	r14, r31
     210:	f1 e0       	ldi	r31, 0x01	; 1
     212:	ff 2e       	mov	r15, r31
     214:	f0 2d       	mov	r31, r0
     216:	8e 01       	movw	r16, r28
     218:	20 e0       	ldi	r18, 0x00	; 0
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	a9 01       	movw	r20, r18
     21e:	6a e1       	ldi	r22, 0x1A	; 26
     220:	76 e0       	ldi	r23, 0x06	; 6
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <async>
	}
	return 0;
}
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	df 91       	pop	r29
     230:	cf 91       	pop	r28
     232:	1f 91       	pop	r17
     234:	0f 91       	pop	r16
     236:	ff 90       	pop	r15
     238:	ef 90       	pop	r14
     23a:	df 90       	pop	r13
     23c:	cf 90       	pop	r12
     23e:	08 95       	ret

00000240 <freqUp>:
#include "LCD_Driver.h"
#include "PulseGenerator.h"
#include <avr/io.h>
//TODO: Check every call if it should be SYNC or SYNC

int freqUp(GUI *self, int unUsed){
     240:	cf 92       	push	r12
     242:	df 92       	push	r13
     244:	ef 92       	push	r14
     246:	ff 92       	push	r15
     248:	0f 93       	push	r16
     24a:	1f 93       	push	r17
	if(self->isLeft){
     24c:	fc 01       	movw	r30, r24
     24e:	24 81       	ldd	r18, Z+4	; 0x04
     250:	22 23       	and	r18, r18
     252:	99 f0       	breq	.+38     	; 0x27a <freqUp+0x3a>
		ASYNC(self->left, increase, 0);	
     254:	05 81       	ldd	r16, Z+5	; 0x05
     256:	16 81       	ldd	r17, Z+6	; 0x06
     258:	c1 2c       	mov	r12, r1
     25a:	d1 2c       	mov	r13, r1
     25c:	0f 2e       	mov	r0, r31
     25e:	f3 ea       	ldi	r31, 0xA3	; 163
     260:	ef 2e       	mov	r14, r31
     262:	f3 e0       	ldi	r31, 0x03	; 3
     264:	ff 2e       	mov	r15, r31
     266:	f0 2d       	mov	r31, r0
     268:	20 e0       	ldi	r18, 0x00	; 0
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	a9 01       	movw	r20, r18
     26e:	60 e0       	ldi	r22, 0x00	; 0
     270:	70 e0       	ldi	r23, 0x00	; 0
     272:	cb 01       	movw	r24, r22
     274:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <async>
     278:	13 c0       	rjmp	.+38     	; 0x2a0 <freqUp+0x60>
	}else{
		ASYNC(self->right, increase, 0);
     27a:	fc 01       	movw	r30, r24
     27c:	07 81       	ldd	r16, Z+7	; 0x07
     27e:	10 85       	ldd	r17, Z+8	; 0x08
     280:	c1 2c       	mov	r12, r1
     282:	d1 2c       	mov	r13, r1
     284:	0f 2e       	mov	r0, r31
     286:	f3 ea       	ldi	r31, 0xA3	; 163
     288:	ef 2e       	mov	r14, r31
     28a:	f3 e0       	ldi	r31, 0x03	; 3
     28c:	ff 2e       	mov	r15, r31
     28e:	f0 2d       	mov	r31, r0
     290:	20 e0       	ldi	r18, 0x00	; 0
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	a9 01       	movw	r20, r18
     296:	60 e0       	ldi	r22, 0x00	; 0
     298:	70 e0       	ldi	r23, 0x00	; 0
     29a:	cb 01       	movw	r24, r22
     29c:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <async>
	}
	
	return 0;
}
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	1f 91       	pop	r17
     2a6:	0f 91       	pop	r16
     2a8:	ff 90       	pop	r15
     2aa:	ef 90       	pop	r14
     2ac:	df 90       	pop	r13
     2ae:	cf 90       	pop	r12
     2b0:	08 95       	ret

000002b2 <freqDown>:

int freqDown(GUI *self, int unUsed){
     2b2:	cf 92       	push	r12
     2b4:	df 92       	push	r13
     2b6:	ef 92       	push	r14
     2b8:	ff 92       	push	r15
     2ba:	0f 93       	push	r16
     2bc:	1f 93       	push	r17
	if(self->isLeft){
     2be:	fc 01       	movw	r30, r24
     2c0:	24 81       	ldd	r18, Z+4	; 0x04
     2c2:	22 23       	and	r18, r18
     2c4:	99 f0       	breq	.+38     	; 0x2ec <freqDown+0x3a>
		ASYNC(self->left, decrease, 0);
     2c6:	05 81       	ldd	r16, Z+5	; 0x05
     2c8:	16 81       	ldd	r17, Z+6	; 0x06
     2ca:	c1 2c       	mov	r12, r1
     2cc:	d1 2c       	mov	r13, r1
     2ce:	0f 2e       	mov	r0, r31
     2d0:	f1 ef       	ldi	r31, 0xF1	; 241
     2d2:	ef 2e       	mov	r14, r31
     2d4:	f3 e0       	ldi	r31, 0x03	; 3
     2d6:	ff 2e       	mov	r15, r31
     2d8:	f0 2d       	mov	r31, r0
     2da:	20 e0       	ldi	r18, 0x00	; 0
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	a9 01       	movw	r20, r18
     2e0:	60 e0       	ldi	r22, 0x00	; 0
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	cb 01       	movw	r24, r22
     2e6:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <async>
     2ea:	13 c0       	rjmp	.+38     	; 0x312 <freqDown+0x60>
	}else{
		ASYNC(self->right, decrease, 0);
     2ec:	fc 01       	movw	r30, r24
     2ee:	07 81       	ldd	r16, Z+7	; 0x07
     2f0:	10 85       	ldd	r17, Z+8	; 0x08
     2f2:	c1 2c       	mov	r12, r1
     2f4:	d1 2c       	mov	r13, r1
     2f6:	0f 2e       	mov	r0, r31
     2f8:	f1 ef       	ldi	r31, 0xF1	; 241
     2fa:	ef 2e       	mov	r14, r31
     2fc:	f3 e0       	ldi	r31, 0x03	; 3
     2fe:	ff 2e       	mov	r15, r31
     300:	f0 2d       	mov	r31, r0
     302:	20 e0       	ldi	r18, 0x00	; 0
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	a9 01       	movw	r20, r18
     308:	60 e0       	ldi	r22, 0x00	; 0
     30a:	70 e0       	ldi	r23, 0x00	; 0
     30c:	cb 01       	movw	r24, r22
     30e:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <async>
	}
	return 0;
}
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	1f 91       	pop	r17
     318:	0f 91       	pop	r16
     31a:	ff 90       	pop	r15
     31c:	ef 90       	pop	r14
     31e:	df 90       	pop	r13
     320:	cf 90       	pop	r12
     322:	08 95       	ret

00000324 <switchState>:

int switchState(GUI *self, int unUsed){
     324:	fc 01       	movw	r30, r24
    self->isLeft ^= true;
     326:	24 81       	ldd	r18, Z+4	; 0x04
     328:	91 e0       	ldi	r25, 0x01	; 1
     32a:	29 27       	eor	r18, r25
     32c:	24 83       	std	Z+4, r18	; 0x04
	LCDDR13 ^= 1;
     32e:	e9 ef       	ldi	r30, 0xF9	; 249
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	80 81       	ld	r24, Z
     334:	98 27       	eor	r25, r24
     336:	90 83       	st	Z, r25
	return 0;
}
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	08 95       	ret

0000033e <press>:

int press(GUI *self, int unUsed){
     33e:	cf 92       	push	r12
     340:	df 92       	push	r13
     342:	ef 92       	push	r14
     344:	ff 92       	push	r15
     346:	0f 93       	push	r16
     348:	1f 93       	push	r17
	if(self->isLeft){
     34a:	fc 01       	movw	r30, r24
     34c:	24 81       	ldd	r18, Z+4	; 0x04
     34e:	22 23       	and	r18, r18
     350:	99 f0       	breq	.+38     	; 0x378 <press+0x3a>
		ASYNC(self->left, reset, 0);  
     352:	05 81       	ldd	r16, Z+5	; 0x05
     354:	16 81       	ldd	r17, Z+6	; 0x06
     356:	c1 2c       	mov	r12, r1
     358:	d1 2c       	mov	r13, r1
     35a:	0f 2e       	mov	r0, r31
     35c:	fa e3       	ldi	r31, 0x3A	; 58
     35e:	ef 2e       	mov	r14, r31
     360:	f4 e0       	ldi	r31, 0x04	; 4
     362:	ff 2e       	mov	r15, r31
     364:	f0 2d       	mov	r31, r0
     366:	20 e0       	ldi	r18, 0x00	; 0
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	a9 01       	movw	r20, r18
     36c:	60 e0       	ldi	r22, 0x00	; 0
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	cb 01       	movw	r24, r22
     372:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <async>
     376:	13 c0       	rjmp	.+38     	; 0x39e <press+0x60>
		} else {
		ASYNC(self->right, reset, 0); 
     378:	fc 01       	movw	r30, r24
     37a:	07 81       	ldd	r16, Z+7	; 0x07
     37c:	10 85       	ldd	r17, Z+8	; 0x08
     37e:	c1 2c       	mov	r12, r1
     380:	d1 2c       	mov	r13, r1
     382:	0f 2e       	mov	r0, r31
     384:	fa e3       	ldi	r31, 0x3A	; 58
     386:	ef 2e       	mov	r14, r31
     388:	f4 e0       	ldi	r31, 0x04	; 4
     38a:	ff 2e       	mov	r15, r31
     38c:	f0 2d       	mov	r31, r0
     38e:	20 e0       	ldi	r18, 0x00	; 0
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	a9 01       	movw	r20, r18
     394:	60 e0       	ldi	r22, 0x00	; 0
     396:	70 e0       	ldi	r23, 0x00	; 0
     398:	cb 01       	movw	r24, r22
     39a:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <async>
	}
	return 0;
}
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	1f 91       	pop	r17
     3a4:	0f 91       	pop	r16
     3a6:	ff 90       	pop	r15
     3a8:	ef 90       	pop	r14
     3aa:	df 90       	pop	r13
     3ac:	cf 90       	pop	r12
     3ae:	08 95       	ret

000003b0 <CPUCLK_Init>:
#include "LCD_Driver.h"
#include <avr/io.h>
#include <stdbool.h>

void CPUCLK_Init(void){
	CLKPR = 0x80;
     3b0:	e1 e6       	ldi	r30, 0x61	; 97
     3b2:	f0 e0       	ldi	r31, 0x00	; 0
     3b4:	80 e8       	ldi	r24, 0x80	; 128
     3b6:	80 83       	st	Z, r24
	CLKPR = 0x00;
     3b8:	10 82       	st	Z, r1
     3ba:	08 95       	ret

000003bc <LCD_Init>:
}

void LCD_Init(void){
	//Use 32 kHz crystal oscillator
	//1/3 Bias and 1/4 duty, SEG0:SEG24 is used as port pins
	LCDCRB = (1<<LCDCS) | (1<<LCDMUX0)| (1<<LCDMUX1)|(1<<LCDPM0) |(1<<LCDPM1) |(1<<LCDPM2);
     3bc:	87 eb       	ldi	r24, 0xB7	; 183
     3be:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	/* Using 16 as prescaler selection and 8 as LCD Clock Divide */
	/* gives a frame rate of 32 Hz */
	LCDFRR = (1<<LCDCD0) | (1<<LCDCD1) | (1<<LCDCD2);
     3c2:	87 e0       	ldi	r24, 0x07	; 7
     3c4:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
	/* Set segment drive time to 300 μs and output voltage to 3.35 V*/
	LCDCCR = (1<<LCDDC0) | (1<<LCDCC1) | (1<<LCDCC2) | (1<<LCDCC3);
     3c8:	8e e2       	ldi	r24, 0x2E	; 46
     3ca:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	/* Enable LCD, low power waveform and no interrupt enabled */
	LCDCRA = (1<<LCDEN);
     3ce:	80 e8       	ldi	r24, 0x80	; 128
     3d0:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>

	//Indicator bits 
	LCDDR13 ^= 1;
     3d4:	e9 ef       	ldi	r30, 0xF9	; 249
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	90 81       	ld	r25, Z
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	89 27       	eor	r24, r25
     3de:	80 83       	st	Z, r24
     3e0:	08 95       	ret

000003e2 <CLK_Init>:
}

void CLK_Init(){
	// Timer
	DDRB = (1<<DDB7);
     3e2:	80 e8       	ldi	r24, 0x80	; 128
     3e4:	84 b9       	out	0x04, r24	; 4
     3e6:	08 95       	ret

000003e8 <BUTTON_Init>:
}

void BUTTON_Init(){
	PORTB |= (1 << 7) | (1 << 6) | (1 << 4);
     3e8:	85 b1       	in	r24, 0x05	; 5
     3ea:	80 6d       	ori	r24, 0xD0	; 208
     3ec:	85 b9       	out	0x05, r24	; 5
	PORTE |= (1 << 3) | (1 << 2);
     3ee:	8e b1       	in	r24, 0x0e	; 14
     3f0:	8c 60       	ori	r24, 0x0C	; 12
     3f2:	8e b9       	out	0x0e, r24	; 14

    //Interrupt enables
	EIMSK  |= (1 << PCIE1) | (1 << PCIE0);
     3f4:	8d b3       	in	r24, 0x1d	; 29
     3f6:	80 6c       	ori	r24, 0xC0	; 192
     3f8:	8d bb       	out	0x1d, r24	; 29
	PCMSK1 |= (1 << PCINT11) | (1 << PCINT12) | (1 << PCINT13) | (1 << PCINT14) | (1 << PCINT15);
     3fa:	ec e6       	ldi	r30, 0x6C	; 108
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	80 81       	ld	r24, Z
     400:	88 6f       	ori	r24, 0xF8	; 248
     402:	80 83       	st	Z, r24
	
	PCMSK0 |= (1 << PCINT2) | (1 << PCINT3);
     404:	eb e6       	ldi	r30, 0x6B	; 107
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	80 81       	ld	r24, Z
     40a:	8c 60       	ori	r24, 0x0C	; 12
     40c:	80 83       	st	Z, r24
     40e:	08 95       	ret

00000410 <INIT>:
}

void INIT(){
	CPUCLK_Init();
     410:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <CPUCLK_Init>
	LCD_Init();
     414:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_Init>
	CLK_Init();
     418:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <CLK_Init>
	BUTTON_Init();
     41c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <BUTTON_Init>
     420:	08 95       	ret

00000422 <writeChar>:
	LCDDR6 = data2;
}

void writeChar(char ch, int pos){
	/* Returns if given input is not possible to print */
	if(pos < 0 || pos > 5 || ch < 48 || ch > 57){
     422:	66 30       	cpi	r22, 0x06	; 6
     424:	71 05       	cpc	r23, r1
     426:	08 f0       	brcs	.+2      	; 0x42a <writeChar+0x8>
     428:	6e c0       	rjmp	.+220    	; 0x506 <__stack+0x7>
     42a:	80 33       	cpi	r24, 0x30	; 48
     42c:	08 f4       	brcc	.+2      	; 0x430 <writeChar+0xe>
     42e:	6b c0       	rjmp	.+214    	; 0x506 <__stack+0x7>
     430:	8a 33       	cpi	r24, 0x3A	; 58
     432:	08 f0       	brcs	.+2      	; 0x436 <writeChar+0x14>
     434:	68 c0       	rjmp	.+208    	; 0x506 <__stack+0x7>
		return;
	}
	volatile uint8_t *lcd_base = &LCDDR0 + offsetPos[pos];
     436:	fb 01       	movw	r30, r22
     438:	e8 5f       	subi	r30, 0xF8	; 248
     43a:	fe 4f       	sbci	r31, 0xFE	; 254
     43c:	e0 81       	ld	r30, Z
     43e:	f0 e0       	ldi	r31, 0x00	; 0
     440:	e4 51       	subi	r30, 0x14	; 20
     442:	ff 4f       	sbci	r31, 0xFF	; 255
	
	int number = (int)ch - 48;
     444:	a8 2f       	mov	r26, r24
     446:	b0 e0       	ldi	r27, 0x00	; 0
     448:	d0 97       	sbiw	r26, 0x30	; 48
	int shift = 0;
	/*Clears the part of the display we want to write onto */
	if (pos % 2 == 1){
     44a:	61 70       	andi	r22, 0x01	; 1
     44c:	70 78       	andi	r23, 0x80	; 128
     44e:	77 23       	and	r23, r23
     450:	34 f4       	brge	.+12     	; 0x45e <writeChar+0x3c>
     452:	61 50       	subi	r22, 0x01	; 1
     454:	71 09       	sbc	r23, r1
     456:	6e 6f       	ori	r22, 0xFE	; 254
     458:	7f 6f       	ori	r23, 0xFF	; 255
     45a:	6f 5f       	subi	r22, 0xFF	; 255
     45c:	7f 4f       	sbci	r23, 0xFF	; 255
     45e:	61 30       	cpi	r22, 0x01	; 1
     460:	71 05       	cpc	r23, r1
     462:	71 f4       	brne	.+28     	; 0x480 <writeChar+0x5e>
		shift = 4;
		lcd_base[0]  = lcd_base[0]  & 0x0F;
     464:	80 81       	ld	r24, Z
     466:	8f 70       	andi	r24, 0x0F	; 15
     468:	80 83       	st	Z, r24
		lcd_base[5]  = lcd_base[5]  & 0x0F;
     46a:	85 81       	ldd	r24, Z+5	; 0x05
     46c:	8f 70       	andi	r24, 0x0F	; 15
     46e:	85 83       	std	Z+5, r24	; 0x05
		lcd_base[10] = lcd_base[10] & 0x0F;
     470:	82 85       	ldd	r24, Z+10	; 0x0a
     472:	8f 70       	andi	r24, 0x0F	; 15
     474:	82 87       	std	Z+10, r24	; 0x0a
		lcd_base[15] = lcd_base[15] & 0x0F;
     476:	87 85       	ldd	r24, Z+15	; 0x0f
     478:	8f 70       	andi	r24, 0x0F	; 15
     47a:	87 87       	std	Z+15, r24	; 0x0f
	
	int number = (int)ch - 48;
	int shift = 0;
	/*Clears the part of the display we want to write onto */
	if (pos % 2 == 1){
		shift = 4;
     47c:	24 e0       	ldi	r18, 0x04	; 4
     47e:	0d c0       	rjmp	.+26     	; 0x49a <writeChar+0x78>
		lcd_base[0]  = lcd_base[0]  & 0x0F;
		lcd_base[5]  = lcd_base[5]  & 0x0F;
		lcd_base[10] = lcd_base[10] & 0x0F;
		lcd_base[15] = lcd_base[15] & 0x0F;
		}else{
		lcd_base[0]  = lcd_base[0]  & 0xF0;
     480:	80 81       	ld	r24, Z
     482:	80 7f       	andi	r24, 0xF0	; 240
     484:	80 83       	st	Z, r24
		lcd_base[5]  = lcd_base[5]  & 0xF0;
     486:	85 81       	ldd	r24, Z+5	; 0x05
     488:	80 7f       	andi	r24, 0xF0	; 240
     48a:	85 83       	std	Z+5, r24	; 0x05
		lcd_base[10] = lcd_base[10] & 0xF0;
     48c:	82 85       	ldd	r24, Z+10	; 0x0a
     48e:	80 7f       	andi	r24, 0xF0	; 240
     490:	82 87       	std	Z+10, r24	; 0x0a
		lcd_base[15] = lcd_base[15] & 0xF0;
     492:	87 85       	ldd	r24, Z+15	; 0x0f
     494:	80 7f       	andi	r24, 0xF0	; 240
     496:	87 87       	std	Z+15, r24	; 0x0f
		return;
	}
	volatile uint8_t *lcd_base = &LCDDR0 + offsetPos[pos];
	
	int number = (int)ch - 48;
	int shift = 0;
     498:	20 e0       	ldi	r18, 0x00	; 0
		lcd_base[5]  = lcd_base[5]  & 0xF0;
		lcd_base[10] = lcd_base[10] & 0xF0;
		lcd_base[15] = lcd_base[15] & 0xF0;
	}
	/*Writes to the display*/
	lcd_base[0]  = charCodes[number][0]<<shift | lcd_base[0] ;
     49a:	aa 0f       	add	r26, r26
     49c:	bb 1f       	adc	r27, r27
     49e:	aa 0f       	add	r26, r26
     4a0:	bb 1f       	adc	r27, r27
     4a2:	a0 5f       	subi	r26, 0xF0	; 240
     4a4:	be 4f       	sbci	r27, 0xFE	; 254
     4a6:	8c 91       	ld	r24, X
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	02 2e       	mov	r0, r18
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <writeChar+0x90>
     4ae:	88 0f       	add	r24, r24
     4b0:	99 1f       	adc	r25, r25
     4b2:	0a 94       	dec	r0
     4b4:	e2 f7       	brpl	.-8      	; 0x4ae <writeChar+0x8c>
     4b6:	90 81       	ld	r25, Z
     4b8:	89 2b       	or	r24, r25
     4ba:	80 83       	st	Z, r24
	lcd_base[5]  = charCodes[number][1]<<shift | lcd_base[5] ;
     4bc:	11 96       	adiw	r26, 0x01	; 1
     4be:	8c 91       	ld	r24, X
     4c0:	11 97       	sbiw	r26, 0x01	; 1
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	02 2e       	mov	r0, r18
     4c6:	02 c0       	rjmp	.+4      	; 0x4cc <writeChar+0xaa>
     4c8:	88 0f       	add	r24, r24
     4ca:	99 1f       	adc	r25, r25
     4cc:	0a 94       	dec	r0
     4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <writeChar+0xa6>
     4d0:	95 81       	ldd	r25, Z+5	; 0x05
     4d2:	89 2b       	or	r24, r25
     4d4:	85 83       	std	Z+5, r24	; 0x05
	lcd_base[10] = charCodes[number][2]<<shift | lcd_base[10];
     4d6:	12 96       	adiw	r26, 0x02	; 2
     4d8:	8c 91       	ld	r24, X
     4da:	12 97       	sbiw	r26, 0x02	; 2
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	02 2e       	mov	r0, r18
     4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <writeChar+0xc4>
     4e2:	88 0f       	add	r24, r24
     4e4:	99 1f       	adc	r25, r25
     4e6:	0a 94       	dec	r0
     4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <writeChar+0xc0>
     4ea:	92 85       	ldd	r25, Z+10	; 0x0a
     4ec:	89 2b       	or	r24, r25
     4ee:	82 87       	std	Z+10, r24	; 0x0a
	lcd_base[15] = charCodes[number][3]<<shift | lcd_base[15];
     4f0:	13 96       	adiw	r26, 0x03	; 3
     4f2:	8c 91       	ld	r24, X
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	02 c0       	rjmp	.+4      	; 0x4fc <writeChar+0xda>
     4f8:	88 0f       	add	r24, r24
     4fa:	99 1f       	adc	r25, r25
     4fc:	2a 95       	dec	r18
     4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <writeChar+0xd6>
     500:	97 85       	ldd	r25, Z+15	; 0x0f
     502:	89 2b       	or	r24, r25
     504:	87 87       	std	Z+15, r24	; 0x0f
     506:	08 95       	ret

00000508 <printAt>:
}
	
int printAt(LCD_Driver *self, const int map) {
     508:	ef 92       	push	r14
     50a:	ff 92       	push	r15
     50c:	0f 93       	push	r16
     50e:	1f 93       	push	r17
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
	union PrintPun p = {.map = map};
	int pp;
	pp = p.args.pos;
     514:	c6 2f       	mov	r28, r22
     516:	cc 1f       	adc	r28, r28
     518:	cc 27       	eor	r28, r28
     51a:	cc 1f       	adc	r28, r28
     51c:	73 70       	andi	r23, 0x03	; 3
     51e:	77 0f       	add	r23, r23
     520:	7c 2b       	or	r23, r28
     522:	c7 2f       	mov	r28, r23
     524:	d0 e0       	ldi	r29, 0x00	; 0
	int num = p.args.num;
     526:	6f 77       	andi	r22, 0x7F	; 127
     528:	06 2f       	mov	r16, r22
     52a:	10 e0       	ldi	r17, 0x00	; 0
	writeChar( (num % 100) / 10 + '0', pp);
     52c:	c8 01       	movw	r24, r16
     52e:	64 e6       	ldi	r22, 0x64	; 100
     530:	70 e0       	ldi	r23, 0x00	; 0
     532:	0e 94 02 11 	call	0x2204	; 0x2204 <__divmodhi4>
     536:	0f 2e       	mov	r0, r31
     538:	fa e0       	ldi	r31, 0x0A	; 10
     53a:	ef 2e       	mov	r14, r31
     53c:	f1 2c       	mov	r15, r1
     53e:	f0 2d       	mov	r31, r0
     540:	b7 01       	movw	r22, r14
     542:	0e 94 02 11 	call	0x2204	; 0x2204 <__divmodhi4>
     546:	86 2f       	mov	r24, r22
     548:	be 01       	movw	r22, r28
     54a:	80 5d       	subi	r24, 0xD0	; 208
     54c:	0e 94 11 02 	call	0x422	; 0x422 <writeChar>
	pp++;
     550:	21 96       	adiw	r28, 0x01	; 1
	writeChar( num % 10 + '0', pp);
     552:	c8 01       	movw	r24, r16
     554:	b7 01       	movw	r22, r14
     556:	0e 94 02 11 	call	0x2204	; 0x2204 <__divmodhi4>
     55a:	be 01       	movw	r22, r28
     55c:	80 5d       	subi	r24, 0xD0	; 208
     55e:	0e 94 11 02 	call	0x422	; 0x422 <writeChar>
	
	return 0;
}
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	1f 91       	pop	r17
     56c:	0f 91       	pop	r16
     56e:	ff 90       	pop	r15
     570:	ef 90       	pop	r14
     572:	08 95       	ret

00000574 <main>:
#include "LCD_Driver.h"
#include "JoystickInter.h"


int main(void)
{    
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	cd b7       	in	r28, 0x3d	; 61
     57a:	de b7       	in	r29, 0x3e	; 62
     57c:	e7 97       	sbiw	r28, 0x37	; 55
     57e:	0f b6       	in	r0, 0x3f	; 63
     580:	f8 94       	cli
     582:	de bf       	out	0x3e, r29	; 62
     584:	0f be       	out	0x3f, r0	; 63
     586:	cd bf       	out	0x3d, r28	; 61
	INIT();
     588:	0e 94 08 02 	call	0x410	; 0x410 <INIT>
	PulseController pulseController = initPulseController();
     58c:	1a 82       	std	Y+2, r1	; 0x02
     58e:	19 82       	std	Y+1, r1	; 0x01
     590:	1c 82       	std	Y+4, r1	; 0x04
     592:	1b 82       	std	Y+3, r1	; 0x03
	LCD_Driver display = initLCD_Driver();
     594:	1e 82       	std	Y+6, r1	; 0x06
     596:	1d 82       	std	Y+5, r1	; 0x05
     598:	18 86       	std	Y+8, r1	; 0x08
     59a:	1f 82       	std	Y+7, r1	; 0x07
	PulseGenerator pulseLeft = initPulseGenerator(0, 1, 1, &pulseController, &display);
     59c:	1a 86       	std	Y+10, r1	; 0x0a
     59e:	19 86       	std	Y+9, r1	; 0x09
     5a0:	1c 86       	std	Y+12, r1	; 0x0c
     5a2:	1b 86       	std	Y+11, r1	; 0x0b
     5a4:	1e 86       	std	Y+14, r1	; 0x0e
     5a6:	1d 86       	std	Y+13, r1	; 0x0d
     5a8:	18 8a       	std	Y+16, r1	; 0x10
     5aa:	1f 86       	std	Y+15, r1	; 0x0f
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	9a 8b       	std	Y+18, r25	; 0x12
     5b2:	89 8b       	std	Y+17, r24	; 0x11
     5b4:	9c 8b       	std	Y+20, r25	; 0x14
     5b6:	8b 8b       	std	Y+19, r24	; 0x13
     5b8:	9e 01       	movw	r18, r28
     5ba:	2f 5f       	subi	r18, 0xFF	; 255
     5bc:	3f 4f       	sbci	r19, 0xFF	; 255
     5be:	3e 8b       	std	Y+22, r19	; 0x16
     5c0:	2d 8b       	std	Y+21, r18	; 0x15
     5c2:	ce 01       	movw	r24, r28
     5c4:	05 96       	adiw	r24, 0x05	; 5
     5c6:	98 8f       	std	Y+24, r25	; 0x18
     5c8:	8f 8b       	std	Y+23, r24	; 0x17
	PulseGenerator pulseRight = initPulseGenerator(0, 4, 3, &pulseController, &display);
     5ca:	1a 8e       	std	Y+26, r1	; 0x1a
     5cc:	19 8e       	std	Y+25, r1	; 0x19
     5ce:	1c 8e       	std	Y+28, r1	; 0x1c
     5d0:	1b 8e       	std	Y+27, r1	; 0x1b
     5d2:	1e 8e       	std	Y+30, r1	; 0x1e
     5d4:	1d 8e       	std	Y+29, r1	; 0x1d
     5d6:	18 a2       	std	Y+32, r1	; 0x20
     5d8:	1f 8e       	std	Y+31, r1	; 0x1f
     5da:	44 e0       	ldi	r20, 0x04	; 4
     5dc:	50 e0       	ldi	r21, 0x00	; 0
     5de:	5a a3       	std	Y+34, r21	; 0x22
     5e0:	49 a3       	std	Y+33, r20	; 0x21
     5e2:	43 e0       	ldi	r20, 0x03	; 3
     5e4:	50 e0       	ldi	r21, 0x00	; 0
     5e6:	5c a3       	std	Y+36, r21	; 0x24
     5e8:	4b a3       	std	Y+35, r20	; 0x23
     5ea:	3e a3       	std	Y+38, r19	; 0x26
     5ec:	2d a3       	std	Y+37, r18	; 0x25
     5ee:	98 a7       	std	Y+40, r25	; 0x28
     5f0:	8f a3       	std	Y+39, r24	; 0x27
	GUI gui = initGUI(&pulseLeft, &pulseRight);
     5f2:	1a a6       	std	Y+42, r1	; 0x2a
     5f4:	19 a6       	std	Y+41, r1	; 0x29
     5f6:	1c a6       	std	Y+44, r1	; 0x2c
     5f8:	1b a6       	std	Y+43, r1	; 0x2b
     5fa:	1d a6       	std	Y+45, r1	; 0x2d
     5fc:	04 96       	adiw	r24, 0x04	; 4
     5fe:	9f a7       	std	Y+47, r25	; 0x2f
     600:	8e a7       	std	Y+46, r24	; 0x2e
     602:	40 96       	adiw	r24, 0x10	; 16
     604:	99 ab       	std	Y+49, r25	; 0x31
     606:	88 ab       	std	Y+48, r24	; 0x30
	JoystickInter joy = initJoystickInter(&gui);
     608:	1b aa       	std	Y+51, r1	; 0x33
     60a:	1a aa       	std	Y+50, r1	; 0x32
     60c:	1d aa       	std	Y+53, r1	; 0x35
     60e:	1c aa       	std	Y+52, r1	; 0x34
     610:	40 96       	adiw	r24, 0x10	; 16
     612:	9f ab       	std	Y+55, r25	; 0x37
     614:	8e ab       	std	Y+54, r24	; 0x36
	INSTALL(&joy, joyStickVerticalControll, IRQ_PCINT1);
     616:	42 e0       	ldi	r20, 0x02	; 2
     618:	60 ed       	ldi	r22, 0xD0	; 208
     61a:	70 e0       	ldi	r23, 0x00	; 0
     61c:	09 96       	adiw	r24, 0x09	; 9
     61e:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <install>
	INSTALL(&joy, joyStickHorizontalControll, IRQ_PCINT0);
     622:	41 e0       	ldi	r20, 0x01	; 1
     624:	69 ea       	ldi	r22, 0xA9	; 169
     626:	70 e0       	ldi	r23, 0x00	; 0
     628:	ce 01       	movw	r24, r28
     62a:	c2 96       	adiw	r24, 0x32	; 50
     62c:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <install>
	return TINYTIMBER(NULL, NULL, NULL);
     630:	40 e0       	ldi	r20, 0x00	; 0
     632:	50 e0       	ldi	r21, 0x00	; 0
     634:	60 e0       	ldi	r22, 0x00	; 0
     636:	70 e0       	ldi	r23, 0x00	; 0
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <tinytimber>
     640:	e7 96       	adiw	r28, 0x37	; 55
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	f8 94       	cli
     646:	de bf       	out	0x3e, r29	; 62
     648:	0f be       	out	0x3f, r0	; 63
     64a:	cd bf       	out	0x3d, r28	; 61
     64c:	df 91       	pop	r29
     64e:	cf 91       	pop	r28
     650:	08 95       	ret

00000652 <sendSignal>:
#include "PulseController.h"
#include <avr/io.h>
#include "LCD_Driver.h"

int sendSignal(PulseController *self, int pin){
	if(pin == 1){
     652:	61 30       	cpi	r22, 0x01	; 1
     654:	71 05       	cpc	r23, r1
     656:	29 f4       	brne	.+10     	; 0x662 <sendSignal+0x10>
		PORTE ^= (1 << PE4);
     658:	9e b1       	in	r25, 0x0e	; 14
     65a:	80 e1       	ldi	r24, 0x10	; 16
     65c:	89 27       	eor	r24, r25
     65e:	8e b9       	out	0x0e, r24	; 14
     660:	07 c0       	rjmp	.+14     	; 0x670 <sendSignal+0x1e>
		}else if(pin == 3){
     662:	63 30       	cpi	r22, 0x03	; 3
     664:	71 05       	cpc	r23, r1
     666:	21 f4       	brne	.+8      	; 0x670 <sendSignal+0x1e>
		PORTE ^= (1 << PE6);
     668:	9e b1       	in	r25, 0x0e	; 14
     66a:	80 e4       	ldi	r24, 0x40	; 64
     66c:	89 27       	eor	r24, r25
     66e:	8e b9       	out	0x0e, r24	; 14
	}
	
	LCDDR18 ^= 1;
     670:	ee ef       	ldi	r30, 0xFE	; 254
     672:	f0 e0       	ldi	r31, 0x00	; 0
     674:	90 81       	ld	r25, Z
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	89 27       	eor	r24, r25
     67a:	80 83       	st	Z, r24
	return 0;
}
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	08 95       	ret

00000682 <setLow>:

int setLow(PulseController *self, int pin){
	if(pin == 1){
     682:	61 30       	cpi	r22, 0x01	; 1
     684:	71 05       	cpc	r23, r1
     686:	11 f4       	brne	.+4      	; 0x68c <setLow+0xa>
		PORTE = (0 << PE4);
     688:	1e b8       	out	0x0e, r1	; 14
     68a:	04 c0       	rjmp	.+8      	; 0x694 <setLow+0x12>
		}else if(pin == 3){
     68c:	63 30       	cpi	r22, 0x03	; 3
     68e:	71 05       	cpc	r23, r1
     690:	09 f4       	brne	.+2      	; 0x694 <setLow+0x12>
		PORTE = (0 << PE6);
     692:	1e b8       	out	0x0e, r1	; 14
	}
	return 0;
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	08 95       	ret

0000069a <generator>:
	ASYNC(self->display, printAt, PACK_PRINT(self->currentFreq, self->pos));
	
	return self->currentFreq;
}

int generator(PulseGenerator *self, int unused){
     69a:	cf 92       	push	r12
     69c:	df 92       	push	r13
     69e:	ef 92       	push	r14
     6a0:	ff 92       	push	r15
     6a2:	0f 93       	push	r16
     6a4:	1f 93       	push	r17
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
	if(self->currentFreq){
     6aa:	fc 01       	movw	r30, r24
     6ac:	24 81       	ldd	r18, Z+4	; 0x04
     6ae:	35 81       	ldd	r19, Z+5	; 0x05
     6b0:	23 2b       	or	r18, r19
     6b2:	f1 f1       	breq	.+124    	; 0x730 <generator+0x96>
     6b4:	ec 01       	movw	r28, r24
		ASYNC(self->outPut, sendSignal, self->pin);
     6b6:	04 85       	ldd	r16, Z+12	; 0x0c
     6b8:	15 85       	ldd	r17, Z+13	; 0x0d
     6ba:	c2 84       	ldd	r12, Z+10	; 0x0a
     6bc:	d3 84       	ldd	r13, Z+11	; 0x0b
     6be:	0f 2e       	mov	r0, r31
     6c0:	f9 e2       	ldi	r31, 0x29	; 41
     6c2:	ef 2e       	mov	r14, r31
     6c4:	f3 e0       	ldi	r31, 0x03	; 3
     6c6:	ff 2e       	mov	r15, r31
     6c8:	f0 2d       	mov	r31, r0
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	a9 01       	movw	r20, r18
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	cb 01       	movw	r24, r22
     6d6:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <async>
		int fre = (500/self->currentFreq);
     6da:	6c 81       	ldd	r22, Y+4	; 0x04
     6dc:	7d 81       	ldd	r23, Y+5	; 0x05
     6de:	84 ef       	ldi	r24, 0xF4	; 244
     6e0:	91 e0       	ldi	r25, 0x01	; 1
     6e2:	0e 94 02 11 	call	0x2204	; 0x2204 <__divmodhi4>
		AFTER(MSEC(fre), self, generator, 0);
     6e6:	2d e7       	ldi	r18, 0x7D	; 125
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	db 01       	movw	r26, r22
     6ec:	0e 94 16 11 	call	0x222c	; 0x222c <__usmulhisi3>
     6f0:	8b 01       	movw	r16, r22
     6f2:	9c 01       	movw	r18, r24
     6f4:	99 23       	and	r25, r25
     6f6:	24 f4       	brge	.+8      	; 0x700 <generator+0x66>
     6f8:	0d 5f       	subi	r16, 0xFD	; 253
     6fa:	1f 4f       	sbci	r17, 0xFF	; 255
     6fc:	2f 4f       	sbci	r18, 0xFF	; 255
     6fe:	3f 4f       	sbci	r19, 0xFF	; 255
     700:	c9 01       	movw	r24, r18
     702:	b8 01       	movw	r22, r16
     704:	95 95       	asr	r25
     706:	87 95       	ror	r24
     708:	77 95       	ror	r23
     70a:	67 95       	ror	r22
     70c:	95 95       	asr	r25
     70e:	87 95       	ror	r24
     710:	77 95       	ror	r23
     712:	67 95       	ror	r22
     714:	c1 2c       	mov	r12, r1
     716:	d1 2c       	mov	r13, r1
     718:	0f 2e       	mov	r0, r31
     71a:	fd e4       	ldi	r31, 0x4D	; 77
     71c:	ef 2e       	mov	r14, r31
     71e:	f3 e0       	ldi	r31, 0x03	; 3
     720:	ff 2e       	mov	r15, r31
     722:	f0 2d       	mov	r31, r0
     724:	8e 01       	movw	r16, r28
     726:	20 e0       	ldi	r18, 0x00	; 0
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	a9 01       	movw	r20, r18
     72c:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <async>
	}

	return 0;
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	df 91       	pop	r29
     736:	cf 91       	pop	r28
     738:	1f 91       	pop	r17
     73a:	0f 91       	pop	r16
     73c:	ff 90       	pop	r15
     73e:	ef 90       	pop	r14
     740:	df 90       	pop	r13
     742:	cf 90       	pop	r12
     744:	08 95       	ret

00000746 <increase>:
#include "PulseGenerator.h"

int increase(PulseGenerator *self, int unused){
     746:	cf 92       	push	r12
     748:	df 92       	push	r13
     74a:	ef 92       	push	r14
     74c:	ff 92       	push	r15
     74e:	0f 93       	push	r16
     750:	1f 93       	push	r17
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	ec 01       	movw	r28, r24
	if (!(self->currentFreq >= 99)) self->currentFreq += 1;
     758:	8c 81       	ldd	r24, Y+4	; 0x04
     75a:	9d 81       	ldd	r25, Y+5	; 0x05
     75c:	83 36       	cpi	r24, 0x63	; 99
     75e:	91 05       	cpc	r25, r1
     760:	1c f4       	brge	.+6      	; 0x768 <increase+0x22>
     762:	01 96       	adiw	r24, 0x01	; 1
     764:	9d 83       	std	Y+5, r25	; 0x05
     766:	8c 83       	std	Y+4, r24	; 0x04
	ASYNC(self->display, printAt, PACK_PRINT(self->currentFreq, self->pos));
     768:	9c 81       	ldd	r25, Y+4	; 0x04
     76a:	d8 84       	ldd	r13, Y+8	; 0x08
     76c:	8d 2d       	mov	r24, r13
     76e:	87 95       	ror	r24
     770:	88 27       	eor	r24, r24
     772:	87 95       	ror	r24
     774:	9f 77       	andi	r25, 0x7F	; 127
     776:	c9 2e       	mov	r12, r25
     778:	c8 2a       	or	r12, r24
     77a:	8d 2d       	mov	r24, r13
     77c:	86 95       	lsr	r24
     77e:	83 70       	andi	r24, 0x03	; 3
     780:	d8 2e       	mov	r13, r24
     782:	0e 85       	ldd	r16, Y+14	; 0x0e
     784:	1f 85       	ldd	r17, Y+15	; 0x0f
     786:	0f 2e       	mov	r0, r31
     788:	f4 e8       	ldi	r31, 0x84	; 132
     78a:	ef 2e       	mov	r14, r31
     78c:	f2 e0       	ldi	r31, 0x02	; 2
     78e:	ff 2e       	mov	r15, r31
     790:	f0 2d       	mov	r31, r0
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	a9 01       	movw	r20, r18
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	cb 01       	movw	r24, r22
     79e:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <async>
	if(self->currentFreq == 1){
     7a2:	8c 81       	ldd	r24, Y+4	; 0x04
     7a4:	9d 81       	ldd	r25, Y+5	; 0x05
     7a6:	01 97       	sbiw	r24, 0x01	; 1
     7a8:	89 f4       	brne	.+34     	; 0x7cc <increase+0x86>
		ASYNC(self, generator, 0);
     7aa:	c1 2c       	mov	r12, r1
     7ac:	d1 2c       	mov	r13, r1
     7ae:	0f 2e       	mov	r0, r31
     7b0:	fd e4       	ldi	r31, 0x4D	; 77
     7b2:	ef 2e       	mov	r14, r31
     7b4:	f3 e0       	ldi	r31, 0x03	; 3
     7b6:	ff 2e       	mov	r15, r31
     7b8:	f0 2d       	mov	r31, r0
     7ba:	8e 01       	movw	r16, r28
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	a9 01       	movw	r20, r18
     7c2:	60 e0       	ldi	r22, 0x00	; 0
     7c4:	70 e0       	ldi	r23, 0x00	; 0
     7c6:	cb 01       	movw	r24, r22
     7c8:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <async>
	}
	return self->currentFreq;
}
     7cc:	8c 81       	ldd	r24, Y+4	; 0x04
     7ce:	9d 81       	ldd	r25, Y+5	; 0x05
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	ff 90       	pop	r15
     7da:	ef 90       	pop	r14
     7dc:	df 90       	pop	r13
     7de:	cf 90       	pop	r12
     7e0:	08 95       	ret

000007e2 <decrease>:

int decrease(PulseGenerator *self, int unused){
     7e2:	cf 92       	push	r12
     7e4:	df 92       	push	r13
     7e6:	ef 92       	push	r14
     7e8:	ff 92       	push	r15
     7ea:	0f 93       	push	r16
     7ec:	1f 93       	push	r17
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	ec 01       	movw	r28, r24
	if (!(self->currentFreq == 0)) self->currentFreq -= 1;
     7f4:	8c 81       	ldd	r24, Y+4	; 0x04
     7f6:	9d 81       	ldd	r25, Y+5	; 0x05
     7f8:	00 97       	sbiw	r24, 0x00	; 0
     7fa:	19 f0       	breq	.+6      	; 0x802 <decrease+0x20>
     7fc:	01 97       	sbiw	r24, 0x01	; 1
     7fe:	9d 83       	std	Y+5, r25	; 0x05
     800:	8c 83       	std	Y+4, r24	; 0x04
	ASYNC(self, setLow, self->pin);
     802:	ca 84       	ldd	r12, Y+10	; 0x0a
     804:	db 84       	ldd	r13, Y+11	; 0x0b
     806:	0f 2e       	mov	r0, r31
     808:	f1 e4       	ldi	r31, 0x41	; 65
     80a:	ef 2e       	mov	r14, r31
     80c:	f3 e0       	ldi	r31, 0x03	; 3
     80e:	ff 2e       	mov	r15, r31
     810:	f0 2d       	mov	r31, r0
     812:	8e 01       	movw	r16, r28
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	a9 01       	movw	r20, r18
     81a:	60 e0       	ldi	r22, 0x00	; 0
     81c:	70 e0       	ldi	r23, 0x00	; 0
     81e:	cb 01       	movw	r24, r22
     820:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <async>
	ASYNC(self->display, printAt, PACK_PRINT(self->currentFreq, self->pos));
     824:	9c 81       	ldd	r25, Y+4	; 0x04
     826:	d8 84       	ldd	r13, Y+8	; 0x08
     828:	8d 2d       	mov	r24, r13
     82a:	87 95       	ror	r24
     82c:	88 27       	eor	r24, r24
     82e:	87 95       	ror	r24
     830:	9f 77       	andi	r25, 0x7F	; 127
     832:	c9 2e       	mov	r12, r25
     834:	c8 2a       	or	r12, r24
     836:	8d 2d       	mov	r24, r13
     838:	86 95       	lsr	r24
     83a:	83 70       	andi	r24, 0x03	; 3
     83c:	d8 2e       	mov	r13, r24
     83e:	0e 85       	ldd	r16, Y+14	; 0x0e
     840:	1f 85       	ldd	r17, Y+15	; 0x0f
     842:	0f 2e       	mov	r0, r31
     844:	f4 e8       	ldi	r31, 0x84	; 132
     846:	ef 2e       	mov	r14, r31
     848:	f2 e0       	ldi	r31, 0x02	; 2
     84a:	ff 2e       	mov	r15, r31
     84c:	f0 2d       	mov	r31, r0
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	a9 01       	movw	r20, r18
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	70 e0       	ldi	r23, 0x00	; 0
     858:	cb 01       	movw	r24, r22
     85a:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <async>
	
	return self->currentFreq;
}
     85e:	8c 81       	ldd	r24, Y+4	; 0x04
     860:	9d 81       	ldd	r25, Y+5	; 0x05
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	1f 91       	pop	r17
     868:	0f 91       	pop	r16
     86a:	ff 90       	pop	r15
     86c:	ef 90       	pop	r14
     86e:	df 90       	pop	r13
     870:	cf 90       	pop	r12
     872:	08 95       	ret

00000874 <reset>:

int reset(PulseGenerator *self, int unused){
     874:	cf 92       	push	r12
     876:	df 92       	push	r13
     878:	ef 92       	push	r14
     87a:	ff 92       	push	r15
     87c:	0f 93       	push	r16
     87e:	1f 93       	push	r17
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
     884:	ec 01       	movw	r28, r24
	if (self->currentFreq == 0){
     886:	8c 81       	ldd	r24, Y+4	; 0x04
     888:	9d 81       	ldd	r25, Y+5	; 0x05
     88a:	00 97       	sbiw	r24, 0x00	; 0
     88c:	c1 f4       	brne	.+48     	; 0x8be <reset+0x4a>
		self->currentFreq = self->lastFreq;
     88e:	8e 81       	ldd	r24, Y+6	; 0x06
     890:	9f 81       	ldd	r25, Y+7	; 0x07
     892:	9d 83       	std	Y+5, r25	; 0x05
     894:	8c 83       	std	Y+4, r24	; 0x04
		if(self->currentFreq != 0) ASYNC(self, generator, 0);
     896:	89 2b       	or	r24, r25
     898:	39 f1       	breq	.+78     	; 0x8e8 <reset+0x74>
     89a:	c1 2c       	mov	r12, r1
     89c:	d1 2c       	mov	r13, r1
     89e:	0f 2e       	mov	r0, r31
     8a0:	fd e4       	ldi	r31, 0x4D	; 77
     8a2:	ef 2e       	mov	r14, r31
     8a4:	f3 e0       	ldi	r31, 0x03	; 3
     8a6:	ff 2e       	mov	r15, r31
     8a8:	f0 2d       	mov	r31, r0
     8aa:	8e 01       	movw	r16, r28
     8ac:	20 e0       	ldi	r18, 0x00	; 0
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	a9 01       	movw	r20, r18
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	cb 01       	movw	r24, r22
     8b8:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <async>
     8bc:	15 c0       	rjmp	.+42     	; 0x8e8 <reset+0x74>
		}else{
		self->lastFreq = self->currentFreq;
     8be:	9f 83       	std	Y+7, r25	; 0x07
     8c0:	8e 83       	std	Y+6, r24	; 0x06
		self->currentFreq = 0;
     8c2:	1d 82       	std	Y+5, r1	; 0x05
     8c4:	1c 82       	std	Y+4, r1	; 0x04
		ASYNC(self, setLow, self->pin);
     8c6:	ca 84       	ldd	r12, Y+10	; 0x0a
     8c8:	db 84       	ldd	r13, Y+11	; 0x0b
     8ca:	0f 2e       	mov	r0, r31
     8cc:	f1 e4       	ldi	r31, 0x41	; 65
     8ce:	ef 2e       	mov	r14, r31
     8d0:	f3 e0       	ldi	r31, 0x03	; 3
     8d2:	ff 2e       	mov	r15, r31
     8d4:	f0 2d       	mov	r31, r0
     8d6:	8e 01       	movw	r16, r28
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	a9 01       	movw	r20, r18
     8de:	60 e0       	ldi	r22, 0x00	; 0
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	cb 01       	movw	r24, r22
     8e4:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <async>
	}
	ASYNC(self->display, printAt, PACK_PRINT(self->currentFreq, self->pos));
     8e8:	9c 81       	ldd	r25, Y+4	; 0x04
     8ea:	d8 84       	ldd	r13, Y+8	; 0x08
     8ec:	8d 2d       	mov	r24, r13
     8ee:	87 95       	ror	r24
     8f0:	88 27       	eor	r24, r24
     8f2:	87 95       	ror	r24
     8f4:	9f 77       	andi	r25, 0x7F	; 127
     8f6:	c9 2e       	mov	r12, r25
     8f8:	c8 2a       	or	r12, r24
     8fa:	8d 2d       	mov	r24, r13
     8fc:	86 95       	lsr	r24
     8fe:	83 70       	andi	r24, 0x03	; 3
     900:	d8 2e       	mov	r13, r24
     902:	0e 85       	ldd	r16, Y+14	; 0x0e
     904:	1f 85       	ldd	r17, Y+15	; 0x0f
     906:	0f 2e       	mov	r0, r31
     908:	f4 e8       	ldi	r31, 0x84	; 132
     90a:	ef 2e       	mov	r14, r31
     90c:	f2 e0       	ldi	r31, 0x02	; 2
     90e:	ff 2e       	mov	r15, r31
     910:	f0 2d       	mov	r31, r0
     912:	20 e0       	ldi	r18, 0x00	; 0
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	a9 01       	movw	r20, r18
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	cb 01       	movw	r24, r22
     91e:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <async>
	
	return self->currentFreq;
}
     922:	8c 81       	ldd	r24, Y+4	; 0x04
     924:	9d 81       	ldd	r25, Y+5	; 0x05
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	1f 91       	pop	r17
     92c:	0f 91       	pop	r16
     92e:	ff 90       	pop	r15
     930:	ef 90       	pop	r14
     932:	df 90       	pop	r13
     934:	cf 90       	pop	r12
     936:	08 95       	ret

00000938 <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	00 d0       	rcall	.+0      	; 0x93e <initialize+0x6>
     93e:	00 d0       	rcall	.+0      	; 0x940 <initialize+0x8>
     940:	cd b7       	in	r28, 0x3d	; 61
     942:	de b7       	in	r29, 0x3e	; 62
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	18 c0       	rjmp	.+48     	; 0x97a <initialize+0x42>
     94a:	ac 01       	movw	r20, r24
     94c:	4f 5f       	subi	r20, 0xFF	; 255
     94e:	5f 4f       	sbci	r21, 0xFF	; 255
     950:	9a 01       	movw	r18, r20
     952:	22 95       	swap	r18
     954:	32 95       	swap	r19
     956:	30 7f       	andi	r19, 0xF0	; 240
     958:	32 27       	eor	r19, r18
     95a:	20 7f       	andi	r18, 0xF0	; 240
     95c:	32 27       	eor	r19, r18
     95e:	25 5e       	subi	r18, 0xE5	; 229
     960:	3d 4f       	sbci	r19, 0xFD	; 253
     962:	82 95       	swap	r24
     964:	92 95       	swap	r25
     966:	90 7f       	andi	r25, 0xF0	; 240
     968:	98 27       	eor	r25, r24
     96a:	80 7f       	andi	r24, 0xF0	; 240
     96c:	98 27       	eor	r25, r24
     96e:	fc 01       	movw	r30, r24
     970:	e5 5e       	subi	r30, 0xE5	; 229
     972:	fd 4f       	sbci	r31, 0xFD	; 253
     974:	31 83       	std	Z+1, r19	; 0x01
     976:	20 83       	st	Z, r18
     978:	ca 01       	movw	r24, r20
     97a:	8e 30       	cpi	r24, 0x0E	; 14
     97c:	91 05       	cpc	r25, r1
     97e:	2c f3       	brlt	.-54     	; 0x94a <initialize+0x12>
     980:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <messages+0xe1>
     984:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <messages+0xe0>
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	15 c0       	rjmp	.+42     	; 0x9b8 <initialize+0x80>
     98e:	ac 01       	movw	r20, r24
     990:	4f 5f       	subi	r20, 0xFF	; 255
     992:	5f 4f       	sbci	r21, 0xFF	; 255
     994:	6d e1       	ldi	r22, 0x1D	; 29
     996:	64 9f       	mul	r22, r20
     998:	90 01       	movw	r18, r0
     99a:	65 9f       	mul	r22, r21
     99c:	30 0d       	add	r19, r0
     99e:	11 24       	eor	r1, r1
     9a0:	2a 59       	subi	r18, 0x9A	; 154
     9a2:	3e 4f       	sbci	r19, 0xFE	; 254
     9a4:	68 9f       	mul	r22, r24
     9a6:	f0 01       	movw	r30, r0
     9a8:	69 9f       	mul	r22, r25
     9aa:	f0 0d       	add	r31, r0
     9ac:	11 24       	eor	r1, r1
     9ae:	ea 59       	subi	r30, 0x9A	; 154
     9b0:	fe 4f       	sbci	r31, 0xFE	; 254
     9b2:	31 83       	std	Z+1, r19	; 0x01
     9b4:	20 83       	st	Z, r18
     9b6:	ca 01       	movw	r24, r20
     9b8:	83 30       	cpi	r24, 0x03	; 3
     9ba:	91 05       	cpc	r25, r1
     9bc:	44 f3       	brlt	.-48     	; 0x98e <initialize+0x56>
     9be:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <threads+0x58>
     9c2:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <threads+0x57>
     9c6:	1a 82       	std	Y+2, r1	; 0x02
     9c8:	19 82       	std	Y+1, r1	; 0x01
     9ca:	32 c0       	rjmp	.+100    	; 0xa30 <initialize+0xf8>
     9cc:	2d e1       	ldi	r18, 0x1D	; 29
     9ce:	49 81       	ldd	r20, Y+1	; 0x01
     9d0:	5a 81       	ldd	r21, Y+2	; 0x02
     9d2:	24 9f       	mul	r18, r20
     9d4:	c0 01       	movw	r24, r0
     9d6:	25 9f       	mul	r18, r21
     9d8:	90 0d       	add	r25, r0
     9da:	11 24       	eor	r1, r1
     9dc:	fc 01       	movw	r30, r24
     9de:	e4 59       	subi	r30, 0x94	; 148
     9e0:	fe 4f       	sbci	r31, 0xFE	; 254
     9e2:	fc 83       	std	Y+4, r31	; 0x04
     9e4:	eb 83       	std	Y+3, r30	; 0x03
     9e6:	cf 01       	movw	r24, r30
     9e8:	0e 94 40 11 	call	0x2280	; 0x2280 <setjmp>
     9ec:	20 e6       	ldi	r18, 0x60	; 96
     9ee:	49 81       	ldd	r20, Y+1	; 0x01
     9f0:	5a 81       	ldd	r21, Y+2	; 0x02
     9f2:	24 9f       	mul	r18, r20
     9f4:	c0 01       	movw	r24, r0
     9f6:	25 9f       	mul	r18, r21
     9f8:	90 0d       	add	r25, r0
     9fa:	11 24       	eor	r1, r1
     9fc:	89 59       	subi	r24, 0x99	; 153
     9fe:	9c 4f       	sbci	r25, 0xFC	; 252
     a00:	eb 81       	ldd	r30, Y+3	; 0x03
     a02:	fc 81       	ldd	r31, Y+4	; 0x04
     a04:	91 8b       	std	Z+17, r25	; 0x11
     a06:	80 8b       	std	Z+16, r24	; 0x10
     a08:	93 8b       	std	Z+19, r25	; 0x13
     a0a:	82 8b       	std	Z+18, r24	; 0x12
     a0c:	88 e7       	ldi	r24, 0x78	; 120
     a0e:	90 e1       	ldi	r25, 0x10	; 16
     a10:	96 8b       	std	Z+22, r25	; 0x16
     a12:	85 8b       	std	Z+21, r24	; 0x15
     a14:	8d e1       	ldi	r24, 0x1D	; 29
     a16:	84 9f       	mul	r24, r20
     a18:	f0 01       	movw	r30, r0
     a1a:	85 9f       	mul	r24, r21
     a1c:	f0 0d       	add	r31, r0
     a1e:	11 24       	eor	r1, r1
     a20:	ea 59       	subi	r30, 0x9A	; 154
     a22:	fe 4f       	sbci	r31, 0xFE	; 254
     a24:	15 82       	std	Z+5, r1	; 0x05
     a26:	14 82       	std	Z+4, r1	; 0x04
     a28:	4f 5f       	subi	r20, 0xFF	; 255
     a2a:	5f 4f       	sbci	r21, 0xFF	; 255
     a2c:	5a 83       	std	Y+2, r21	; 0x02
     a2e:	49 83       	std	Y+1, r20	; 0x01
     a30:	29 81       	ldd	r18, Y+1	; 0x01
     a32:	3a 81       	ldd	r19, Y+2	; 0x02
     a34:	24 30       	cpi	r18, 0x04	; 4
     a36:	31 05       	cpc	r19, r1
     a38:	4c f2       	brlt	.-110    	; 0x9cc <initialize+0x94>
     a3a:	ee ef       	ldi	r30, 0xFE	; 254
     a3c:	f1 e0       	ldi	r31, 0x01	; 1
     a3e:	11 82       	std	Z+1, r1	; 0x01
     a40:	10 82       	st	Z, r1
     a42:	15 82       	std	Z+5, r1	; 0x05
     a44:	14 82       	std	Z+4, r1	; 0x04
     a46:	13 82       	std	Z+3, r1	; 0x03
     a48:	12 82       	std	Z+2, r1	; 0x02
     a4a:	e1 e6       	ldi	r30, 0x61	; 97
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	80 e8       	ldi	r24, 0x80	; 128
     a50:	80 83       	st	Z, r24
     a52:	10 82       	st	Z, r1
     a54:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a58:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a5c:	84 e0       	ldi	r24, 0x04	; 4
     a5e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     a68:	0f 90       	pop	r0
     a6a:	0f 90       	pop	r0
     a6c:	0f 90       	pop	r0
     a6e:	0f 90       	pop	r0
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	08 95       	ret

00000a76 <dispatch>:
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	00 d0       	rcall	.+0      	; 0xa7c <dispatch+0x6>
     a7c:	cd b7       	in	r28, 0x3d	; 61
     a7e:	de b7       	in	r29, 0x3e	; 62
     a80:	9a 83       	std	Y+2, r25	; 0x02
     a82:	89 83       	std	Y+1, r24	; 0x01
     a84:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     a88:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     a8c:	06 96       	adiw	r24, 0x06	; 6
     a8e:	0e 94 40 11 	call	0x2280	; 0x2280 <setjmp>
     a92:	89 2b       	or	r24, r25
     a94:	59 f4       	brne	.+22     	; 0xaac <dispatch+0x36>
     a96:	89 81       	ldd	r24, Y+1	; 0x01
     a98:	9a 81       	ldd	r25, Y+2	; 0x02
     a9a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     a9e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     aa2:	61 e0       	ldi	r22, 0x01	; 1
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	06 96       	adiw	r24, 0x06	; 6
     aa8:	0e 94 60 11 	call	0x22c0	; 0x22c0 <longjmp>
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	08 95       	ret

00000ab6 <enqueueByDeadline>:
     ab6:	0f 93       	push	r16
     ab8:	1f 93       	push	r17
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
     abe:	dc 01       	movw	r26, r24
     ac0:	cb 01       	movw	r24, r22
     ac2:	eb 01       	movw	r28, r22
     ac4:	e8 81       	ld	r30, Y
     ac6:	f9 81       	ldd	r31, Y+1	; 0x01
     ac8:	c0 e0       	ldi	r28, 0x00	; 0
     aca:	d0 e0       	ldi	r29, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <enqueueByDeadline+0x20>
     ace:	ef 01       	movw	r28, r30
     ad0:	01 90       	ld	r0, Z+
     ad2:	f0 81       	ld	r31, Z
     ad4:	e0 2d       	mov	r30, r0
     ad6:	30 97       	sbiw	r30, 0x00	; 0
     ad8:	79 f0       	breq	.+30     	; 0xaf8 <enqueueByDeadline+0x42>
     ada:	06 81       	ldd	r16, Z+6	; 0x06
     adc:	17 81       	ldd	r17, Z+7	; 0x07
     ade:	20 85       	ldd	r18, Z+8	; 0x08
     ae0:	31 85       	ldd	r19, Z+9	; 0x09
     ae2:	16 96       	adiw	r26, 0x06	; 6
     ae4:	4d 91       	ld	r20, X+
     ae6:	5d 91       	ld	r21, X+
     ae8:	6d 91       	ld	r22, X+
     aea:	7c 91       	ld	r23, X
     aec:	19 97       	sbiw	r26, 0x09	; 9
     aee:	40 17       	cp	r20, r16
     af0:	51 07       	cpc	r21, r17
     af2:	62 07       	cpc	r22, r18
     af4:	73 07       	cpc	r23, r19
     af6:	5c f7       	brge	.-42     	; 0xace <enqueueByDeadline+0x18>
     af8:	11 96       	adiw	r26, 0x01	; 1
     afa:	fc 93       	st	X, r31
     afc:	ee 93       	st	-X, r30
     afe:	20 97       	sbiw	r28, 0x00	; 0
     b00:	21 f4       	brne	.+8      	; 0xb0a <enqueueByDeadline+0x54>
     b02:	fc 01       	movw	r30, r24
     b04:	b1 83       	std	Z+1, r27	; 0x01
     b06:	a0 83       	st	Z, r26
     b08:	02 c0       	rjmp	.+4      	; 0xb0e <enqueueByDeadline+0x58>
     b0a:	b9 83       	std	Y+1, r27	; 0x01
     b0c:	a8 83       	st	Y, r26
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	1f 91       	pop	r17
     b14:	0f 91       	pop	r16
     b16:	08 95       	ret

00000b18 <enqueueByBaseline>:
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	dc 01       	movw	r26, r24
     b22:	cb 01       	movw	r24, r22
     b24:	eb 01       	movw	r28, r22
     b26:	e8 81       	ld	r30, Y
     b28:	f9 81       	ldd	r31, Y+1	; 0x01
     b2a:	c0 e0       	ldi	r28, 0x00	; 0
     b2c:	d0 e0       	ldi	r29, 0x00	; 0
     b2e:	04 c0       	rjmp	.+8      	; 0xb38 <enqueueByBaseline+0x20>
     b30:	ef 01       	movw	r28, r30
     b32:	01 90       	ld	r0, Z+
     b34:	f0 81       	ld	r31, Z
     b36:	e0 2d       	mov	r30, r0
     b38:	30 97       	sbiw	r30, 0x00	; 0
     b3a:	79 f0       	breq	.+30     	; 0xb5a <enqueueByBaseline+0x42>
     b3c:	02 81       	ldd	r16, Z+2	; 0x02
     b3e:	13 81       	ldd	r17, Z+3	; 0x03
     b40:	24 81       	ldd	r18, Z+4	; 0x04
     b42:	35 81       	ldd	r19, Z+5	; 0x05
     b44:	12 96       	adiw	r26, 0x02	; 2
     b46:	4d 91       	ld	r20, X+
     b48:	5d 91       	ld	r21, X+
     b4a:	6d 91       	ld	r22, X+
     b4c:	7c 91       	ld	r23, X
     b4e:	15 97       	sbiw	r26, 0x05	; 5
     b50:	40 17       	cp	r20, r16
     b52:	51 07       	cpc	r21, r17
     b54:	62 07       	cpc	r22, r18
     b56:	73 07       	cpc	r23, r19
     b58:	5c f7       	brge	.-42     	; 0xb30 <enqueueByBaseline+0x18>
     b5a:	11 96       	adiw	r26, 0x01	; 1
     b5c:	fc 93       	st	X, r31
     b5e:	ee 93       	st	-X, r30
     b60:	20 97       	sbiw	r28, 0x00	; 0
     b62:	21 f4       	brne	.+8      	; 0xb6c <enqueueByBaseline+0x54>
     b64:	fc 01       	movw	r30, r24
     b66:	b1 83       	std	Z+1, r27	; 0x01
     b68:	a0 83       	st	Z, r26
     b6a:	02 c0       	rjmp	.+4      	; 0xb70 <enqueueByBaseline+0x58>
     b6c:	b9 83       	std	Y+1, r27	; 0x01
     b6e:	a8 83       	st	Y, r26
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	1f 91       	pop	r17
     b76:	0f 91       	pop	r16
     b78:	08 95       	ret

00000b7a <dequeue>:
     b7a:	dc 01       	movw	r26, r24
     b7c:	ed 91       	ld	r30, X+
     b7e:	fc 91       	ld	r31, X
     b80:	11 97       	sbiw	r26, 0x01	; 1
     b82:	30 97       	sbiw	r30, 0x00	; 0
     b84:	59 f4       	brne	.+22     	; 0xb9c <dequeue+0x22>
     b86:	8f ef       	ldi	r24, 0xFF	; 255
     b88:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     b8c:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     b90:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	83 bf       	out	0x33, r24	; 51
     b98:	88 95       	sleep
     b9a:	fc cf       	rjmp	.-8      	; 0xb94 <dequeue+0x1a>
     b9c:	20 81       	ld	r18, Z
     b9e:	31 81       	ldd	r19, Z+1	; 0x01
     ba0:	2d 93       	st	X+, r18
     ba2:	3c 93       	st	X, r19
     ba4:	cf 01       	movw	r24, r30
     ba6:	08 95       	ret

00000ba8 <insert>:
     ba8:	fb 01       	movw	r30, r22
     baa:	20 81       	ld	r18, Z
     bac:	31 81       	ldd	r19, Z+1	; 0x01
     bae:	fc 01       	movw	r30, r24
     bb0:	31 83       	std	Z+1, r19	; 0x01
     bb2:	20 83       	st	Z, r18
     bb4:	fb 01       	movw	r30, r22
     bb6:	91 83       	std	Z+1, r25	; 0x01
     bb8:	80 83       	st	Z, r24
     bba:	08 95       	ret

00000bbc <push>:
     bbc:	fb 01       	movw	r30, r22
     bbe:	20 81       	ld	r18, Z
     bc0:	31 81       	ldd	r19, Z+1	; 0x01
     bc2:	fc 01       	movw	r30, r24
     bc4:	31 83       	std	Z+1, r19	; 0x01
     bc6:	20 83       	st	Z, r18
     bc8:	fb 01       	movw	r30, r22
     bca:	91 83       	std	Z+1, r25	; 0x01
     bcc:	80 83       	st	Z, r24
     bce:	08 95       	ret

00000bd0 <pop>:
     bd0:	dc 01       	movw	r26, r24
     bd2:	ed 91       	ld	r30, X+
     bd4:	fc 91       	ld	r31, X
     bd6:	11 97       	sbiw	r26, 0x01	; 1
     bd8:	20 81       	ld	r18, Z
     bda:	31 81       	ldd	r19, Z+1	; 0x01
     bdc:	2d 93       	st	X+, r18
     bde:	3c 93       	st	X, r19
     be0:	cf 01       	movw	r24, r30
     be2:	08 95       	ret

00000be4 <schedule>:
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
     be8:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
     bec:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
     bf0:	c2 81       	ldd	r28, Z+2	; 0x02
     bf2:	d3 81       	ldd	r29, Z+3	; 0x03
     bf4:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <msgQ>
     bf8:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <msgQ+0x1>
     bfc:	30 97       	sbiw	r30, 0x00	; 0
     bfe:	19 f1       	breq	.+70     	; 0xc46 <schedule+0x62>
     c00:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
     c04:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
     c08:	89 2b       	or	r24, r25
     c0a:	e9 f0       	breq	.+58     	; 0xc46 <schedule+0x62>
     c0c:	20 97       	sbiw	r28, 0x00	; 0
     c0e:	69 f0       	breq	.+26     	; 0xc2a <schedule+0x46>
     c10:	86 81       	ldd	r24, Z+6	; 0x06
     c12:	97 81       	ldd	r25, Z+7	; 0x07
     c14:	a0 85       	ldd	r26, Z+8	; 0x08
     c16:	b1 85       	ldd	r27, Z+9	; 0x09
     c18:	4e 81       	ldd	r20, Y+6	; 0x06
     c1a:	5f 81       	ldd	r21, Y+7	; 0x07
     c1c:	68 85       	ldd	r22, Y+8	; 0x08
     c1e:	79 85       	ldd	r23, Y+9	; 0x09
     c20:	84 1b       	sub	r24, r20
     c22:	95 0b       	sbc	r25, r21
     c24:	a6 0b       	sbc	r26, r22
     c26:	b7 0b       	sbc	r27, r23
     c28:	72 f4       	brpl	.+28     	; 0xc46 <schedule+0x62>
     c2a:	84 e0       	ldi	r24, 0x04	; 4
     c2c:	91 e0       	ldi	r25, 0x01	; 1
     c2e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <pop>
     c32:	62 e0       	ldi	r22, 0x02	; 2
     c34:	71 e0       	ldi	r23, 0x01	; 1
     c36:	0e 94 de 05 	call	0xbbc	; 0xbbc <push>
     c3a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <activeStack>
     c3e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <activeStack+0x1>
     c42:	0e 94 3b 05 	call	0xa76	; 0xa76 <dispatch>
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	08 95       	ret

00000c4c <__vector_1>:
     c4c:	1f 92       	push	r1
     c4e:	0f 92       	push	r0
     c50:	0f b6       	in	r0, 0x3f	; 63
     c52:	0f 92       	push	r0
     c54:	11 24       	eor	r1, r1
     c56:	0f 93       	push	r16
     c58:	1f 93       	push	r17
     c5a:	2f 93       	push	r18
     c5c:	3f 93       	push	r19
     c5e:	4f 93       	push	r20
     c60:	5f 93       	push	r21
     c62:	6f 93       	push	r22
     c64:	7f 93       	push	r23
     c66:	8f 93       	push	r24
     c68:	9f 93       	push	r25
     c6a:	af 93       	push	r26
     c6c:	bf 93       	push	r27
     c6e:	ef 93       	push	r30
     c70:	ff 93       	push	r31
     c72:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
     c76:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
     c7a:	ac 01       	movw	r20, r24
     c7c:	09 2e       	mov	r0, r25
     c7e:	00 0c       	add	r0, r0
     c80:	66 0b       	sbc	r22, r22
     c82:	77 0b       	sbc	r23, r23
     c84:	9a 01       	movw	r18, r20
     c86:	11 27       	eor	r17, r17
     c88:	00 27       	eor	r16, r16
     c8a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c8e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c92:	60 e0       	ldi	r22, 0x00	; 0
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	40 2b       	or	r20, r16
     c98:	51 2b       	or	r21, r17
     c9a:	62 2b       	or	r22, r18
     c9c:	73 2b       	or	r23, r19
     c9e:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
     ca2:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
     ca6:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
     caa:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
     cae:	b0 9b       	sbis	0x16, 0	; 22
     cb0:	1a c0       	rjmp	.+52     	; 0xce6 <__vector_1+0x9a>
     cb2:	01 96       	adiw	r24, 0x01	; 1
     cb4:	09 2e       	mov	r0, r25
     cb6:	00 0c       	add	r0, r0
     cb8:	aa 0b       	sbc	r26, r26
     cba:	bb 0b       	sbc	r27, r27
     cbc:	bc 01       	movw	r22, r24
     cbe:	55 27       	eor	r21, r21
     cc0:	44 27       	eor	r20, r20
     cc2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cc6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cca:	a0 e0       	ldi	r26, 0x00	; 0
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	84 2b       	or	r24, r20
     cd0:	95 2b       	or	r25, r21
     cd2:	a6 2b       	or	r26, r22
     cd4:	b7 2b       	or	r27, r23
     cd6:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     cda:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     cde:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     ce2:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     ce6:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <mtable>
     cea:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <mtable+0x1>
     cee:	30 97       	sbiw	r30, 0x00	; 0
     cf0:	39 f0       	breq	.+14     	; 0xd00 <__vector_1+0xb4>
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <otable>
     cfa:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <otable+0x1>
     cfe:	09 95       	icall
     d00:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <schedule>
     d04:	ff 91       	pop	r31
     d06:	ef 91       	pop	r30
     d08:	bf 91       	pop	r27
     d0a:	af 91       	pop	r26
     d0c:	9f 91       	pop	r25
     d0e:	8f 91       	pop	r24
     d10:	7f 91       	pop	r23
     d12:	6f 91       	pop	r22
     d14:	5f 91       	pop	r21
     d16:	4f 91       	pop	r20
     d18:	3f 91       	pop	r19
     d1a:	2f 91       	pop	r18
     d1c:	1f 91       	pop	r17
     d1e:	0f 91       	pop	r16
     d20:	0f 90       	pop	r0
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	0f 90       	pop	r0
     d26:	1f 90       	pop	r1
     d28:	18 95       	reti

00000d2a <__vector_2>:
     d2a:	1f 92       	push	r1
     d2c:	0f 92       	push	r0
     d2e:	0f b6       	in	r0, 0x3f	; 63
     d30:	0f 92       	push	r0
     d32:	11 24       	eor	r1, r1
     d34:	0f 93       	push	r16
     d36:	1f 93       	push	r17
     d38:	2f 93       	push	r18
     d3a:	3f 93       	push	r19
     d3c:	4f 93       	push	r20
     d3e:	5f 93       	push	r21
     d40:	6f 93       	push	r22
     d42:	7f 93       	push	r23
     d44:	8f 93       	push	r24
     d46:	9f 93       	push	r25
     d48:	af 93       	push	r26
     d4a:	bf 93       	push	r27
     d4c:	ef 93       	push	r30
     d4e:	ff 93       	push	r31
     d50:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
     d54:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
     d58:	ac 01       	movw	r20, r24
     d5a:	09 2e       	mov	r0, r25
     d5c:	00 0c       	add	r0, r0
     d5e:	66 0b       	sbc	r22, r22
     d60:	77 0b       	sbc	r23, r23
     d62:	9a 01       	movw	r18, r20
     d64:	11 27       	eor	r17, r17
     d66:	00 27       	eor	r16, r16
     d68:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d6c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d70:	60 e0       	ldi	r22, 0x00	; 0
     d72:	70 e0       	ldi	r23, 0x00	; 0
     d74:	40 2b       	or	r20, r16
     d76:	51 2b       	or	r21, r17
     d78:	62 2b       	or	r22, r18
     d7a:	73 2b       	or	r23, r19
     d7c:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
     d80:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
     d84:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
     d88:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
     d8c:	b0 9b       	sbis	0x16, 0	; 22
     d8e:	1a c0       	rjmp	.+52     	; 0xdc4 <__vector_2+0x9a>
     d90:	01 96       	adiw	r24, 0x01	; 1
     d92:	09 2e       	mov	r0, r25
     d94:	00 0c       	add	r0, r0
     d96:	aa 0b       	sbc	r26, r26
     d98:	bb 0b       	sbc	r27, r27
     d9a:	bc 01       	movw	r22, r24
     d9c:	55 27       	eor	r21, r21
     d9e:	44 27       	eor	r20, r20
     da0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     da4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     da8:	a0 e0       	ldi	r26, 0x00	; 0
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	84 2b       	or	r24, r20
     dae:	95 2b       	or	r25, r21
     db0:	a6 2b       	or	r26, r22
     db2:	b7 2b       	or	r27, r23
     db4:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     db8:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     dbc:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     dc0:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     dc4:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <mtable+0x2>
     dc8:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <mtable+0x3>
     dcc:	30 97       	sbiw	r30, 0x00	; 0
     dce:	39 f0       	breq	.+14     	; 0xdde <__vector_2+0xb4>
     dd0:	61 e0       	ldi	r22, 0x01	; 1
     dd2:	70 e0       	ldi	r23, 0x00	; 0
     dd4:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <otable+0x2>
     dd8:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <otable+0x3>
     ddc:	09 95       	icall
     dde:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <schedule>
     de2:	ff 91       	pop	r31
     de4:	ef 91       	pop	r30
     de6:	bf 91       	pop	r27
     de8:	af 91       	pop	r26
     dea:	9f 91       	pop	r25
     dec:	8f 91       	pop	r24
     dee:	7f 91       	pop	r23
     df0:	6f 91       	pop	r22
     df2:	5f 91       	pop	r21
     df4:	4f 91       	pop	r20
     df6:	3f 91       	pop	r19
     df8:	2f 91       	pop	r18
     dfa:	1f 91       	pop	r17
     dfc:	0f 91       	pop	r16
     dfe:	0f 90       	pop	r0
     e00:	0f be       	out	0x3f, r0	; 63
     e02:	0f 90       	pop	r0
     e04:	1f 90       	pop	r1
     e06:	18 95       	reti

00000e08 <__vector_3>:
     e08:	1f 92       	push	r1
     e0a:	0f 92       	push	r0
     e0c:	0f b6       	in	r0, 0x3f	; 63
     e0e:	0f 92       	push	r0
     e10:	11 24       	eor	r1, r1
     e12:	0f 93       	push	r16
     e14:	1f 93       	push	r17
     e16:	2f 93       	push	r18
     e18:	3f 93       	push	r19
     e1a:	4f 93       	push	r20
     e1c:	5f 93       	push	r21
     e1e:	6f 93       	push	r22
     e20:	7f 93       	push	r23
     e22:	8f 93       	push	r24
     e24:	9f 93       	push	r25
     e26:	af 93       	push	r26
     e28:	bf 93       	push	r27
     e2a:	ef 93       	push	r30
     e2c:	ff 93       	push	r31
     e2e:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
     e32:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
     e36:	ac 01       	movw	r20, r24
     e38:	09 2e       	mov	r0, r25
     e3a:	00 0c       	add	r0, r0
     e3c:	66 0b       	sbc	r22, r22
     e3e:	77 0b       	sbc	r23, r23
     e40:	9a 01       	movw	r18, r20
     e42:	11 27       	eor	r17, r17
     e44:	00 27       	eor	r16, r16
     e46:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e4a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	40 2b       	or	r20, r16
     e54:	51 2b       	or	r21, r17
     e56:	62 2b       	or	r22, r18
     e58:	73 2b       	or	r23, r19
     e5a:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
     e5e:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
     e62:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
     e66:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
     e6a:	b0 9b       	sbis	0x16, 0	; 22
     e6c:	1a c0       	rjmp	.+52     	; 0xea2 <__vector_3+0x9a>
     e6e:	01 96       	adiw	r24, 0x01	; 1
     e70:	09 2e       	mov	r0, r25
     e72:	00 0c       	add	r0, r0
     e74:	aa 0b       	sbc	r26, r26
     e76:	bb 0b       	sbc	r27, r27
     e78:	bc 01       	movw	r22, r24
     e7a:	55 27       	eor	r21, r21
     e7c:	44 27       	eor	r20, r20
     e7e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e82:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e86:	a0 e0       	ldi	r26, 0x00	; 0
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	84 2b       	or	r24, r20
     e8c:	95 2b       	or	r25, r21
     e8e:	a6 2b       	or	r26, r22
     e90:	b7 2b       	or	r27, r23
     e92:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     e96:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     e9a:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     e9e:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     ea2:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <mtable+0x4>
     ea6:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <mtable+0x5>
     eaa:	30 97       	sbiw	r30, 0x00	; 0
     eac:	39 f0       	breq	.+14     	; 0xebc <__vector_3+0xb4>
     eae:	62 e0       	ldi	r22, 0x02	; 2
     eb0:	70 e0       	ldi	r23, 0x00	; 0
     eb2:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <otable+0x4>
     eb6:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <otable+0x5>
     eba:	09 95       	icall
     ebc:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <schedule>
     ec0:	ff 91       	pop	r31
     ec2:	ef 91       	pop	r30
     ec4:	bf 91       	pop	r27
     ec6:	af 91       	pop	r26
     ec8:	9f 91       	pop	r25
     eca:	8f 91       	pop	r24
     ecc:	7f 91       	pop	r23
     ece:	6f 91       	pop	r22
     ed0:	5f 91       	pop	r21
     ed2:	4f 91       	pop	r20
     ed4:	3f 91       	pop	r19
     ed6:	2f 91       	pop	r18
     ed8:	1f 91       	pop	r17
     eda:	0f 91       	pop	r16
     edc:	0f 90       	pop	r0
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	0f 90       	pop	r0
     ee2:	1f 90       	pop	r1
     ee4:	18 95       	reti

00000ee6 <__vector_4>:
     ee6:	1f 92       	push	r1
     ee8:	0f 92       	push	r0
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	0f 92       	push	r0
     eee:	11 24       	eor	r1, r1
     ef0:	0f 93       	push	r16
     ef2:	1f 93       	push	r17
     ef4:	2f 93       	push	r18
     ef6:	3f 93       	push	r19
     ef8:	4f 93       	push	r20
     efa:	5f 93       	push	r21
     efc:	6f 93       	push	r22
     efe:	7f 93       	push	r23
     f00:	8f 93       	push	r24
     f02:	9f 93       	push	r25
     f04:	af 93       	push	r26
     f06:	bf 93       	push	r27
     f08:	ef 93       	push	r30
     f0a:	ff 93       	push	r31
     f0c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
     f10:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
     f14:	ac 01       	movw	r20, r24
     f16:	09 2e       	mov	r0, r25
     f18:	00 0c       	add	r0, r0
     f1a:	66 0b       	sbc	r22, r22
     f1c:	77 0b       	sbc	r23, r23
     f1e:	9a 01       	movw	r18, r20
     f20:	11 27       	eor	r17, r17
     f22:	00 27       	eor	r16, r16
     f24:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f28:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f2c:	60 e0       	ldi	r22, 0x00	; 0
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	40 2b       	or	r20, r16
     f32:	51 2b       	or	r21, r17
     f34:	62 2b       	or	r22, r18
     f36:	73 2b       	or	r23, r19
     f38:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
     f3c:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
     f40:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
     f44:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
     f48:	b0 9b       	sbis	0x16, 0	; 22
     f4a:	1a c0       	rjmp	.+52     	; 0xf80 <__vector_4+0x9a>
     f4c:	01 96       	adiw	r24, 0x01	; 1
     f4e:	09 2e       	mov	r0, r25
     f50:	00 0c       	add	r0, r0
     f52:	aa 0b       	sbc	r26, r26
     f54:	bb 0b       	sbc	r27, r27
     f56:	bc 01       	movw	r22, r24
     f58:	55 27       	eor	r21, r21
     f5a:	44 27       	eor	r20, r20
     f5c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f60:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f64:	a0 e0       	ldi	r26, 0x00	; 0
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	84 2b       	or	r24, r20
     f6a:	95 2b       	or	r25, r21
     f6c:	a6 2b       	or	r26, r22
     f6e:	b7 2b       	or	r27, r23
     f70:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     f74:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     f78:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     f7c:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     f80:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <mtable+0x6>
     f84:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <mtable+0x7>
     f88:	30 97       	sbiw	r30, 0x00	; 0
     f8a:	39 f0       	breq	.+14     	; 0xf9a <__vector_4+0xb4>
     f8c:	63 e0       	ldi	r22, 0x03	; 3
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <otable+0x6>
     f94:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <otable+0x7>
     f98:	09 95       	icall
     f9a:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <schedule>
     f9e:	ff 91       	pop	r31
     fa0:	ef 91       	pop	r30
     fa2:	bf 91       	pop	r27
     fa4:	af 91       	pop	r26
     fa6:	9f 91       	pop	r25
     fa8:	8f 91       	pop	r24
     faa:	7f 91       	pop	r23
     fac:	6f 91       	pop	r22
     fae:	5f 91       	pop	r21
     fb0:	4f 91       	pop	r20
     fb2:	3f 91       	pop	r19
     fb4:	2f 91       	pop	r18
     fb6:	1f 91       	pop	r17
     fb8:	0f 91       	pop	r16
     fba:	0f 90       	pop	r0
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	0f 90       	pop	r0
     fc0:	1f 90       	pop	r1
     fc2:	18 95       	reti

00000fc4 <__vector_5>:
     fc4:	1f 92       	push	r1
     fc6:	0f 92       	push	r0
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	0f 92       	push	r0
     fcc:	11 24       	eor	r1, r1
     fce:	0f 93       	push	r16
     fd0:	1f 93       	push	r17
     fd2:	2f 93       	push	r18
     fd4:	3f 93       	push	r19
     fd6:	4f 93       	push	r20
     fd8:	5f 93       	push	r21
     fda:	6f 93       	push	r22
     fdc:	7f 93       	push	r23
     fde:	8f 93       	push	r24
     fe0:	9f 93       	push	r25
     fe2:	af 93       	push	r26
     fe4:	bf 93       	push	r27
     fe6:	ef 93       	push	r30
     fe8:	ff 93       	push	r31
     fea:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
     fee:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
     ff2:	ac 01       	movw	r20, r24
     ff4:	09 2e       	mov	r0, r25
     ff6:	00 0c       	add	r0, r0
     ff8:	66 0b       	sbc	r22, r22
     ffa:	77 0b       	sbc	r23, r23
     ffc:	9a 01       	movw	r18, r20
     ffe:	11 27       	eor	r17, r17
    1000:	00 27       	eor	r16, r16
    1002:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1006:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    100a:	60 e0       	ldi	r22, 0x00	; 0
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	40 2b       	or	r20, r16
    1010:	51 2b       	or	r21, r17
    1012:	62 2b       	or	r22, r18
    1014:	73 2b       	or	r23, r19
    1016:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    101a:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    101e:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    1022:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    1026:	b0 9b       	sbis	0x16, 0	; 22
    1028:	1a c0       	rjmp	.+52     	; 0x105e <__vector_5+0x9a>
    102a:	01 96       	adiw	r24, 0x01	; 1
    102c:	09 2e       	mov	r0, r25
    102e:	00 0c       	add	r0, r0
    1030:	aa 0b       	sbc	r26, r26
    1032:	bb 0b       	sbc	r27, r27
    1034:	bc 01       	movw	r22, r24
    1036:	55 27       	eor	r21, r21
    1038:	44 27       	eor	r20, r20
    103a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    103e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1042:	a0 e0       	ldi	r26, 0x00	; 0
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	84 2b       	or	r24, r20
    1048:	95 2b       	or	r25, r21
    104a:	a6 2b       	or	r26, r22
    104c:	b7 2b       	or	r27, r23
    104e:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1052:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1056:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    105a:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    105e:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <mtable+0x8>
    1062:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <mtable+0x9>
    1066:	30 97       	sbiw	r30, 0x00	; 0
    1068:	39 f0       	breq	.+14     	; 0x1078 <__vector_5+0xb4>
    106a:	64 e0       	ldi	r22, 0x04	; 4
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <otable+0x8>
    1072:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <otable+0x9>
    1076:	09 95       	icall
    1078:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <schedule>
    107c:	ff 91       	pop	r31
    107e:	ef 91       	pop	r30
    1080:	bf 91       	pop	r27
    1082:	af 91       	pop	r26
    1084:	9f 91       	pop	r25
    1086:	8f 91       	pop	r24
    1088:	7f 91       	pop	r23
    108a:	6f 91       	pop	r22
    108c:	5f 91       	pop	r21
    108e:	4f 91       	pop	r20
    1090:	3f 91       	pop	r19
    1092:	2f 91       	pop	r18
    1094:	1f 91       	pop	r17
    1096:	0f 91       	pop	r16
    1098:	0f 90       	pop	r0
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	0f 90       	pop	r0
    109e:	1f 90       	pop	r1
    10a0:	18 95       	reti

000010a2 <__vector_10>:
    10a2:	1f 92       	push	r1
    10a4:	0f 92       	push	r0
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	0f 92       	push	r0
    10aa:	11 24       	eor	r1, r1
    10ac:	0f 93       	push	r16
    10ae:	1f 93       	push	r17
    10b0:	2f 93       	push	r18
    10b2:	3f 93       	push	r19
    10b4:	4f 93       	push	r20
    10b6:	5f 93       	push	r21
    10b8:	6f 93       	push	r22
    10ba:	7f 93       	push	r23
    10bc:	8f 93       	push	r24
    10be:	9f 93       	push	r25
    10c0:	af 93       	push	r26
    10c2:	bf 93       	push	r27
    10c4:	ef 93       	push	r30
    10c6:	ff 93       	push	r31
    10c8:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
    10cc:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
    10d0:	ac 01       	movw	r20, r24
    10d2:	09 2e       	mov	r0, r25
    10d4:	00 0c       	add	r0, r0
    10d6:	66 0b       	sbc	r22, r22
    10d8:	77 0b       	sbc	r23, r23
    10da:	9a 01       	movw	r18, r20
    10dc:	11 27       	eor	r17, r17
    10de:	00 27       	eor	r16, r16
    10e0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10e4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10e8:	60 e0       	ldi	r22, 0x00	; 0
    10ea:	70 e0       	ldi	r23, 0x00	; 0
    10ec:	40 2b       	or	r20, r16
    10ee:	51 2b       	or	r21, r17
    10f0:	62 2b       	or	r22, r18
    10f2:	73 2b       	or	r23, r19
    10f4:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    10f8:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    10fc:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    1100:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    1104:	b0 9b       	sbis	0x16, 0	; 22
    1106:	1a c0       	rjmp	.+52     	; 0x113c <__vector_10+0x9a>
    1108:	01 96       	adiw	r24, 0x01	; 1
    110a:	09 2e       	mov	r0, r25
    110c:	00 0c       	add	r0, r0
    110e:	aa 0b       	sbc	r26, r26
    1110:	bb 0b       	sbc	r27, r27
    1112:	bc 01       	movw	r22, r24
    1114:	55 27       	eor	r21, r21
    1116:	44 27       	eor	r20, r20
    1118:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    111c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1120:	a0 e0       	ldi	r26, 0x00	; 0
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	84 2b       	or	r24, r20
    1126:	95 2b       	or	r25, r21
    1128:	a6 2b       	or	r26, r22
    112a:	b7 2b       	or	r27, r23
    112c:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1130:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1134:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1138:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    113c:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <mtable+0xa>
    1140:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <mtable+0xb>
    1144:	30 97       	sbiw	r30, 0x00	; 0
    1146:	39 f0       	breq	.+14     	; 0x1156 <__vector_10+0xb4>
    1148:	65 e0       	ldi	r22, 0x05	; 5
    114a:	70 e0       	ldi	r23, 0x00	; 0
    114c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <otable+0xa>
    1150:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <otable+0xb>
    1154:	09 95       	icall
    1156:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <schedule>
    115a:	ff 91       	pop	r31
    115c:	ef 91       	pop	r30
    115e:	bf 91       	pop	r27
    1160:	af 91       	pop	r26
    1162:	9f 91       	pop	r25
    1164:	8f 91       	pop	r24
    1166:	7f 91       	pop	r23
    1168:	6f 91       	pop	r22
    116a:	5f 91       	pop	r21
    116c:	4f 91       	pop	r20
    116e:	3f 91       	pop	r19
    1170:	2f 91       	pop	r18
    1172:	1f 91       	pop	r17
    1174:	0f 91       	pop	r16
    1176:	0f 90       	pop	r0
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	0f 90       	pop	r0
    117c:	1f 90       	pop	r1
    117e:	18 95       	reti

00001180 <__vector_11>:
    1180:	1f 92       	push	r1
    1182:	0f 92       	push	r0
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	0f 92       	push	r0
    1188:	11 24       	eor	r1, r1
    118a:	0f 93       	push	r16
    118c:	1f 93       	push	r17
    118e:	2f 93       	push	r18
    1190:	3f 93       	push	r19
    1192:	4f 93       	push	r20
    1194:	5f 93       	push	r21
    1196:	6f 93       	push	r22
    1198:	7f 93       	push	r23
    119a:	8f 93       	push	r24
    119c:	9f 93       	push	r25
    119e:	af 93       	push	r26
    11a0:	bf 93       	push	r27
    11a2:	ef 93       	push	r30
    11a4:	ff 93       	push	r31
    11a6:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
    11aa:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
    11ae:	ac 01       	movw	r20, r24
    11b0:	09 2e       	mov	r0, r25
    11b2:	00 0c       	add	r0, r0
    11b4:	66 0b       	sbc	r22, r22
    11b6:	77 0b       	sbc	r23, r23
    11b8:	9a 01       	movw	r18, r20
    11ba:	11 27       	eor	r17, r17
    11bc:	00 27       	eor	r16, r16
    11be:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11c2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11c6:	60 e0       	ldi	r22, 0x00	; 0
    11c8:	70 e0       	ldi	r23, 0x00	; 0
    11ca:	40 2b       	or	r20, r16
    11cc:	51 2b       	or	r21, r17
    11ce:	62 2b       	or	r22, r18
    11d0:	73 2b       	or	r23, r19
    11d2:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    11d6:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    11da:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    11de:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    11e2:	b0 9b       	sbis	0x16, 0	; 22
    11e4:	1a c0       	rjmp	.+52     	; 0x121a <__vector_11+0x9a>
    11e6:	01 96       	adiw	r24, 0x01	; 1
    11e8:	09 2e       	mov	r0, r25
    11ea:	00 0c       	add	r0, r0
    11ec:	aa 0b       	sbc	r26, r26
    11ee:	bb 0b       	sbc	r27, r27
    11f0:	bc 01       	movw	r22, r24
    11f2:	55 27       	eor	r21, r21
    11f4:	44 27       	eor	r20, r20
    11f6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11fa:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11fe:	a0 e0       	ldi	r26, 0x00	; 0
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	84 2b       	or	r24, r20
    1204:	95 2b       	or	r25, r21
    1206:	a6 2b       	or	r26, r22
    1208:	b7 2b       	or	r27, r23
    120a:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    120e:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1212:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1216:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    121a:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <mtable+0xc>
    121e:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <mtable+0xd>
    1222:	30 97       	sbiw	r30, 0x00	; 0
    1224:	39 f0       	breq	.+14     	; 0x1234 <__vector_11+0xb4>
    1226:	66 e0       	ldi	r22, 0x06	; 6
    1228:	70 e0       	ldi	r23, 0x00	; 0
    122a:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <otable+0xc>
    122e:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <otable+0xd>
    1232:	09 95       	icall
    1234:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <schedule>
    1238:	ff 91       	pop	r31
    123a:	ef 91       	pop	r30
    123c:	bf 91       	pop	r27
    123e:	af 91       	pop	r26
    1240:	9f 91       	pop	r25
    1242:	8f 91       	pop	r24
    1244:	7f 91       	pop	r23
    1246:	6f 91       	pop	r22
    1248:	5f 91       	pop	r21
    124a:	4f 91       	pop	r20
    124c:	3f 91       	pop	r19
    124e:	2f 91       	pop	r18
    1250:	1f 91       	pop	r17
    1252:	0f 91       	pop	r16
    1254:	0f 90       	pop	r0
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	0f 90       	pop	r0
    125a:	1f 90       	pop	r1
    125c:	18 95       	reti

0000125e <__vector_12>:
    125e:	1f 92       	push	r1
    1260:	0f 92       	push	r0
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	0f 92       	push	r0
    1266:	11 24       	eor	r1, r1
    1268:	0f 93       	push	r16
    126a:	1f 93       	push	r17
    126c:	2f 93       	push	r18
    126e:	3f 93       	push	r19
    1270:	4f 93       	push	r20
    1272:	5f 93       	push	r21
    1274:	6f 93       	push	r22
    1276:	7f 93       	push	r23
    1278:	8f 93       	push	r24
    127a:	9f 93       	push	r25
    127c:	af 93       	push	r26
    127e:	bf 93       	push	r27
    1280:	ef 93       	push	r30
    1282:	ff 93       	push	r31
    1284:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
    1288:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
    128c:	ac 01       	movw	r20, r24
    128e:	09 2e       	mov	r0, r25
    1290:	00 0c       	add	r0, r0
    1292:	66 0b       	sbc	r22, r22
    1294:	77 0b       	sbc	r23, r23
    1296:	9a 01       	movw	r18, r20
    1298:	11 27       	eor	r17, r17
    129a:	00 27       	eor	r16, r16
    129c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12a0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12a4:	60 e0       	ldi	r22, 0x00	; 0
    12a6:	70 e0       	ldi	r23, 0x00	; 0
    12a8:	40 2b       	or	r20, r16
    12aa:	51 2b       	or	r21, r17
    12ac:	62 2b       	or	r22, r18
    12ae:	73 2b       	or	r23, r19
    12b0:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    12b4:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    12b8:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    12bc:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    12c0:	b0 9b       	sbis	0x16, 0	; 22
    12c2:	1a c0       	rjmp	.+52     	; 0x12f8 <__vector_12+0x9a>
    12c4:	01 96       	adiw	r24, 0x01	; 1
    12c6:	09 2e       	mov	r0, r25
    12c8:	00 0c       	add	r0, r0
    12ca:	aa 0b       	sbc	r26, r26
    12cc:	bb 0b       	sbc	r27, r27
    12ce:	bc 01       	movw	r22, r24
    12d0:	55 27       	eor	r21, r21
    12d2:	44 27       	eor	r20, r20
    12d4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12d8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12dc:	a0 e0       	ldi	r26, 0x00	; 0
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	84 2b       	or	r24, r20
    12e2:	95 2b       	or	r25, r21
    12e4:	a6 2b       	or	r26, r22
    12e6:	b7 2b       	or	r27, r23
    12e8:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    12ec:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    12f0:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    12f4:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    12f8:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <mtable+0xe>
    12fc:	f0 91 e9 01 	lds	r31, 0x01E9	; 0x8001e9 <mtable+0xf>
    1300:	30 97       	sbiw	r30, 0x00	; 0
    1302:	39 f0       	breq	.+14     	; 0x1312 <__vector_12+0xb4>
    1304:	67 e0       	ldi	r22, 0x07	; 7
    1306:	70 e0       	ldi	r23, 0x00	; 0
    1308:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <otable+0xe>
    130c:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <otable+0xf>
    1310:	09 95       	icall
    1312:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <schedule>
    1316:	ff 91       	pop	r31
    1318:	ef 91       	pop	r30
    131a:	bf 91       	pop	r27
    131c:	af 91       	pop	r26
    131e:	9f 91       	pop	r25
    1320:	8f 91       	pop	r24
    1322:	7f 91       	pop	r23
    1324:	6f 91       	pop	r22
    1326:	5f 91       	pop	r21
    1328:	4f 91       	pop	r20
    132a:	3f 91       	pop	r19
    132c:	2f 91       	pop	r18
    132e:	1f 91       	pop	r17
    1330:	0f 91       	pop	r16
    1332:	0f 90       	pop	r0
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	0f 90       	pop	r0
    1338:	1f 90       	pop	r1
    133a:	18 95       	reti

0000133c <__vector_13>:
    133c:	1f 92       	push	r1
    133e:	0f 92       	push	r0
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	0f 92       	push	r0
    1344:	11 24       	eor	r1, r1
    1346:	0f 93       	push	r16
    1348:	1f 93       	push	r17
    134a:	2f 93       	push	r18
    134c:	3f 93       	push	r19
    134e:	4f 93       	push	r20
    1350:	5f 93       	push	r21
    1352:	6f 93       	push	r22
    1354:	7f 93       	push	r23
    1356:	8f 93       	push	r24
    1358:	9f 93       	push	r25
    135a:	af 93       	push	r26
    135c:	bf 93       	push	r27
    135e:	ef 93       	push	r30
    1360:	ff 93       	push	r31
    1362:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
    1366:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
    136a:	ac 01       	movw	r20, r24
    136c:	09 2e       	mov	r0, r25
    136e:	00 0c       	add	r0, r0
    1370:	66 0b       	sbc	r22, r22
    1372:	77 0b       	sbc	r23, r23
    1374:	9a 01       	movw	r18, r20
    1376:	11 27       	eor	r17, r17
    1378:	00 27       	eor	r16, r16
    137a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    137e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1382:	60 e0       	ldi	r22, 0x00	; 0
    1384:	70 e0       	ldi	r23, 0x00	; 0
    1386:	40 2b       	or	r20, r16
    1388:	51 2b       	or	r21, r17
    138a:	62 2b       	or	r22, r18
    138c:	73 2b       	or	r23, r19
    138e:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    1392:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    1396:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    139a:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    139e:	b0 9b       	sbis	0x16, 0	; 22
    13a0:	1a c0       	rjmp	.+52     	; 0x13d6 <__vector_13+0x9a>
    13a2:	01 96       	adiw	r24, 0x01	; 1
    13a4:	09 2e       	mov	r0, r25
    13a6:	00 0c       	add	r0, r0
    13a8:	aa 0b       	sbc	r26, r26
    13aa:	bb 0b       	sbc	r27, r27
    13ac:	bc 01       	movw	r22, r24
    13ae:	55 27       	eor	r21, r21
    13b0:	44 27       	eor	r20, r20
    13b2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13b6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13ba:	a0 e0       	ldi	r26, 0x00	; 0
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	84 2b       	or	r24, r20
    13c0:	95 2b       	or	r25, r21
    13c2:	a6 2b       	or	r26, r22
    13c4:	b7 2b       	or	r27, r23
    13c6:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    13ca:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    13ce:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    13d2:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    13d6:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <mtable+0x10>
    13da:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <mtable+0x11>
    13de:	30 97       	sbiw	r30, 0x00	; 0
    13e0:	39 f0       	breq	.+14     	; 0x13f0 <__vector_13+0xb4>
    13e2:	68 e0       	ldi	r22, 0x08	; 8
    13e4:	70 e0       	ldi	r23, 0x00	; 0
    13e6:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <otable+0x10>
    13ea:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <otable+0x11>
    13ee:	09 95       	icall
    13f0:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <schedule>
    13f4:	ff 91       	pop	r31
    13f6:	ef 91       	pop	r30
    13f8:	bf 91       	pop	r27
    13fa:	af 91       	pop	r26
    13fc:	9f 91       	pop	r25
    13fe:	8f 91       	pop	r24
    1400:	7f 91       	pop	r23
    1402:	6f 91       	pop	r22
    1404:	5f 91       	pop	r21
    1406:	4f 91       	pop	r20
    1408:	3f 91       	pop	r19
    140a:	2f 91       	pop	r18
    140c:	1f 91       	pop	r17
    140e:	0f 91       	pop	r16
    1410:	0f 90       	pop	r0
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	0f 90       	pop	r0
    1416:	1f 90       	pop	r1
    1418:	18 95       	reti

0000141a <__vector_14>:
    141a:	1f 92       	push	r1
    141c:	0f 92       	push	r0
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	0f 92       	push	r0
    1422:	11 24       	eor	r1, r1
    1424:	0f 93       	push	r16
    1426:	1f 93       	push	r17
    1428:	2f 93       	push	r18
    142a:	3f 93       	push	r19
    142c:	4f 93       	push	r20
    142e:	5f 93       	push	r21
    1430:	6f 93       	push	r22
    1432:	7f 93       	push	r23
    1434:	8f 93       	push	r24
    1436:	9f 93       	push	r25
    1438:	af 93       	push	r26
    143a:	bf 93       	push	r27
    143c:	ef 93       	push	r30
    143e:	ff 93       	push	r31
    1440:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
    1444:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
    1448:	ac 01       	movw	r20, r24
    144a:	09 2e       	mov	r0, r25
    144c:	00 0c       	add	r0, r0
    144e:	66 0b       	sbc	r22, r22
    1450:	77 0b       	sbc	r23, r23
    1452:	9a 01       	movw	r18, r20
    1454:	11 27       	eor	r17, r17
    1456:	00 27       	eor	r16, r16
    1458:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    145c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1460:	60 e0       	ldi	r22, 0x00	; 0
    1462:	70 e0       	ldi	r23, 0x00	; 0
    1464:	40 2b       	or	r20, r16
    1466:	51 2b       	or	r21, r17
    1468:	62 2b       	or	r22, r18
    146a:	73 2b       	or	r23, r19
    146c:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    1470:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    1474:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    1478:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    147c:	b0 9b       	sbis	0x16, 0	; 22
    147e:	1a c0       	rjmp	.+52     	; 0x14b4 <__vector_14+0x9a>
    1480:	01 96       	adiw	r24, 0x01	; 1
    1482:	09 2e       	mov	r0, r25
    1484:	00 0c       	add	r0, r0
    1486:	aa 0b       	sbc	r26, r26
    1488:	bb 0b       	sbc	r27, r27
    148a:	bc 01       	movw	r22, r24
    148c:	55 27       	eor	r21, r21
    148e:	44 27       	eor	r20, r20
    1490:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1494:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1498:	a0 e0       	ldi	r26, 0x00	; 0
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	84 2b       	or	r24, r20
    149e:	95 2b       	or	r25, r21
    14a0:	a6 2b       	or	r26, r22
    14a2:	b7 2b       	or	r27, r23
    14a4:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    14a8:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    14ac:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    14b0:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    14b4:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <mtable+0x12>
    14b8:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <mtable+0x13>
    14bc:	30 97       	sbiw	r30, 0x00	; 0
    14be:	39 f0       	breq	.+14     	; 0x14ce <__vector_14+0xb4>
    14c0:	69 e0       	ldi	r22, 0x09	; 9
    14c2:	70 e0       	ldi	r23, 0x00	; 0
    14c4:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <otable+0x12>
    14c8:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <otable+0x13>
    14cc:	09 95       	icall
    14ce:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <schedule>
    14d2:	ff 91       	pop	r31
    14d4:	ef 91       	pop	r30
    14d6:	bf 91       	pop	r27
    14d8:	af 91       	pop	r26
    14da:	9f 91       	pop	r25
    14dc:	8f 91       	pop	r24
    14de:	7f 91       	pop	r23
    14e0:	6f 91       	pop	r22
    14e2:	5f 91       	pop	r21
    14e4:	4f 91       	pop	r20
    14e6:	3f 91       	pop	r19
    14e8:	2f 91       	pop	r18
    14ea:	1f 91       	pop	r17
    14ec:	0f 91       	pop	r16
    14ee:	0f 90       	pop	r0
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	0f 90       	pop	r0
    14f4:	1f 90       	pop	r1
    14f6:	18 95       	reti

000014f8 <__vector_15>:
    14f8:	1f 92       	push	r1
    14fa:	0f 92       	push	r0
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	0f 92       	push	r0
    1500:	11 24       	eor	r1, r1
    1502:	0f 93       	push	r16
    1504:	1f 93       	push	r17
    1506:	2f 93       	push	r18
    1508:	3f 93       	push	r19
    150a:	4f 93       	push	r20
    150c:	5f 93       	push	r21
    150e:	6f 93       	push	r22
    1510:	7f 93       	push	r23
    1512:	8f 93       	push	r24
    1514:	9f 93       	push	r25
    1516:	af 93       	push	r26
    1518:	bf 93       	push	r27
    151a:	ef 93       	push	r30
    151c:	ff 93       	push	r31
    151e:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
    1522:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
    1526:	ac 01       	movw	r20, r24
    1528:	09 2e       	mov	r0, r25
    152a:	00 0c       	add	r0, r0
    152c:	66 0b       	sbc	r22, r22
    152e:	77 0b       	sbc	r23, r23
    1530:	9a 01       	movw	r18, r20
    1532:	11 27       	eor	r17, r17
    1534:	00 27       	eor	r16, r16
    1536:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    153a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    153e:	60 e0       	ldi	r22, 0x00	; 0
    1540:	70 e0       	ldi	r23, 0x00	; 0
    1542:	40 2b       	or	r20, r16
    1544:	51 2b       	or	r21, r17
    1546:	62 2b       	or	r22, r18
    1548:	73 2b       	or	r23, r19
    154a:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    154e:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    1552:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    1556:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    155a:	b0 9b       	sbis	0x16, 0	; 22
    155c:	1a c0       	rjmp	.+52     	; 0x1592 <__vector_15+0x9a>
    155e:	01 96       	adiw	r24, 0x01	; 1
    1560:	09 2e       	mov	r0, r25
    1562:	00 0c       	add	r0, r0
    1564:	aa 0b       	sbc	r26, r26
    1566:	bb 0b       	sbc	r27, r27
    1568:	bc 01       	movw	r22, r24
    156a:	55 27       	eor	r21, r21
    156c:	44 27       	eor	r20, r20
    156e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1572:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1576:	a0 e0       	ldi	r26, 0x00	; 0
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	84 2b       	or	r24, r20
    157c:	95 2b       	or	r25, r21
    157e:	a6 2b       	or	r26, r22
    1580:	b7 2b       	or	r27, r23
    1582:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1586:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    158a:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    158e:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1592:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <mtable+0x14>
    1596:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <mtable+0x15>
    159a:	30 97       	sbiw	r30, 0x00	; 0
    159c:	39 f0       	breq	.+14     	; 0x15ac <__vector_15+0xb4>
    159e:	6a e0       	ldi	r22, 0x0A	; 10
    15a0:	70 e0       	ldi	r23, 0x00	; 0
    15a2:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <otable+0x14>
    15a6:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <otable+0x15>
    15aa:	09 95       	icall
    15ac:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <schedule>
    15b0:	ff 91       	pop	r31
    15b2:	ef 91       	pop	r30
    15b4:	bf 91       	pop	r27
    15b6:	af 91       	pop	r26
    15b8:	9f 91       	pop	r25
    15ba:	8f 91       	pop	r24
    15bc:	7f 91       	pop	r23
    15be:	6f 91       	pop	r22
    15c0:	5f 91       	pop	r21
    15c2:	4f 91       	pop	r20
    15c4:	3f 91       	pop	r19
    15c6:	2f 91       	pop	r18
    15c8:	1f 91       	pop	r17
    15ca:	0f 91       	pop	r16
    15cc:	0f 90       	pop	r0
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	0f 90       	pop	r0
    15d2:	1f 90       	pop	r1
    15d4:	18 95       	reti

000015d6 <__vector_16>:
    15d6:	1f 92       	push	r1
    15d8:	0f 92       	push	r0
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	0f 92       	push	r0
    15de:	11 24       	eor	r1, r1
    15e0:	0f 93       	push	r16
    15e2:	1f 93       	push	r17
    15e4:	2f 93       	push	r18
    15e6:	3f 93       	push	r19
    15e8:	4f 93       	push	r20
    15ea:	5f 93       	push	r21
    15ec:	6f 93       	push	r22
    15ee:	7f 93       	push	r23
    15f0:	8f 93       	push	r24
    15f2:	9f 93       	push	r25
    15f4:	af 93       	push	r26
    15f6:	bf 93       	push	r27
    15f8:	ef 93       	push	r30
    15fa:	ff 93       	push	r31
    15fc:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
    1600:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
    1604:	ac 01       	movw	r20, r24
    1606:	09 2e       	mov	r0, r25
    1608:	00 0c       	add	r0, r0
    160a:	66 0b       	sbc	r22, r22
    160c:	77 0b       	sbc	r23, r23
    160e:	9a 01       	movw	r18, r20
    1610:	11 27       	eor	r17, r17
    1612:	00 27       	eor	r16, r16
    1614:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1618:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    161c:	60 e0       	ldi	r22, 0x00	; 0
    161e:	70 e0       	ldi	r23, 0x00	; 0
    1620:	40 2b       	or	r20, r16
    1622:	51 2b       	or	r21, r17
    1624:	62 2b       	or	r22, r18
    1626:	73 2b       	or	r23, r19
    1628:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    162c:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    1630:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    1634:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    1638:	b0 9b       	sbis	0x16, 0	; 22
    163a:	1a c0       	rjmp	.+52     	; 0x1670 <__vector_16+0x9a>
    163c:	01 96       	adiw	r24, 0x01	; 1
    163e:	09 2e       	mov	r0, r25
    1640:	00 0c       	add	r0, r0
    1642:	aa 0b       	sbc	r26, r26
    1644:	bb 0b       	sbc	r27, r27
    1646:	bc 01       	movw	r22, r24
    1648:	55 27       	eor	r21, r21
    164a:	44 27       	eor	r20, r20
    164c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1650:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1654:	a0 e0       	ldi	r26, 0x00	; 0
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	84 2b       	or	r24, r20
    165a:	95 2b       	or	r25, r21
    165c:	a6 2b       	or	r26, r22
    165e:	b7 2b       	or	r27, r23
    1660:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1664:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1668:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    166c:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1670:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <mtable+0x16>
    1674:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <mtable+0x17>
    1678:	30 97       	sbiw	r30, 0x00	; 0
    167a:	39 f0       	breq	.+14     	; 0x168a <__vector_16+0xb4>
    167c:	6b e0       	ldi	r22, 0x0B	; 11
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <otable+0x16>
    1684:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <otable+0x17>
    1688:	09 95       	icall
    168a:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <schedule>
    168e:	ff 91       	pop	r31
    1690:	ef 91       	pop	r30
    1692:	bf 91       	pop	r27
    1694:	af 91       	pop	r26
    1696:	9f 91       	pop	r25
    1698:	8f 91       	pop	r24
    169a:	7f 91       	pop	r23
    169c:	6f 91       	pop	r22
    169e:	5f 91       	pop	r21
    16a0:	4f 91       	pop	r20
    16a2:	3f 91       	pop	r19
    16a4:	2f 91       	pop	r18
    16a6:	1f 91       	pop	r17
    16a8:	0f 91       	pop	r16
    16aa:	0f 90       	pop	r0
    16ac:	0f be       	out	0x3f, r0	; 63
    16ae:	0f 90       	pop	r0
    16b0:	1f 90       	pop	r1
    16b2:	18 95       	reti

000016b4 <__vector_17>:
    16b4:	1f 92       	push	r1
    16b6:	0f 92       	push	r0
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	0f 92       	push	r0
    16bc:	11 24       	eor	r1, r1
    16be:	0f 93       	push	r16
    16c0:	1f 93       	push	r17
    16c2:	2f 93       	push	r18
    16c4:	3f 93       	push	r19
    16c6:	4f 93       	push	r20
    16c8:	5f 93       	push	r21
    16ca:	6f 93       	push	r22
    16cc:	7f 93       	push	r23
    16ce:	8f 93       	push	r24
    16d0:	9f 93       	push	r25
    16d2:	af 93       	push	r26
    16d4:	bf 93       	push	r27
    16d6:	ef 93       	push	r30
    16d8:	ff 93       	push	r31
    16da:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
    16de:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
    16e2:	ac 01       	movw	r20, r24
    16e4:	09 2e       	mov	r0, r25
    16e6:	00 0c       	add	r0, r0
    16e8:	66 0b       	sbc	r22, r22
    16ea:	77 0b       	sbc	r23, r23
    16ec:	9a 01       	movw	r18, r20
    16ee:	11 27       	eor	r17, r17
    16f0:	00 27       	eor	r16, r16
    16f2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16f6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16fa:	60 e0       	ldi	r22, 0x00	; 0
    16fc:	70 e0       	ldi	r23, 0x00	; 0
    16fe:	40 2b       	or	r20, r16
    1700:	51 2b       	or	r21, r17
    1702:	62 2b       	or	r22, r18
    1704:	73 2b       	or	r23, r19
    1706:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    170a:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    170e:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    1712:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    1716:	b0 9b       	sbis	0x16, 0	; 22
    1718:	1a c0       	rjmp	.+52     	; 0x174e <__vector_17+0x9a>
    171a:	01 96       	adiw	r24, 0x01	; 1
    171c:	09 2e       	mov	r0, r25
    171e:	00 0c       	add	r0, r0
    1720:	aa 0b       	sbc	r26, r26
    1722:	bb 0b       	sbc	r27, r27
    1724:	bc 01       	movw	r22, r24
    1726:	55 27       	eor	r21, r21
    1728:	44 27       	eor	r20, r20
    172a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    172e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1732:	a0 e0       	ldi	r26, 0x00	; 0
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	84 2b       	or	r24, r20
    1738:	95 2b       	or	r25, r21
    173a:	a6 2b       	or	r26, r22
    173c:	b7 2b       	or	r27, r23
    173e:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1742:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1746:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    174a:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    174e:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <mtable+0x18>
    1752:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <mtable+0x19>
    1756:	30 97       	sbiw	r30, 0x00	; 0
    1758:	39 f0       	breq	.+14     	; 0x1768 <__vector_17+0xb4>
    175a:	6c e0       	ldi	r22, 0x0C	; 12
    175c:	70 e0       	ldi	r23, 0x00	; 0
    175e:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <otable+0x18>
    1762:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <otable+0x19>
    1766:	09 95       	icall
    1768:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <schedule>
    176c:	ff 91       	pop	r31
    176e:	ef 91       	pop	r30
    1770:	bf 91       	pop	r27
    1772:	af 91       	pop	r26
    1774:	9f 91       	pop	r25
    1776:	8f 91       	pop	r24
    1778:	7f 91       	pop	r23
    177a:	6f 91       	pop	r22
    177c:	5f 91       	pop	r21
    177e:	4f 91       	pop	r20
    1780:	3f 91       	pop	r19
    1782:	2f 91       	pop	r18
    1784:	1f 91       	pop	r17
    1786:	0f 91       	pop	r16
    1788:	0f 90       	pop	r0
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	0f 90       	pop	r0
    178e:	1f 90       	pop	r1
    1790:	18 95       	reti

00001792 <__vector_18>:
    1792:	1f 92       	push	r1
    1794:	0f 92       	push	r0
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	0f 92       	push	r0
    179a:	11 24       	eor	r1, r1
    179c:	0f 93       	push	r16
    179e:	1f 93       	push	r17
    17a0:	2f 93       	push	r18
    17a2:	3f 93       	push	r19
    17a4:	4f 93       	push	r20
    17a6:	5f 93       	push	r21
    17a8:	6f 93       	push	r22
    17aa:	7f 93       	push	r23
    17ac:	8f 93       	push	r24
    17ae:	9f 93       	push	r25
    17b0:	af 93       	push	r26
    17b2:	bf 93       	push	r27
    17b4:	ef 93       	push	r30
    17b6:	ff 93       	push	r31
    17b8:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
    17bc:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
    17c0:	ac 01       	movw	r20, r24
    17c2:	09 2e       	mov	r0, r25
    17c4:	00 0c       	add	r0, r0
    17c6:	66 0b       	sbc	r22, r22
    17c8:	77 0b       	sbc	r23, r23
    17ca:	9a 01       	movw	r18, r20
    17cc:	11 27       	eor	r17, r17
    17ce:	00 27       	eor	r16, r16
    17d0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17d4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17d8:	60 e0       	ldi	r22, 0x00	; 0
    17da:	70 e0       	ldi	r23, 0x00	; 0
    17dc:	40 2b       	or	r20, r16
    17de:	51 2b       	or	r21, r17
    17e0:	62 2b       	or	r22, r18
    17e2:	73 2b       	or	r23, r19
    17e4:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    17e8:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    17ec:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    17f0:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    17f4:	b0 9b       	sbis	0x16, 0	; 22
    17f6:	1a c0       	rjmp	.+52     	; 0x182c <__vector_18+0x9a>
    17f8:	01 96       	adiw	r24, 0x01	; 1
    17fa:	09 2e       	mov	r0, r25
    17fc:	00 0c       	add	r0, r0
    17fe:	aa 0b       	sbc	r26, r26
    1800:	bb 0b       	sbc	r27, r27
    1802:	bc 01       	movw	r22, r24
    1804:	55 27       	eor	r21, r21
    1806:	44 27       	eor	r20, r20
    1808:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    180c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1810:	a0 e0       	ldi	r26, 0x00	; 0
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	84 2b       	or	r24, r20
    1816:	95 2b       	or	r25, r21
    1818:	a6 2b       	or	r26, r22
    181a:	b7 2b       	or	r27, r23
    181c:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1820:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1824:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1828:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    182c:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <mtable+0x1a>
    1830:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <mtable+0x1b>
    1834:	30 97       	sbiw	r30, 0x00	; 0
    1836:	39 f0       	breq	.+14     	; 0x1846 <__vector_18+0xb4>
    1838:	6d e0       	ldi	r22, 0x0D	; 13
    183a:	70 e0       	ldi	r23, 0x00	; 0
    183c:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <otable+0x1a>
    1840:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <otable+0x1b>
    1844:	09 95       	icall
    1846:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <schedule>
    184a:	ff 91       	pop	r31
    184c:	ef 91       	pop	r30
    184e:	bf 91       	pop	r27
    1850:	af 91       	pop	r26
    1852:	9f 91       	pop	r25
    1854:	8f 91       	pop	r24
    1856:	7f 91       	pop	r23
    1858:	6f 91       	pop	r22
    185a:	5f 91       	pop	r21
    185c:	4f 91       	pop	r20
    185e:	3f 91       	pop	r19
    1860:	2f 91       	pop	r18
    1862:	1f 91       	pop	r17
    1864:	0f 91       	pop	r16
    1866:	0f 90       	pop	r0
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	0f 90       	pop	r0
    186c:	1f 90       	pop	r1
    186e:	18 95       	reti

00001870 <__vector_19>:
    1870:	1f 92       	push	r1
    1872:	0f 92       	push	r0
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	0f 92       	push	r0
    1878:	11 24       	eor	r1, r1
    187a:	0f 93       	push	r16
    187c:	1f 93       	push	r17
    187e:	2f 93       	push	r18
    1880:	3f 93       	push	r19
    1882:	4f 93       	push	r20
    1884:	5f 93       	push	r21
    1886:	6f 93       	push	r22
    1888:	7f 93       	push	r23
    188a:	8f 93       	push	r24
    188c:	9f 93       	push	r25
    188e:	af 93       	push	r26
    1890:	bf 93       	push	r27
    1892:	ef 93       	push	r30
    1894:	ff 93       	push	r31
    1896:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
    189a:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
    189e:	ac 01       	movw	r20, r24
    18a0:	09 2e       	mov	r0, r25
    18a2:	00 0c       	add	r0, r0
    18a4:	66 0b       	sbc	r22, r22
    18a6:	77 0b       	sbc	r23, r23
    18a8:	9a 01       	movw	r18, r20
    18aa:	11 27       	eor	r17, r17
    18ac:	00 27       	eor	r16, r16
    18ae:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18b2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18b6:	60 e0       	ldi	r22, 0x00	; 0
    18b8:	70 e0       	ldi	r23, 0x00	; 0
    18ba:	40 2b       	or	r20, r16
    18bc:	51 2b       	or	r21, r17
    18be:	62 2b       	or	r22, r18
    18c0:	73 2b       	or	r23, r19
    18c2:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    18c6:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    18ca:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    18ce:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    18d2:	b0 9b       	sbis	0x16, 0	; 22
    18d4:	1a c0       	rjmp	.+52     	; 0x190a <__vector_19+0x9a>
    18d6:	01 96       	adiw	r24, 0x01	; 1
    18d8:	09 2e       	mov	r0, r25
    18da:	00 0c       	add	r0, r0
    18dc:	aa 0b       	sbc	r26, r26
    18de:	bb 0b       	sbc	r27, r27
    18e0:	bc 01       	movw	r22, r24
    18e2:	55 27       	eor	r21, r21
    18e4:	44 27       	eor	r20, r20
    18e6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18ea:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18ee:	a0 e0       	ldi	r26, 0x00	; 0
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	84 2b       	or	r24, r20
    18f4:	95 2b       	or	r25, r21
    18f6:	a6 2b       	or	r26, r22
    18f8:	b7 2b       	or	r27, r23
    18fa:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    18fe:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1902:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1906:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    190a:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <mtable+0x1c>
    190e:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <mtable+0x1d>
    1912:	30 97       	sbiw	r30, 0x00	; 0
    1914:	39 f0       	breq	.+14     	; 0x1924 <__vector_19+0xb4>
    1916:	6e e0       	ldi	r22, 0x0E	; 14
    1918:	70 e0       	ldi	r23, 0x00	; 0
    191a:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <otable+0x1c>
    191e:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <otable+0x1d>
    1922:	09 95       	icall
    1924:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <schedule>
    1928:	ff 91       	pop	r31
    192a:	ef 91       	pop	r30
    192c:	bf 91       	pop	r27
    192e:	af 91       	pop	r26
    1930:	9f 91       	pop	r25
    1932:	8f 91       	pop	r24
    1934:	7f 91       	pop	r23
    1936:	6f 91       	pop	r22
    1938:	5f 91       	pop	r21
    193a:	4f 91       	pop	r20
    193c:	3f 91       	pop	r19
    193e:	2f 91       	pop	r18
    1940:	1f 91       	pop	r17
    1942:	0f 91       	pop	r16
    1944:	0f 90       	pop	r0
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	0f 90       	pop	r0
    194a:	1f 90       	pop	r1
    194c:	18 95       	reti

0000194e <__vector_20>:
    194e:	1f 92       	push	r1
    1950:	0f 92       	push	r0
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	0f 92       	push	r0
    1956:	11 24       	eor	r1, r1
    1958:	0f 93       	push	r16
    195a:	1f 93       	push	r17
    195c:	2f 93       	push	r18
    195e:	3f 93       	push	r19
    1960:	4f 93       	push	r20
    1962:	5f 93       	push	r21
    1964:	6f 93       	push	r22
    1966:	7f 93       	push	r23
    1968:	8f 93       	push	r24
    196a:	9f 93       	push	r25
    196c:	af 93       	push	r26
    196e:	bf 93       	push	r27
    1970:	ef 93       	push	r30
    1972:	ff 93       	push	r31
    1974:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
    1978:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
    197c:	ac 01       	movw	r20, r24
    197e:	09 2e       	mov	r0, r25
    1980:	00 0c       	add	r0, r0
    1982:	66 0b       	sbc	r22, r22
    1984:	77 0b       	sbc	r23, r23
    1986:	9a 01       	movw	r18, r20
    1988:	11 27       	eor	r17, r17
    198a:	00 27       	eor	r16, r16
    198c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1990:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1994:	60 e0       	ldi	r22, 0x00	; 0
    1996:	70 e0       	ldi	r23, 0x00	; 0
    1998:	40 2b       	or	r20, r16
    199a:	51 2b       	or	r21, r17
    199c:	62 2b       	or	r22, r18
    199e:	73 2b       	or	r23, r19
    19a0:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    19a4:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    19a8:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    19ac:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    19b0:	b0 9b       	sbis	0x16, 0	; 22
    19b2:	1a c0       	rjmp	.+52     	; 0x19e8 <__vector_20+0x9a>
    19b4:	01 96       	adiw	r24, 0x01	; 1
    19b6:	09 2e       	mov	r0, r25
    19b8:	00 0c       	add	r0, r0
    19ba:	aa 0b       	sbc	r26, r26
    19bc:	bb 0b       	sbc	r27, r27
    19be:	bc 01       	movw	r22, r24
    19c0:	55 27       	eor	r21, r21
    19c2:	44 27       	eor	r20, r20
    19c4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19c8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19cc:	a0 e0       	ldi	r26, 0x00	; 0
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	84 2b       	or	r24, r20
    19d2:	95 2b       	or	r25, r21
    19d4:	a6 2b       	or	r26, r22
    19d6:	b7 2b       	or	r27, r23
    19d8:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    19dc:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    19e0:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    19e4:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    19e8:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable+0x1e>
    19ec:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0x1f>
    19f0:	30 97       	sbiw	r30, 0x00	; 0
    19f2:	39 f0       	breq	.+14     	; 0x1a02 <__vector_20+0xb4>
    19f4:	6f e0       	ldi	r22, 0x0F	; 15
    19f6:	70 e0       	ldi	r23, 0x00	; 0
    19f8:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable+0x1e>
    19fc:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0x1f>
    1a00:	09 95       	icall
    1a02:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <schedule>
    1a06:	ff 91       	pop	r31
    1a08:	ef 91       	pop	r30
    1a0a:	bf 91       	pop	r27
    1a0c:	af 91       	pop	r26
    1a0e:	9f 91       	pop	r25
    1a10:	8f 91       	pop	r24
    1a12:	7f 91       	pop	r23
    1a14:	6f 91       	pop	r22
    1a16:	5f 91       	pop	r21
    1a18:	4f 91       	pop	r20
    1a1a:	3f 91       	pop	r19
    1a1c:	2f 91       	pop	r18
    1a1e:	1f 91       	pop	r17
    1a20:	0f 91       	pop	r16
    1a22:	0f 90       	pop	r0
    1a24:	0f be       	out	0x3f, r0	; 63
    1a26:	0f 90       	pop	r0
    1a28:	1f 90       	pop	r1
    1a2a:	18 95       	reti

00001a2c <__vector_21>:
    1a2c:	1f 92       	push	r1
    1a2e:	0f 92       	push	r0
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	0f 92       	push	r0
    1a34:	11 24       	eor	r1, r1
    1a36:	0f 93       	push	r16
    1a38:	1f 93       	push	r17
    1a3a:	2f 93       	push	r18
    1a3c:	3f 93       	push	r19
    1a3e:	4f 93       	push	r20
    1a40:	5f 93       	push	r21
    1a42:	6f 93       	push	r22
    1a44:	7f 93       	push	r23
    1a46:	8f 93       	push	r24
    1a48:	9f 93       	push	r25
    1a4a:	af 93       	push	r26
    1a4c:	bf 93       	push	r27
    1a4e:	ef 93       	push	r30
    1a50:	ff 93       	push	r31
    1a52:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
    1a56:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
    1a5a:	ac 01       	movw	r20, r24
    1a5c:	09 2e       	mov	r0, r25
    1a5e:	00 0c       	add	r0, r0
    1a60:	66 0b       	sbc	r22, r22
    1a62:	77 0b       	sbc	r23, r23
    1a64:	9a 01       	movw	r18, r20
    1a66:	11 27       	eor	r17, r17
    1a68:	00 27       	eor	r16, r16
    1a6a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a6e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a72:	60 e0       	ldi	r22, 0x00	; 0
    1a74:	70 e0       	ldi	r23, 0x00	; 0
    1a76:	40 2b       	or	r20, r16
    1a78:	51 2b       	or	r21, r17
    1a7a:	62 2b       	or	r22, r18
    1a7c:	73 2b       	or	r23, r19
    1a7e:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    1a82:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    1a86:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    1a8a:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    1a8e:	b0 9b       	sbis	0x16, 0	; 22
    1a90:	1a c0       	rjmp	.+52     	; 0x1ac6 <__vector_21+0x9a>
    1a92:	01 96       	adiw	r24, 0x01	; 1
    1a94:	09 2e       	mov	r0, r25
    1a96:	00 0c       	add	r0, r0
    1a98:	aa 0b       	sbc	r26, r26
    1a9a:	bb 0b       	sbc	r27, r27
    1a9c:	bc 01       	movw	r22, r24
    1a9e:	55 27       	eor	r21, r21
    1aa0:	44 27       	eor	r20, r20
    1aa2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1aa6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1aaa:	a0 e0       	ldi	r26, 0x00	; 0
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	84 2b       	or	r24, r20
    1ab0:	95 2b       	or	r25, r21
    1ab2:	a6 2b       	or	r26, r22
    1ab4:	b7 2b       	or	r27, r23
    1ab6:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1aba:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1abe:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1ac2:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1ac6:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <mtable+0x20>
    1aca:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <mtable+0x21>
    1ace:	30 97       	sbiw	r30, 0x00	; 0
    1ad0:	39 f0       	breq	.+14     	; 0x1ae0 <__vector_21+0xb4>
    1ad2:	60 e1       	ldi	r22, 0x10	; 16
    1ad4:	70 e0       	ldi	r23, 0x00	; 0
    1ad6:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <otable+0x20>
    1ada:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <otable+0x21>
    1ade:	09 95       	icall
    1ae0:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <schedule>
    1ae4:	ff 91       	pop	r31
    1ae6:	ef 91       	pop	r30
    1ae8:	bf 91       	pop	r27
    1aea:	af 91       	pop	r26
    1aec:	9f 91       	pop	r25
    1aee:	8f 91       	pop	r24
    1af0:	7f 91       	pop	r23
    1af2:	6f 91       	pop	r22
    1af4:	5f 91       	pop	r21
    1af6:	4f 91       	pop	r20
    1af8:	3f 91       	pop	r19
    1afa:	2f 91       	pop	r18
    1afc:	1f 91       	pop	r17
    1afe:	0f 91       	pop	r16
    1b00:	0f 90       	pop	r0
    1b02:	0f be       	out	0x3f, r0	; 63
    1b04:	0f 90       	pop	r0
    1b06:	1f 90       	pop	r1
    1b08:	18 95       	reti

00001b0a <__vector_22>:
    1b0a:	1f 92       	push	r1
    1b0c:	0f 92       	push	r0
    1b0e:	0f b6       	in	r0, 0x3f	; 63
    1b10:	0f 92       	push	r0
    1b12:	11 24       	eor	r1, r1
    1b14:	0f 93       	push	r16
    1b16:	1f 93       	push	r17
    1b18:	2f 93       	push	r18
    1b1a:	3f 93       	push	r19
    1b1c:	4f 93       	push	r20
    1b1e:	5f 93       	push	r21
    1b20:	6f 93       	push	r22
    1b22:	7f 93       	push	r23
    1b24:	8f 93       	push	r24
    1b26:	9f 93       	push	r25
    1b28:	af 93       	push	r26
    1b2a:	bf 93       	push	r27
    1b2c:	ef 93       	push	r30
    1b2e:	ff 93       	push	r31
    1b30:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
    1b34:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
    1b38:	ac 01       	movw	r20, r24
    1b3a:	09 2e       	mov	r0, r25
    1b3c:	00 0c       	add	r0, r0
    1b3e:	66 0b       	sbc	r22, r22
    1b40:	77 0b       	sbc	r23, r23
    1b42:	9a 01       	movw	r18, r20
    1b44:	11 27       	eor	r17, r17
    1b46:	00 27       	eor	r16, r16
    1b48:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b4c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b50:	60 e0       	ldi	r22, 0x00	; 0
    1b52:	70 e0       	ldi	r23, 0x00	; 0
    1b54:	40 2b       	or	r20, r16
    1b56:	51 2b       	or	r21, r17
    1b58:	62 2b       	or	r22, r18
    1b5a:	73 2b       	or	r23, r19
    1b5c:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    1b60:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    1b64:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    1b68:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    1b6c:	b0 9b       	sbis	0x16, 0	; 22
    1b6e:	1a c0       	rjmp	.+52     	; 0x1ba4 <__vector_22+0x9a>
    1b70:	01 96       	adiw	r24, 0x01	; 1
    1b72:	09 2e       	mov	r0, r25
    1b74:	00 0c       	add	r0, r0
    1b76:	aa 0b       	sbc	r26, r26
    1b78:	bb 0b       	sbc	r27, r27
    1b7a:	bc 01       	movw	r22, r24
    1b7c:	55 27       	eor	r21, r21
    1b7e:	44 27       	eor	r20, r20
    1b80:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b84:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b88:	a0 e0       	ldi	r26, 0x00	; 0
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	84 2b       	or	r24, r20
    1b8e:	95 2b       	or	r25, r21
    1b90:	a6 2b       	or	r26, r22
    1b92:	b7 2b       	or	r27, r23
    1b94:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1b98:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1b9c:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1ba0:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1ba4:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <mtable+0x22>
    1ba8:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <mtable+0x23>
    1bac:	30 97       	sbiw	r30, 0x00	; 0
    1bae:	39 f0       	breq	.+14     	; 0x1bbe <__vector_22+0xb4>
    1bb0:	61 e1       	ldi	r22, 0x11	; 17
    1bb2:	70 e0       	ldi	r23, 0x00	; 0
    1bb4:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <otable+0x22>
    1bb8:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <otable+0x23>
    1bbc:	09 95       	icall
    1bbe:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <schedule>
    1bc2:	ff 91       	pop	r31
    1bc4:	ef 91       	pop	r30
    1bc6:	bf 91       	pop	r27
    1bc8:	af 91       	pop	r26
    1bca:	9f 91       	pop	r25
    1bcc:	8f 91       	pop	r24
    1bce:	7f 91       	pop	r23
    1bd0:	6f 91       	pop	r22
    1bd2:	5f 91       	pop	r21
    1bd4:	4f 91       	pop	r20
    1bd6:	3f 91       	pop	r19
    1bd8:	2f 91       	pop	r18
    1bda:	1f 91       	pop	r17
    1bdc:	0f 91       	pop	r16
    1bde:	0f 90       	pop	r0
    1be0:	0f be       	out	0x3f, r0	; 63
    1be2:	0f 90       	pop	r0
    1be4:	1f 90       	pop	r1
    1be6:	18 95       	reti

00001be8 <idle>:
    1be8:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <schedule>
    1bec:	78 94       	sei
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	83 bf       	out	0x33, r24	; 51
    1bf2:	88 95       	sleep
    1bf4:	fc cf       	rjmp	.-8      	; 0x1bee <idle+0x6>

00001bf6 <__vector_9>:
    1bf6:	1f 92       	push	r1
    1bf8:	0f 92       	push	r0
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	0f 92       	push	r0
    1bfe:	11 24       	eor	r1, r1
    1c00:	2f 93       	push	r18
    1c02:	3f 93       	push	r19
    1c04:	4f 93       	push	r20
    1c06:	5f 93       	push	r21
    1c08:	6f 93       	push	r22
    1c0a:	7f 93       	push	r23
    1c0c:	8f 93       	push	r24
    1c0e:	9f 93       	push	r25
    1c10:	ef 93       	push	r30
    1c12:	ff 93       	push	r31
    1c14:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
    1c18:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
    1c1c:	01 96       	adiw	r24, 0x01	; 1
    1c1e:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <__data_end+0x1>
    1c22:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__data_end>
    1c26:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <timerQ>
    1c2a:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <timerQ+0x1>
    1c2e:	30 97       	sbiw	r30, 0x00	; 0
    1c30:	01 f1       	breq	.+64     	; 0x1c72 <__vector_9+0x7c>
    1c32:	42 81       	ldd	r20, Z+2	; 0x02
    1c34:	53 81       	ldd	r21, Z+3	; 0x03
    1c36:	64 81       	ldd	r22, Z+4	; 0x04
    1c38:	75 81       	ldd	r23, Z+5	; 0x05
    1c3a:	86 17       	cp	r24, r22
    1c3c:	97 07       	cpc	r25, r23
    1c3e:	c9 f4       	brne	.+50     	; 0x1c72 <__vector_9+0x7c>
    1c40:	ca 01       	movw	r24, r20
    1c42:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c46:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c4a:	42 1b       	sub	r20, r18
    1c4c:	53 0b       	sbc	r21, r19
    1c4e:	41 30       	cpi	r20, 0x01	; 1
    1c50:	51 05       	cpc	r21, r1
    1c52:	29 f4       	brne	.+10     	; 0x1c5e <__vector_9+0x68>
    1c54:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c58:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c5c:	01 96       	adiw	r24, 0x01	; 1
    1c5e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1c62:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1c66:	ef e6       	ldi	r30, 0x6F	; 111
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	82 60       	ori	r24, 0x02	; 2
    1c6e:	80 83       	st	Z, r24
    1c70:	05 c0       	rjmp	.+10     	; 0x1c7c <__vector_9+0x86>
    1c72:	ef e6       	ldi	r30, 0x6F	; 111
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	8d 7f       	andi	r24, 0xFD	; 253
    1c7a:	80 83       	st	Z, r24
    1c7c:	ff 91       	pop	r31
    1c7e:	ef 91       	pop	r30
    1c80:	9f 91       	pop	r25
    1c82:	8f 91       	pop	r24
    1c84:	7f 91       	pop	r23
    1c86:	6f 91       	pop	r22
    1c88:	5f 91       	pop	r21
    1c8a:	4f 91       	pop	r20
    1c8c:	3f 91       	pop	r19
    1c8e:	2f 91       	pop	r18
    1c90:	0f 90       	pop	r0
    1c92:	0f be       	out	0x3f, r0	; 63
    1c94:	0f 90       	pop	r0
    1c96:	1f 90       	pop	r1
    1c98:	18 95       	reti

00001c9a <__vector_7>:
    1c9a:	1f 92       	push	r1
    1c9c:	0f 92       	push	r0
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	0f 92       	push	r0
    1ca2:	11 24       	eor	r1, r1
    1ca4:	cf 92       	push	r12
    1ca6:	df 92       	push	r13
    1ca8:	ef 92       	push	r14
    1caa:	ff 92       	push	r15
    1cac:	2f 93       	push	r18
    1cae:	3f 93       	push	r19
    1cb0:	4f 93       	push	r20
    1cb2:	5f 93       	push	r21
    1cb4:	6f 93       	push	r22
    1cb6:	7f 93       	push	r23
    1cb8:	8f 93       	push	r24
    1cba:	9f 93       	push	r25
    1cbc:	af 93       	push	r26
    1cbe:	bf 93       	push	r27
    1cc0:	ef 93       	push	r30
    1cc2:	ff 93       	push	r31
    1cc4:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
    1cc8:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
    1ccc:	6c 01       	movw	r12, r24
    1cce:	09 2e       	mov	r0, r25
    1cd0:	00 0c       	add	r0, r0
    1cd2:	ee 08       	sbc	r14, r14
    1cd4:	ff 08       	sbc	r15, r15
    1cd6:	76 01       	movw	r14, r12
    1cd8:	dd 24       	eor	r13, r13
    1cda:	cc 24       	eor	r12, r12
    1cdc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ce0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ce4:	60 e0       	ldi	r22, 0x00	; 0
    1ce6:	70 e0       	ldi	r23, 0x00	; 0
    1ce8:	c4 2a       	or	r12, r20
    1cea:	d5 2a       	or	r13, r21
    1cec:	e6 2a       	or	r14, r22
    1cee:	f7 2a       	or	r15, r23
    1cf0:	b0 9b       	sbis	0x16, 0	; 22
    1cf2:	1e c0       	rjmp	.+60     	; 0x1d30 <__vector_7+0x96>
    1cf4:	6c 01       	movw	r12, r24
    1cf6:	2f ef       	ldi	r18, 0xFF	; 255
    1cf8:	c2 1a       	sub	r12, r18
    1cfa:	d2 0a       	sbc	r13, r18
    1cfc:	0d 2c       	mov	r0, r13
    1cfe:	00 0c       	add	r0, r0
    1d00:	ee 08       	sbc	r14, r14
    1d02:	ff 08       	sbc	r15, r15
    1d04:	d6 01       	movw	r26, r12
    1d06:	99 27       	eor	r25, r25
    1d08:	88 27       	eor	r24, r24
    1d0a:	c0 90 84 00 	lds	r12, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d0e:	d0 90 85 00 	lds	r13, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d12:	e1 2c       	mov	r14, r1
    1d14:	f1 2c       	mov	r15, r1
    1d16:	c8 2a       	or	r12, r24
    1d18:	d9 2a       	or	r13, r25
    1d1a:	ea 2a       	or	r14, r26
    1d1c:	fb 2a       	or	r15, r27
    1d1e:	08 c0       	rjmp	.+16     	; 0x1d30 <__vector_7+0x96>
    1d20:	8e e3       	ldi	r24, 0x3E	; 62
    1d22:	91 e0       	ldi	r25, 0x01	; 1
    1d24:	0e 94 bd 05 	call	0xb7a	; 0xb7a <dequeue>
    1d28:	60 e4       	ldi	r22, 0x40	; 64
    1d2a:	71 e0       	ldi	r23, 0x01	; 1
    1d2c:	0e 94 5b 05 	call	0xab6	; 0xab6 <enqueueByDeadline>
    1d30:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <timerQ>
    1d34:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <timerQ+0x1>
    1d38:	30 97       	sbiw	r30, 0x00	; 0
    1d3a:	69 f0       	breq	.+26     	; 0x1d56 <__vector_7+0xbc>
    1d3c:	82 81       	ldd	r24, Z+2	; 0x02
    1d3e:	93 81       	ldd	r25, Z+3	; 0x03
    1d40:	a4 81       	ldd	r26, Z+4	; 0x04
    1d42:	b5 81       	ldd	r27, Z+5	; 0x05
    1d44:	8c 19       	sub	r24, r12
    1d46:	9d 09       	sbc	r25, r13
    1d48:	ae 09       	sbc	r26, r14
    1d4a:	bf 09       	sbc	r27, r15
    1d4c:	18 16       	cp	r1, r24
    1d4e:	19 06       	cpc	r1, r25
    1d50:	1a 06       	cpc	r1, r26
    1d52:	1b 06       	cpc	r1, r27
    1d54:	2c f7       	brge	.-54     	; 0x1d20 <__vector_7+0x86>
    1d56:	30 97       	sbiw	r30, 0x00	; 0
    1d58:	21 f1       	breq	.+72     	; 0x1da2 <__vector_7+0x108>
    1d5a:	82 81       	ldd	r24, Z+2	; 0x02
    1d5c:	93 81       	ldd	r25, Z+3	; 0x03
    1d5e:	a4 81       	ldd	r26, Z+4	; 0x04
    1d60:	b5 81       	ldd	r27, Z+5	; 0x05
    1d62:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <__data_end>
    1d66:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <__data_end+0x1>
    1d6a:	2a 17       	cp	r18, r26
    1d6c:	3b 07       	cpc	r19, r27
    1d6e:	c9 f4       	brne	.+50     	; 0x1da2 <__vector_7+0x108>
    1d70:	9c 01       	movw	r18, r24
    1d72:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d76:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d7a:	84 1b       	sub	r24, r20
    1d7c:	95 0b       	sbc	r25, r21
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	31 f4       	brne	.+12     	; 0x1d8e <__vector_7+0xf4>
    1d82:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d86:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d8a:	2f 5f       	subi	r18, 0xFF	; 255
    1d8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d8e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1d92:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1d96:	ef e6       	ldi	r30, 0x6F	; 111
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	82 60       	ori	r24, 0x02	; 2
    1d9e:	80 83       	st	Z, r24
    1da0:	05 c0       	rjmp	.+10     	; 0x1dac <__vector_7+0x112>
    1da2:	ef e6       	ldi	r30, 0x6F	; 111
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	8d 7f       	andi	r24, 0xFD	; 253
    1daa:	80 83       	st	Z, r24
    1dac:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <schedule>
    1db0:	ff 91       	pop	r31
    1db2:	ef 91       	pop	r30
    1db4:	bf 91       	pop	r27
    1db6:	af 91       	pop	r26
    1db8:	9f 91       	pop	r25
    1dba:	8f 91       	pop	r24
    1dbc:	7f 91       	pop	r23
    1dbe:	6f 91       	pop	r22
    1dc0:	5f 91       	pop	r21
    1dc2:	4f 91       	pop	r20
    1dc4:	3f 91       	pop	r19
    1dc6:	2f 91       	pop	r18
    1dc8:	ff 90       	pop	r15
    1dca:	ef 90       	pop	r14
    1dcc:	df 90       	pop	r13
    1dce:	cf 90       	pop	r12
    1dd0:	0f 90       	pop	r0
    1dd2:	0f be       	out	0x3f, r0	; 63
    1dd4:	0f 90       	pop	r0
    1dd6:	1f 90       	pop	r1
    1dd8:	18 95       	reti

00001dda <async>:
    1dda:	3f 92       	push	r3
    1ddc:	4f 92       	push	r4
    1dde:	5f 92       	push	r5
    1de0:	6f 92       	push	r6
    1de2:	7f 92       	push	r7
    1de4:	8f 92       	push	r8
    1de6:	9f 92       	push	r9
    1de8:	af 92       	push	r10
    1dea:	bf 92       	push	r11
    1dec:	cf 92       	push	r12
    1dee:	df 92       	push	r13
    1df0:	ef 92       	push	r14
    1df2:	ff 92       	push	r15
    1df4:	0f 93       	push	r16
    1df6:	1f 93       	push	r17
    1df8:	cf 93       	push	r28
    1dfa:	df 93       	push	r29
    1dfc:	2b 01       	movw	r4, r22
    1dfe:	3c 01       	movw	r6, r24
    1e00:	49 01       	movw	r8, r18
    1e02:	5a 01       	movw	r10, r20
    1e04:	8f b7       	in	r24, 0x3f	; 63
    1e06:	80 78       	andi	r24, 0x80	; 128
    1e08:	38 2e       	mov	r3, r24
    1e0a:	f8 94       	cli
    1e0c:	86 e0       	ldi	r24, 0x06	; 6
    1e0e:	91 e0       	ldi	r25, 0x01	; 1
    1e10:	0e 94 bd 05 	call	0xb7a	; 0xb7a <dequeue>
    1e14:	ec 01       	movw	r28, r24
    1e16:	1b 87       	std	Y+11, r17	; 0x0b
    1e18:	0a 87       	std	Y+10, r16	; 0x0a
    1e1a:	fd 86       	std	Y+13, r15	; 0x0d
    1e1c:	ec 86       	std	Y+12, r14	; 0x0c
    1e1e:	df 86       	std	Y+15, r13	; 0x0f
    1e20:	ce 86       	std	Y+14, r12	; 0x0e
    1e22:	33 20       	and	r3, r3
    1e24:	61 f0       	breq	.+24     	; 0x1e3e <async+0x64>
    1e26:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1e2a:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1e2e:	02 80       	ldd	r0, Z+2	; 0x02
    1e30:	f3 81       	ldd	r31, Z+3	; 0x03
    1e32:	e0 2d       	mov	r30, r0
    1e34:	82 81       	ldd	r24, Z+2	; 0x02
    1e36:	93 81       	ldd	r25, Z+3	; 0x03
    1e38:	a4 81       	ldd	r26, Z+4	; 0x04
    1e3a:	b5 81       	ldd	r27, Z+5	; 0x05
    1e3c:	08 c0       	rjmp	.+16     	; 0x1e4e <async+0x74>
    1e3e:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <timestamp>
    1e42:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <timestamp+0x1>
    1e46:	a0 91 3c 01 	lds	r26, 0x013C	; 0x80013c <timestamp+0x2>
    1e4a:	b0 91 3d 01 	lds	r27, 0x013D	; 0x80013d <timestamp+0x3>
    1e4e:	48 0e       	add	r4, r24
    1e50:	59 1e       	adc	r5, r25
    1e52:	6a 1e       	adc	r6, r26
    1e54:	7b 1e       	adc	r7, r27
    1e56:	4a 82       	std	Y+2, r4	; 0x02
    1e58:	5b 82       	std	Y+3, r5	; 0x03
    1e5a:	6c 82       	std	Y+4, r6	; 0x04
    1e5c:	7d 82       	std	Y+5, r7	; 0x05
    1e5e:	18 14       	cp	r1, r8
    1e60:	19 04       	cpc	r1, r9
    1e62:	1a 04       	cpc	r1, r10
    1e64:	1b 04       	cpc	r1, r11
    1e66:	44 f0       	brlt	.+16     	; 0x1e78 <async+0x9e>
    1e68:	0f 2e       	mov	r0, r31
    1e6a:	88 24       	eor	r8, r8
    1e6c:	8a 94       	dec	r8
    1e6e:	98 2c       	mov	r9, r8
    1e70:	a8 2c       	mov	r10, r8
    1e72:	ff e7       	ldi	r31, 0x7F	; 127
    1e74:	bf 2e       	mov	r11, r31
    1e76:	f0 2d       	mov	r31, r0
    1e78:	84 0c       	add	r8, r4
    1e7a:	95 1c       	adc	r9, r5
    1e7c:	a6 1c       	adc	r10, r6
    1e7e:	b7 1c       	adc	r11, r7
    1e80:	8e 82       	std	Y+6, r8	; 0x06
    1e82:	9f 82       	std	Y+7, r9	; 0x07
    1e84:	a8 86       	std	Y+8, r10	; 0x08
    1e86:	b9 86       	std	Y+9, r11	; 0x09
    1e88:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <__data_end>
    1e8c:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <__data_end+0x1>
    1e90:	c9 01       	movw	r24, r18
    1e92:	03 2e       	mov	r0, r19
    1e94:	00 0c       	add	r0, r0
    1e96:	aa 0b       	sbc	r26, r26
    1e98:	bb 0b       	sbc	r27, r27
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	99 27       	eor	r25, r25
    1e9e:	88 27       	eor	r24, r24
    1ea0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ea4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ea8:	60 e0       	ldi	r22, 0x00	; 0
    1eaa:	70 e0       	ldi	r23, 0x00	; 0
    1eac:	84 2b       	or	r24, r20
    1eae:	95 2b       	or	r25, r21
    1eb0:	a6 2b       	or	r26, r22
    1eb2:	b7 2b       	or	r27, r23
    1eb4:	b0 9b       	sbis	0x16, 0	; 22
    1eb6:	13 c0       	rjmp	.+38     	; 0x1ede <async+0x104>
    1eb8:	c9 01       	movw	r24, r18
    1eba:	01 96       	adiw	r24, 0x01	; 1
    1ebc:	09 2e       	mov	r0, r25
    1ebe:	00 0c       	add	r0, r0
    1ec0:	aa 0b       	sbc	r26, r26
    1ec2:	bb 0b       	sbc	r27, r27
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	99 27       	eor	r25, r25
    1ec8:	88 27       	eor	r24, r24
    1eca:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ece:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ed2:	60 e0       	ldi	r22, 0x00	; 0
    1ed4:	70 e0       	ldi	r23, 0x00	; 0
    1ed6:	84 2b       	or	r24, r20
    1ed8:	95 2b       	or	r25, r21
    1eda:	a6 2b       	or	r26, r22
    1edc:	b7 2b       	or	r27, r23
    1ede:	48 1a       	sub	r4, r24
    1ee0:	59 0a       	sbc	r5, r25
    1ee2:	6a 0a       	sbc	r6, r26
    1ee4:	7b 0a       	sbc	r7, r27
    1ee6:	14 14       	cp	r1, r4
    1ee8:	15 04       	cpc	r1, r5
    1eea:	16 04       	cpc	r1, r6
    1eec:	17 04       	cpc	r1, r7
    1eee:	ac f5       	brge	.+106    	; 0x1f5a <async+0x180>
    1ef0:	6e e3       	ldi	r22, 0x3E	; 62
    1ef2:	71 e0       	ldi	r23, 0x01	; 1
    1ef4:	ce 01       	movw	r24, r28
    1ef6:	0e 94 8c 05 	call	0xb18	; 0xb18 <enqueueByBaseline>
    1efa:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <timerQ>
    1efe:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <timerQ+0x1>
    1f02:	30 97       	sbiw	r30, 0x00	; 0
    1f04:	21 f1       	breq	.+72     	; 0x1f4e <async+0x174>
    1f06:	82 81       	ldd	r24, Z+2	; 0x02
    1f08:	93 81       	ldd	r25, Z+3	; 0x03
    1f0a:	a4 81       	ldd	r26, Z+4	; 0x04
    1f0c:	b5 81       	ldd	r27, Z+5	; 0x05
    1f0e:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <__data_end>
    1f12:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <__data_end+0x1>
    1f16:	2a 17       	cp	r18, r26
    1f18:	3b 07       	cpc	r19, r27
    1f1a:	c9 f4       	brne	.+50     	; 0x1f4e <async+0x174>
    1f1c:	9c 01       	movw	r18, r24
    1f1e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1f22:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1f26:	84 1b       	sub	r24, r20
    1f28:	95 0b       	sbc	r25, r21
    1f2a:	01 97       	sbiw	r24, 0x01	; 1
    1f2c:	31 f4       	brne	.+12     	; 0x1f3a <async+0x160>
    1f2e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1f32:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1f36:	2f 5f       	subi	r18, 0xFF	; 255
    1f38:	3f 4f       	sbci	r19, 0xFF	; 255
    1f3a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1f3e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1f42:	ef e6       	ldi	r30, 0x6F	; 111
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	82 60       	ori	r24, 0x02	; 2
    1f4a:	80 83       	st	Z, r24
    1f4c:	39 c0       	rjmp	.+114    	; 0x1fc0 <async+0x1e6>
    1f4e:	ef e6       	ldi	r30, 0x6F	; 111
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	8d 7f       	andi	r24, 0xFD	; 253
    1f56:	80 83       	st	Z, r24
    1f58:	33 c0       	rjmp	.+102    	; 0x1fc0 <async+0x1e6>
    1f5a:	60 e4       	ldi	r22, 0x40	; 64
    1f5c:	71 e0       	ldi	r23, 0x01	; 1
    1f5e:	ce 01       	movw	r24, r28
    1f60:	0e 94 5b 05 	call	0xab6	; 0xab6 <enqueueByDeadline>
    1f64:	33 20       	and	r3, r3
    1f66:	61 f1       	breq	.+88     	; 0x1fc0 <async+0x1e6>
    1f68:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    1f6c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    1f70:	89 2b       	or	r24, r25
    1f72:	31 f1       	breq	.+76     	; 0x1fc0 <async+0x1e6>
    1f74:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <msgQ>
    1f78:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <msgQ+0x1>
    1f7c:	86 81       	ldd	r24, Z+6	; 0x06
    1f7e:	97 81       	ldd	r25, Z+7	; 0x07
    1f80:	a0 85       	ldd	r26, Z+8	; 0x08
    1f82:	b1 85       	ldd	r27, Z+9	; 0x09
    1f84:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    1f88:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    1f8c:	02 80       	ldd	r0, Z+2	; 0x02
    1f8e:	f3 81       	ldd	r31, Z+3	; 0x03
    1f90:	e0 2d       	mov	r30, r0
    1f92:	46 81       	ldd	r20, Z+6	; 0x06
    1f94:	57 81       	ldd	r21, Z+7	; 0x07
    1f96:	60 85       	ldd	r22, Z+8	; 0x08
    1f98:	71 85       	ldd	r23, Z+9	; 0x09
    1f9a:	84 1b       	sub	r24, r20
    1f9c:	95 0b       	sbc	r25, r21
    1f9e:	a6 0b       	sbc	r26, r22
    1fa0:	b7 0b       	sbc	r27, r23
    1fa2:	72 f4       	brpl	.+28     	; 0x1fc0 <async+0x1e6>
    1fa4:	84 e0       	ldi	r24, 0x04	; 4
    1fa6:	91 e0       	ldi	r25, 0x01	; 1
    1fa8:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <pop>
    1fac:	62 e0       	ldi	r22, 0x02	; 2
    1fae:	71 e0       	ldi	r23, 0x01	; 1
    1fb0:	0e 94 de 05 	call	0xbbc	; 0xbbc <push>
    1fb4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <activeStack>
    1fb8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <activeStack+0x1>
    1fbc:	0e 94 3b 05 	call	0xa76	; 0xa76 <dispatch>
    1fc0:	33 20       	and	r3, r3
    1fc2:	09 f0       	breq	.+2      	; 0x1fc6 <async+0x1ec>
    1fc4:	78 94       	sei
    1fc6:	ce 01       	movw	r24, r28
    1fc8:	df 91       	pop	r29
    1fca:	cf 91       	pop	r28
    1fcc:	1f 91       	pop	r17
    1fce:	0f 91       	pop	r16
    1fd0:	ff 90       	pop	r15
    1fd2:	ef 90       	pop	r14
    1fd4:	df 90       	pop	r13
    1fd6:	cf 90       	pop	r12
    1fd8:	bf 90       	pop	r11
    1fda:	af 90       	pop	r10
    1fdc:	9f 90       	pop	r9
    1fde:	8f 90       	pop	r8
    1fe0:	7f 90       	pop	r7
    1fe2:	6f 90       	pop	r6
    1fe4:	5f 90       	pop	r5
    1fe6:	4f 90       	pop	r4
    1fe8:	3f 90       	pop	r3
    1fea:	08 95       	ret

00001fec <sync>:
    1fec:	cf 92       	push	r12
    1fee:	df 92       	push	r13
    1ff0:	ef 92       	push	r14
    1ff2:	ff 92       	push	r15
    1ff4:	0f 93       	push	r16
    1ff6:	1f 93       	push	r17
    1ff8:	cf 93       	push	r28
    1ffa:	df 93       	push	r29
    1ffc:	ec 01       	movw	r28, r24
    1ffe:	7b 01       	movw	r14, r22
    2000:	6a 01       	movw	r12, r20
    2002:	1f b7       	in	r17, 0x3f	; 63
    2004:	10 78       	andi	r17, 0x80	; 128
    2006:	f8 94       	cli
    2008:	a8 81       	ld	r26, Y
    200a:	b9 81       	ldd	r27, Y+1	; 0x01
    200c:	10 97       	sbiw	r26, 0x00	; 0
    200e:	19 f4       	brne	.+6      	; 0x2016 <sync+0x2a>
    2010:	35 c0       	rjmp	.+106    	; 0x207c <sync+0x90>
    2012:	a0 81       	ld	r26, Z
    2014:	b1 81       	ldd	r27, Z+1	; 0x01
    2016:	14 96       	adiw	r26, 0x04	; 4
    2018:	ed 91       	ld	r30, X+
    201a:	fc 91       	ld	r31, X
    201c:	15 97       	sbiw	r26, 0x05	; 5
    201e:	30 97       	sbiw	r30, 0x00	; 0
    2020:	c1 f7       	brne	.-16     	; 0x2012 <sync+0x26>
    2022:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2026:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    202a:	a2 17       	cp	r26, r18
    202c:	b3 07       	cpc	r27, r19
    202e:	11 f0       	breq	.+4      	; 0x2034 <sync+0x48>
    2030:	11 11       	cpse	r17, r1
    2032:	07 c0       	rjmp	.+14     	; 0x2042 <sync+0x56>
    2034:	11 23       	and	r17, r17
    2036:	09 f4       	brne	.+2      	; 0x203a <sync+0x4e>
    2038:	4a c0       	rjmp	.+148    	; 0x20ce <sync+0xe2>
    203a:	78 94       	sei
    203c:	8f ef       	ldi	r24, 0xFF	; 255
    203e:	9f ef       	ldi	r25, 0xFF	; 255
    2040:	4e c0       	rjmp	.+156    	; 0x20de <sync+0xf2>
    2042:	8a 81       	ldd	r24, Y+2	; 0x02
    2044:	9b 81       	ldd	r25, Y+3	; 0x03
    2046:	00 97       	sbiw	r24, 0x00	; 0
    2048:	19 f0       	breq	.+6      	; 0x2050 <sync+0x64>
    204a:	fc 01       	movw	r30, r24
    204c:	15 82       	std	Z+5, r1	; 0x05
    204e:	14 82       	std	Z+4, r1	; 0x04
    2050:	3b 83       	std	Y+3, r19	; 0x03
    2052:	2a 83       	std	Y+2, r18	; 0x02
    2054:	f9 01       	movw	r30, r18
    2056:	d5 83       	std	Z+5, r29	; 0x05
    2058:	c4 83       	std	Z+4, r28	; 0x04
    205a:	cd 01       	movw	r24, r26
    205c:	0e 94 3b 05 	call	0xa76	; 0xa76 <dispatch>
    2060:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2064:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2068:	82 81       	ldd	r24, Z+2	; 0x02
    206a:	93 81       	ldd	r25, Z+3	; 0x03
    206c:	89 2b       	or	r24, r25
    206e:	31 f4       	brne	.+12     	; 0x207c <sync+0x90>
    2070:	11 23       	and	r17, r17
    2072:	81 f1       	breq	.+96     	; 0x20d4 <sync+0xe8>
    2074:	78 94       	sei
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	31 c0       	rjmp	.+98     	; 0x20de <sync+0xf2>
    207c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2080:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2084:	99 83       	std	Y+1, r25	; 0x01
    2086:	88 83       	st	Y, r24
    2088:	11 23       	and	r17, r17
    208a:	29 f0       	breq	.+10     	; 0x2096 <sync+0xaa>
    208c:	8a 81       	ldd	r24, Y+2	; 0x02
    208e:	9b 81       	ldd	r25, Y+3	; 0x03
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	09 f0       	breq	.+2      	; 0x2096 <sync+0xaa>
    2094:	78 94       	sei
    2096:	b6 01       	movw	r22, r12
    2098:	ce 01       	movw	r24, r28
    209a:	f7 01       	movw	r30, r14
    209c:	09 95       	icall
    209e:	f8 2e       	mov	r15, r24
    20a0:	09 2f       	mov	r16, r25
    20a2:	8f b7       	in	r24, 0x3f	; 63
    20a4:	f8 94       	cli
    20a6:	19 82       	std	Y+1, r1	; 0x01
    20a8:	18 82       	st	Y, r1
    20aa:	8a 81       	ldd	r24, Y+2	; 0x02
    20ac:	9b 81       	ldd	r25, Y+3	; 0x03
    20ae:	82 30       	cpi	r24, 0x02	; 2
    20b0:	91 05       	cpc	r25, r1
    20b2:	38 f0       	brcs	.+14     	; 0x20c2 <sync+0xd6>
    20b4:	1b 82       	std	Y+3, r1	; 0x03
    20b6:	1a 82       	std	Y+2, r1	; 0x02
    20b8:	fc 01       	movw	r30, r24
    20ba:	15 82       	std	Z+5, r1	; 0x05
    20bc:	14 82       	std	Z+4, r1	; 0x04
    20be:	0e 94 3b 05 	call	0xa76	; 0xa76 <dispatch>
    20c2:	11 23       	and	r17, r17
    20c4:	51 f0       	breq	.+20     	; 0x20da <sync+0xee>
    20c6:	78 94       	sei
    20c8:	8f 2d       	mov	r24, r15
    20ca:	90 2f       	mov	r25, r16
    20cc:	08 c0       	rjmp	.+16     	; 0x20de <sync+0xf2>
    20ce:	8f ef       	ldi	r24, 0xFF	; 255
    20d0:	9f ef       	ldi	r25, 0xFF	; 255
    20d2:	05 c0       	rjmp	.+10     	; 0x20de <sync+0xf2>
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	02 c0       	rjmp	.+4      	; 0x20de <sync+0xf2>
    20da:	8f 2d       	mov	r24, r15
    20dc:	90 2f       	mov	r25, r16
    20de:	df 91       	pop	r29
    20e0:	cf 91       	pop	r28
    20e2:	1f 91       	pop	r17
    20e4:	0f 91       	pop	r16
    20e6:	ff 90       	pop	r15
    20e8:	ef 90       	pop	r14
    20ea:	df 90       	pop	r13
    20ec:	cf 90       	pop	r12
    20ee:	08 95       	ret

000020f0 <run>:
    20f0:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    20f4:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    20f8:	80 e4       	ldi	r24, 0x40	; 64
    20fa:	91 e0       	ldi	r25, 0x01	; 1
    20fc:	0e 94 bd 05 	call	0xb7a	; 0xb7a <dequeue>
    2100:	ec 01       	movw	r28, r24
    2102:	f8 01       	movw	r30, r16
    2104:	93 83       	std	Z+3, r25	; 0x03
    2106:	82 83       	std	Z+2, r24	; 0x02
    2108:	78 94       	sei
    210a:	6c 85       	ldd	r22, Y+12	; 0x0c
    210c:	7d 85       	ldd	r23, Y+13	; 0x0d
    210e:	4e 85       	ldd	r20, Y+14	; 0x0e
    2110:	5f 85       	ldd	r21, Y+15	; 0x0f
    2112:	8a 85       	ldd	r24, Y+10	; 0x0a
    2114:	9b 85       	ldd	r25, Y+11	; 0x0b
    2116:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <sync>
    211a:	8f b7       	in	r24, 0x3f	; 63
    211c:	f8 94       	cli
    211e:	66 e0       	ldi	r22, 0x06	; 6
    2120:	71 e0       	ldi	r23, 0x01	; 1
    2122:	ce 01       	movw	r24, r28
    2124:	0e 94 d4 05 	call	0xba8	; 0xba8 <insert>
    2128:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    212c:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    2130:	01 90       	ld	r0, Z+
    2132:	f0 81       	ld	r31, Z
    2134:	e0 2d       	mov	r30, r0
    2136:	c2 81       	ldd	r28, Z+2	; 0x02
    2138:	d3 81       	ldd	r29, Z+3	; 0x03
    213a:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <msgQ>
    213e:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <msgQ+0x1>
    2142:	30 97       	sbiw	r30, 0x00	; 0
    2144:	a1 f0       	breq	.+40     	; 0x216e <run+0x7e>
    2146:	20 97       	sbiw	r28, 0x00	; 0
    2148:	99 f2       	breq	.-90     	; 0x20f0 <run>
    214a:	86 81       	ldd	r24, Z+6	; 0x06
    214c:	97 81       	ldd	r25, Z+7	; 0x07
    214e:	a0 85       	ldd	r26, Z+8	; 0x08
    2150:	b1 85       	ldd	r27, Z+9	; 0x09
    2152:	4e 81       	ldd	r20, Y+6	; 0x06
    2154:	5f 81       	ldd	r21, Y+7	; 0x07
    2156:	68 85       	ldd	r22, Y+8	; 0x08
    2158:	79 85       	ldd	r23, Y+9	; 0x09
    215a:	84 1b       	sub	r24, r20
    215c:	95 0b       	sbc	r25, r21
    215e:	a6 0b       	sbc	r26, r22
    2160:	b7 0b       	sbc	r27, r23
    2162:	18 16       	cp	r1, r24
    2164:	19 06       	cpc	r1, r25
    2166:	1a 06       	cpc	r1, r26
    2168:	1b 06       	cpc	r1, r27
    216a:	0c f0       	brlt	.+2      	; 0x216e <run+0x7e>
    216c:	c1 cf       	rjmp	.-126    	; 0x20f0 <run>
    216e:	82 e0       	ldi	r24, 0x02	; 2
    2170:	91 e0       	ldi	r25, 0x01	; 1
    2172:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <pop>
    2176:	64 e0       	ldi	r22, 0x04	; 4
    2178:	71 e0       	ldi	r23, 0x01	; 1
    217a:	0e 94 de 05 	call	0xbbc	; 0xbbc <push>
    217e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <activeStack>
    2182:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <activeStack+0x1>
    2186:	02 c0       	rjmp	.+4      	; 0x218c <run+0x9c>
    2188:	a0 81       	ld	r26, Z
    218a:	b1 81       	ldd	r27, Z+1	; 0x01
    218c:	14 96       	adiw	r26, 0x04	; 4
    218e:	ed 91       	ld	r30, X+
    2190:	fc 91       	ld	r31, X
    2192:	15 97       	sbiw	r26, 0x05	; 5
    2194:	30 97       	sbiw	r30, 0x00	; 0
    2196:	c1 f7       	brne	.-16     	; 0x2188 <run+0x98>
    2198:	cd 01       	movw	r24, r26
    219a:	0e 94 3b 05 	call	0xa76	; 0xa76 <dispatch>
    219e:	a8 cf       	rjmp	.-176    	; 0x20f0 <run>

000021a0 <install>:
    thread0.msg = NULL;
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    21a0:	fc 01       	movw	r30, r24
    if (i >= 0 && i < N_VECTORS) {
    21a2:	42 31       	cpi	r20, 0x12	; 18
    21a4:	b8 f4       	brcc	.+46     	; 0x21d4 <install+0x34>
        char status;
        DISABLE(status);
    21a6:	9f b7       	in	r25, 0x3f	; 63
    21a8:	90 78       	andi	r25, 0x80	; 128
    21aa:	f8 94       	cli
        otable[i] = obj;
    21ac:	50 e0       	ldi	r21, 0x00	; 0
    21ae:	44 0f       	add	r20, r20
    21b0:	55 1f       	adc	r21, r21
    21b2:	da 01       	movw	r26, r20
    21b4:	ae 5b       	subi	r26, 0xBE	; 190
    21b6:	be 4f       	sbci	r27, 0xFE	; 254
    21b8:	ed 93       	st	X+, r30
    21ba:	fc 93       	st	X, r31
        mtable[i] = m;
    21bc:	da 01       	movw	r26, r20
    21be:	a6 52       	subi	r26, 0x26	; 38
    21c0:	be 4f       	sbci	r27, 0xFE	; 254
    21c2:	6d 93       	st	X+, r22
    21c4:	7c 93       	st	X, r23
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    21c6:	21 e0       	ldi	r18, 0x01	; 1
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	33 83       	std	Z+3, r19	; 0x03
    21cc:	22 83       	std	Z+2, r18	; 0x02
        ENABLE(status);
    21ce:	99 23       	and	r25, r25
    21d0:	09 f0       	breq	.+2      	; 0x21d4 <install+0x34>
    21d2:	78 94       	sei
    21d4:	08 95       	ret

000021d6 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    21d6:	8c 01       	movw	r16, r24
    21d8:	7b 01       	movw	r14, r22
    21da:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    21dc:	8f b7       	in	r24, 0x3f	; 63
    21de:	f8 94       	cli
    initialize();
    21e0:	0e 94 9c 04 	call	0x938	; 0x938 <initialize>
    ENABLE(1);
    21e4:	78 94       	sei
    if (m != NULL)
    21e6:	e1 14       	cp	r14, r1
    21e8:	f1 04       	cpc	r15, r1
    21ea:	41 f0       	breq	.+16     	; 0x21fc <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	a9 01       	movw	r20, r18
    21f2:	60 e0       	ldi	r22, 0x00	; 0
    21f4:	70 e0       	ldi	r23, 0x00	; 0
    21f6:	cb 01       	movw	r24, r22
    21f8:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <async>
    DISABLE(status);
    21fc:	8f b7       	in	r24, 0x3f	; 63
    21fe:	f8 94       	cli
    idle();
    2200:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <idle>

00002204 <__divmodhi4>:
    2204:	97 fb       	bst	r25, 7
    2206:	07 2e       	mov	r0, r23
    2208:	16 f4       	brtc	.+4      	; 0x220e <__divmodhi4+0xa>
    220a:	00 94       	com	r0
    220c:	07 d0       	rcall	.+14     	; 0x221c <__divmodhi4_neg1>
    220e:	77 fd       	sbrc	r23, 7
    2210:	09 d0       	rcall	.+18     	; 0x2224 <__divmodhi4_neg2>
    2212:	0e 94 1d 11 	call	0x223a	; 0x223a <__udivmodhi4>
    2216:	07 fc       	sbrc	r0, 7
    2218:	05 d0       	rcall	.+10     	; 0x2224 <__divmodhi4_neg2>
    221a:	3e f4       	brtc	.+14     	; 0x222a <__divmodhi4_exit>

0000221c <__divmodhi4_neg1>:
    221c:	90 95       	com	r25
    221e:	81 95       	neg	r24
    2220:	9f 4f       	sbci	r25, 0xFF	; 255
    2222:	08 95       	ret

00002224 <__divmodhi4_neg2>:
    2224:	70 95       	com	r23
    2226:	61 95       	neg	r22
    2228:	7f 4f       	sbci	r23, 0xFF	; 255

0000222a <__divmodhi4_exit>:
    222a:	08 95       	ret

0000222c <__usmulhisi3>:
    222c:	0e 94 31 11 	call	0x2262	; 0x2262 <__umulhisi3>

00002230 <__usmulhisi3_tail>:
    2230:	b7 ff       	sbrs	r27, 7
    2232:	08 95       	ret
    2234:	82 1b       	sub	r24, r18
    2236:	93 0b       	sbc	r25, r19
    2238:	08 95       	ret

0000223a <__udivmodhi4>:
    223a:	aa 1b       	sub	r26, r26
    223c:	bb 1b       	sub	r27, r27
    223e:	51 e1       	ldi	r21, 0x11	; 17
    2240:	07 c0       	rjmp	.+14     	; 0x2250 <__udivmodhi4_ep>

00002242 <__udivmodhi4_loop>:
    2242:	aa 1f       	adc	r26, r26
    2244:	bb 1f       	adc	r27, r27
    2246:	a6 17       	cp	r26, r22
    2248:	b7 07       	cpc	r27, r23
    224a:	10 f0       	brcs	.+4      	; 0x2250 <__udivmodhi4_ep>
    224c:	a6 1b       	sub	r26, r22
    224e:	b7 0b       	sbc	r27, r23

00002250 <__udivmodhi4_ep>:
    2250:	88 1f       	adc	r24, r24
    2252:	99 1f       	adc	r25, r25
    2254:	5a 95       	dec	r21
    2256:	a9 f7       	brne	.-22     	; 0x2242 <__udivmodhi4_loop>
    2258:	80 95       	com	r24
    225a:	90 95       	com	r25
    225c:	bc 01       	movw	r22, r24
    225e:	cd 01       	movw	r24, r26
    2260:	08 95       	ret

00002262 <__umulhisi3>:
    2262:	a2 9f       	mul	r26, r18
    2264:	b0 01       	movw	r22, r0
    2266:	b3 9f       	mul	r27, r19
    2268:	c0 01       	movw	r24, r0
    226a:	a3 9f       	mul	r26, r19
    226c:	70 0d       	add	r23, r0
    226e:	81 1d       	adc	r24, r1
    2270:	11 24       	eor	r1, r1
    2272:	91 1d       	adc	r25, r1
    2274:	b2 9f       	mul	r27, r18
    2276:	70 0d       	add	r23, r0
    2278:	81 1d       	adc	r24, r1
    227a:	11 24       	eor	r1, r1
    227c:	91 1d       	adc	r25, r1
    227e:	08 95       	ret

00002280 <setjmp>:
    2280:	dc 01       	movw	r26, r24
    2282:	2d 92       	st	X+, r2
    2284:	3d 92       	st	X+, r3
    2286:	4d 92       	st	X+, r4
    2288:	5d 92       	st	X+, r5
    228a:	6d 92       	st	X+, r6
    228c:	7d 92       	st	X+, r7
    228e:	8d 92       	st	X+, r8
    2290:	9d 92       	st	X+, r9
    2292:	ad 92       	st	X+, r10
    2294:	bd 92       	st	X+, r11
    2296:	cd 92       	st	X+, r12
    2298:	dd 92       	st	X+, r13
    229a:	ed 92       	st	X+, r14
    229c:	fd 92       	st	X+, r15
    229e:	0d 93       	st	X+, r16
    22a0:	1d 93       	st	X+, r17
    22a2:	cd 93       	st	X+, r28
    22a4:	dd 93       	st	X+, r29
    22a6:	ff 91       	pop	r31
    22a8:	ef 91       	pop	r30
    22aa:	8d b7       	in	r24, 0x3d	; 61
    22ac:	8d 93       	st	X+, r24
    22ae:	8e b7       	in	r24, 0x3e	; 62
    22b0:	8d 93       	st	X+, r24
    22b2:	8f b7       	in	r24, 0x3f	; 63
    22b4:	8d 93       	st	X+, r24
    22b6:	ed 93       	st	X+, r30
    22b8:	fd 93       	st	X+, r31
    22ba:	88 27       	eor	r24, r24
    22bc:	99 27       	eor	r25, r25
    22be:	09 94       	ijmp

000022c0 <longjmp>:
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	81 30       	cpi	r24, 0x01	; 1
    22c6:	91 05       	cpc	r25, r1
    22c8:	81 1d       	adc	r24, r1
    22ca:	2d 90       	ld	r2, X+
    22cc:	3d 90       	ld	r3, X+
    22ce:	4d 90       	ld	r4, X+
    22d0:	5d 90       	ld	r5, X+
    22d2:	6d 90       	ld	r6, X+
    22d4:	7d 90       	ld	r7, X+
    22d6:	8d 90       	ld	r8, X+
    22d8:	9d 90       	ld	r9, X+
    22da:	ad 90       	ld	r10, X+
    22dc:	bd 90       	ld	r11, X+
    22de:	cd 90       	ld	r12, X+
    22e0:	dd 90       	ld	r13, X+
    22e2:	ed 90       	ld	r14, X+
    22e4:	fd 90       	ld	r15, X+
    22e6:	0d 91       	ld	r16, X+
    22e8:	1d 91       	ld	r17, X+
    22ea:	cd 91       	ld	r28, X+
    22ec:	dd 91       	ld	r29, X+
    22ee:	ed 91       	ld	r30, X+
    22f0:	fd 91       	ld	r31, X+
    22f2:	0d 90       	ld	r0, X+
    22f4:	f8 94       	cli
    22f6:	fe bf       	out	0x3e, r31	; 62
    22f8:	0f be       	out	0x3f, r0	; 63
    22fa:	ed bf       	out	0x3d, r30	; 61
    22fc:	ed 91       	ld	r30, X+
    22fe:	fd 91       	ld	r31, X+
    2300:	09 94       	ijmp

00002302 <_exit>:
    2302:	f8 94       	cli

00002304 <__stop_program>:
    2304:	ff cf       	rjmp	.-2      	; 0x2304 <__stop_program>
